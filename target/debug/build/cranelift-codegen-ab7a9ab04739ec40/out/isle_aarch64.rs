// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/aarch64/inst.isle
// - src/isa/aarch64/inst_neon.isle
// - src/isa/aarch64/lower.isle
// - src/isa/aarch64/lower_dynamic_neon.isle
// - /Users/igorilyk/shad-rust/target/debug/build/cranelift-codegen-ab7a9ab04739ec40/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn u32_to_offset32(&mut self, arg0: u32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn sign_return_address_disabled(&mut self) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn move_wide_const_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn move_wide_const_from_inverted_u64(&mut self, arg0: Type, arg1: u64)
        -> Option<MoveWideConst>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: &VecMachLabel, arg1: u8) -> BranchTarget;
    fn targets_jt_size(&mut self, arg0: &VecMachLabel) -> u32;
    fn targets_jt_space(&mut self, arg0: &VecMachLabel) -> CodeOffset;
    fn targets_jt_info(&mut self, arg0: &VecMachLabel) -> BoxJTSequenceInfo;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn ashr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn pair_amode(&mut self, arg0: Value, arg1: u32) -> PairAMode;
    fn zero_reg(&mut self) -> Reg;
    fn fp_reg(&mut self) -> Reg;
    fn stack_reg(&mut self) -> Reg;
    fn writable_link_reg(&mut self) -> WritableReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn load_constant64_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg;
    fn amode(&mut self, arg0: Type, arg1: Value, arg2: u32) -> AMode;
    fn u64_low32_bits_unset(&mut self, arg0: u64) -> Option<u64>;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u64>;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self) -> PReg;
    fn preg_fp(&mut self) -> PReg;
    fn preg_link(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn asimd_mov_mod_imm_zero(&mut self, arg0: &ScalarSize) -> ASIMDMovModImm;
    fn asimd_mov_mod_imm_from_u64(
        &mut self,
        arg0: u64,
        arg1: &ScalarSize,
    ) -> Option<ASIMDMovModImm>;
    fn asimd_fp_mod_imm_from_u64(&mut self, arg0: u64, arg1: &ScalarSize) -> Option<ASIMDFPModImm>;
    fn shuffle_dup8_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup16_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup32_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup64_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn vec_extract_imm4_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn shift_masked_imm(&mut self, arg0: Type, arg1: u64) -> u8;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 309.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 351.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 370.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 378.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/aarch64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovToPReg {
        rd: PReg,
        rm: Reg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        lane: u8,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecFmlaElem {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
        idx: u8,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
        stack_bytes_to_pop: u32,
    },
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
        rets: VecRetPair,
        stack_bytes_to_pop: u32,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Adrp {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        info: BoxJTSequenceInfo,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Pacisp {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    StackProbeLoop {
        start: WritableReg,
        end: Reg,
        step: Imm12,
    },
}

/// Internal type ALUOp: defined at src/isa/aarch64/inst.isle line 975.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    RotR,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src/isa/aarch64/inst.isle line 1013.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
    UMAddL,
    SMAddL,
}

/// Internal type MoveWideOp: defined at src/isa/aarch64/inst.isle line 1025.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src/isa/aarch64/inst.isle line 1064.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
    Rev16,
    Rev32,
    Rev64,
}

/// Internal type AMode: defined at src/isa/aarch64/inst.isle line 1081.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
        ty: Type,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        ty: Type,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
        ty: Type,
    },
    SPOffset {
        off: i64,
        ty: Type,
    },
    FPOffset {
        off: i64,
        ty: Type,
    },
    Const {
        addr: VCodeConstant,
    },
    NominalSPOffset {
        off: i64,
        ty: Type,
    },
}

/// Internal type FPUOp1: defined at src/isa/aarch64/inst.isle line 1284.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src/isa/aarch64/inst.isle line 1294.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src/isa/aarch64/inst.isle line 1305.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
}

/// Internal type FpuToIntOp: defined at src/isa/aarch64/inst.isle line 1311.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src/isa/aarch64/inst.isle line 1324.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src/isa/aarch64/inst.isle line 1338.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src/isa/aarch64/inst.isle line 1351.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src/isa/aarch64/inst.isle line 1360.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Zip2,
    Sqrdmulh,
    Uzp1,
    Uzp2,
    Trn1,
    Trn2,
}

/// Internal type VecALUModOp: defined at src/isa/aarch64/inst.isle line 1447.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
    Fmls,
}

/// Internal type VecMisc2: defined at src/isa/aarch64/inst.isle line 1458.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev16,
    Rev32,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src/isa/aarch64/inst.isle line 1519.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src/isa/aarch64/inst.isle line 1534.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src/isa/aarch64/inst.isle line 1548.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src/isa/aarch64/inst.isle line 1560.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src/isa/aarch64/inst.isle line 1569.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src/isa/aarch64/inst.isle line 1577.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src/isa/aarch64/inst.isle line 1588.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src/isa/aarch64/inst.isle line 1597.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src/isa/aarch64/inst.isle line 1608.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src/isa/aarch64/inst.isle line 1615.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src/isa/aarch64/inst.isle line 1630.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src/isa/aarch64/inst.isle line 1646.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    A,
    B,
}

/// Internal type BranchTargetType: defined at src/isa/aarch64/inst.isle line 1653.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ImmExtend: defined at src/isa/aarch64/inst.isle line 2879.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

/// Internal type FlagsAndCC: defined at src/isa/aarch64/inst.isle line 3664.
#[derive(Clone, Debug)]
pub enum FlagsAndCC {
    FlagsAndCC { flags: ProducesFlags, cc: IntCC },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 65.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 69.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 138.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 149.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 160.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 159"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 165.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 164"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 170.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 169"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 319.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 321.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 324.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 318"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 332.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 337.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 339.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 341.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 336"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 366.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 365"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 396.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 397.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 395"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 402.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 404.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 401"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 417.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 411.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 410"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 448.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 454.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 466.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 482.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 489.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 502.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 442.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 434.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 432"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 520.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 527.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 538.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 543.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 548.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 553.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 558.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 536"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 567.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 575.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 584.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 592.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 601.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 661.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 669.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 678.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 686.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 695.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 614.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 622.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 631.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 639.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 648.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 708.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 716.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 725.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 733.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 742.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 754.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 762.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 779.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 771.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 787.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 796.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 564"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 996.
    return v2;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 1192.
        return OperandSize::Size32;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/aarch64/inst.isle line 1193.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size", "src/isa/aarch64/inst.isle line 1191"
    )
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    match arg0 {
        I8 => {
            // Rule at src/isa/aarch64/inst.isle line 1205.
            return ScalarSize::Size8;
        }
        I16 => {
            // Rule at src/isa/aarch64/inst.isle line 1206.
            return ScalarSize::Size16;
        }
        I32 => {
            // Rule at src/isa/aarch64/inst.isle line 1207.
            return ScalarSize::Size32;
        }
        I64 => {
            // Rule at src/isa/aarch64/inst.isle line 1208.
            return ScalarSize::Size64;
        }
        I128 => {
            // Rule at src/isa/aarch64/inst.isle line 1209.
            return ScalarSize::Size128;
        }
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 1211.
            return ScalarSize::Size32;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 1212.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "scalar_size", "src/isa/aarch64/inst.isle line 1203"
    )
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1216.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1217.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1218.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1219.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    let v9 = C::dynamic_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1220.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1221.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1222.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1223.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_size", "src/isa/aarch64/inst.isle line 1215"
    )
}

// Generated as internal constructor for term vector_lane_size.
pub fn constructor_vector_lane_size<C: Context>(ctx: &mut C, arg0: &VectorSize) -> ScalarSize {
    match arg0 {
        &VectorSize::Size8x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1228.
            return ScalarSize::Size8;
        }
        &VectorSize::Size8x16 => {
            // Rule at src/isa/aarch64/inst.isle line 1227.
            return ScalarSize::Size8;
        }
        &VectorSize::Size16x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1230.
            return ScalarSize::Size16;
        }
        &VectorSize::Size16x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1229.
            return ScalarSize::Size16;
        }
        &VectorSize::Size32x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1232.
            return ScalarSize::Size32;
        }
        &VectorSize::Size32x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1231.
            return ScalarSize::Size32;
        }
        &VectorSize::Size64x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1233.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_lane_size", "src/isa/aarch64/inst.isle line 1226"
    )
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(ctx: &mut C, arg0: Type) -> VectorSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                match v2.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1268.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1269.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v2.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1270.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1271.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v2.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1272.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1273.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1274.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    let v12 = C::dynamic_lane(ctx, arg0);
    if let Some(v13) = v12 {
        match v13.0 {
            0x8 => {
                match v13.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1275.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1276.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v13.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1277.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1278.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v13.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1279.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1280.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v13.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1281.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_size", "src/isa/aarch64/inst.isle line 1267"
    )
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        // Rule at src/isa/aarch64/inst.isle line 1772.
                        return Some(v13);
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v3 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v4 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v5 = C::value_regs(ctx, v3, v4);
    // Rule at src/isa/aarch64/inst.isle line 1821.
    return v5;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &constructor_operand_size(ctx, arg1);
    let v5 = MInst::Mov {
        size: v4.clone(),
        rd: v3,
        rm: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1829.
    return v7;
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovZ,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1836.
    return v7;
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovN,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1843.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmLogic {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imml: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1850.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmShift {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        immshift: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1857.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRR {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1864.
    return v9;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRR {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1871.
    return v8;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRR {
        fpu_op: arg0.clone(),
        size: arg2.clone(),
        rd: v4,
        rn: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1878.
    return v7;
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1886.
    return v9;
}

// Generated as internal constructor for term vec_fmla_elem.
pub fn constructor_vec_fmla_elem<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
    arg5: u8,
) -> Reg {
    let v7 = C::temp_writable_reg(ctx, I8X16);
    let v8 = MInst::VecFmlaElem {
        alu_op: arg0.clone(),
        rd: v7,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
        idx: arg5,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v7);
    // Rule at src/isa/aarch64/inst.isle line 1894.
    return v10;
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(ctx: &mut C, arg0: &FPUOpRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRRI {
        fpu_op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1900.
    return v6;
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRRIMod {
        fpu_op: arg0.clone(),
        rd: v4,
        ri: arg1,
        rn: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1906.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, F64);
    let v6 = MInst::FpuRRR {
        fpu_op: arg0.clone(),
        size: arg3.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1913.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, F64);
    let v7 = MInst::FpuRRRR {
        fpu_op: arg0.clone(),
        size: arg1.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1920.
    return v9;
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::FpuCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 1927.
    return v4;
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLanes {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1933.
    return v7;
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecShiftImm {
        op: arg0.clone(),
        rd: v5,
        rn: arg2,
        size: arg3.clone(),
        imm: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1940.
    return v8;
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDup {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1947.
    return v6;
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: u8,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupFromFpu {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        lane: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1954.
    return v7;
}

// Generated as internal constructor for term vec_dup_imm.
pub fn constructor_vec_dup_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDMovModImm,
    arg1: bool,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupImm {
        rd: v4,
        imm: arg0,
        invert: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1961.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imm12: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1968.
    return v9;
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRShift {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        shiftop: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1975.
    return v10;
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::lshr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 1983.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift", "src/isa/aarch64/inst.isle line 1982"
    )
}

// Generated as internal constructor for term cmp_rr_shift_asr.
pub fn constructor_cmp_rr_shift_asr<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::ashr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 1992.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift_asr", "src/isa/aarch64/inst.isle line 1991"
    )
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRExtend {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        extendop: arg4.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2000.
    return v10;
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Reg {
    let v4 = C::put_extended_in_reg(ctx, arg3);
    let v5 = &C::get_extended_op(ctx, arg3);
    let v6 = constructor_alu_rrr_extend(ctx, arg0, arg1, arg2, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 2008.
    return v6;
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRR {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2015.
    return v10;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2022.
    return v9;
}

// Generated as internal constructor for term alu_rrr_with_flags_chained.
pub fn constructor_alu_rrr_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ConsumesAndProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ConsumesAndProducesFlags::ReturnsReg {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2030.
    return v9;
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(ctx: &mut C, arg0: &BitOp, arg1: Type, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &constructor_operand_size(ctx, arg1);
    let v6 = MInst::BitRR {
        op: arg0.clone(),
        size: v5.clone(),
        rd: v4,
        rn: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2038.
    return v8;
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::AddS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2045.
    return v9;
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Adc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2053.
    return v9;
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2061.
    return v9;
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2070.
    return v5;
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2077.
    return v6;
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2083.
    return v6;
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2089.
    return v6;
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> ProducesFlags {
    let v3 = &constructor_cmp_imm(ctx, &OperandSize::Size64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2095.
    return v3.clone();
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> ProducesFlags {
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRRExtend {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        extendop: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2099.
    return v7;
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Sbc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2106.
    return v9;
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecMisc {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2114.
    return v7;
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecTbl {
        rd: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2121.
    return v6;
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecTblExt {
        rd: v4,
        ri: arg0,
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2127.
    return v7;
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecTbl2 {
        rd: v5,
        rn: arg0,
        rn2: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2134.
    return v8;
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecTbl2Ext {
        rd: v6,
        ri: arg0,
        rn: arg1,
        rn2: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2143.
    return v9;
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRRLong {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        high_half: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2152.
    return v8;
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecRRPairLong {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2159.
    return v6;
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRLongMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        high_half: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2166.
    return v9;
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRNarrowLow {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        lane_size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2173.
    return v7;
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRNarrowHigh {
        op: arg0.clone(),
        rd: v5,
        ri: arg1,
        rn: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2181.
    return v8;
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRLong {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        high_half: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2188.
    return v7;
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v5 = C::temp_writable_reg(ctx, F32);
            let v6 = MInst::FpuCSel32 {
                rd: v5,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v7 = C::writable_reg_to_reg(ctx, v5);
            let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v6,
                result: v7,
            };
            // Rule at src/isa/aarch64/inst.isle line 2196.
            return v8;
        }
        F64 => {
            let v10 = C::temp_writable_reg(ctx, F64);
            let v11 = MInst::FpuCSel64 {
                rd: v10,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v12 = C::writable_reg_to_reg(ctx, v10);
            let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v11,
                result: v12,
            };
            // Rule at src/isa/aarch64/inst.isle line 2202.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_csel", "src/isa/aarch64/inst.isle line 2195"
    )
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecCSel {
        rd: v4,
        rn: arg1,
        rm: arg2,
        cond: arg0.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2210.
    return v7;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(ctx: &mut C, arg0: &FpuRoundMode, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRound {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2218.
    return v6;
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v7 = C::fits_in_64(ctx, arg0);
    if let Some(v8) = v7 {
        let v10 = C::temp_writable_reg(ctx, F64);
        let v11 = MInst::FpuMove64 { rd: v10, rn: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/aarch64/inst.isle line 2229.
        return v13;
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMove128 { rd: v3, rn: arg1 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2225.
    return v6;
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::MovToFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2236.
    return v6;
}

// Generated as internal constructor for term fpu_move_fp_imm.
pub fn constructor_fpu_move_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMoveFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2243.
    return v6;
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::MovToVec {
        rd: v5,
        ri: arg0,
        rn: arg1,
        idx: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2250.
    return v8;
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecMovElement {
        rd: v6,
        ri: arg0,
        rn: arg1,
        dest_idx: arg2,
        src_idx: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2257.
    return v9;
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2264.
    return v7;
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::MovFromVecSigned {
        rd: v5,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
        scalar_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2271.
    return v8;
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::FpuMoveFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2277.
    return v7;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2284.
    return v8;
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F32X4);
    let v4 = MInst::FpuExtend {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2291.
    return v6;
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecExtend {
        t: arg0.clone(),
        rd: v5,
        rn: arg1,
        high_half: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2298.
    return v8;
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: u8) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecExtract {
        rd: v4,
        rn: arg0,
        rm: arg1,
        imm4: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2305.
    return v7;
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadAcquire {
        access_ty: arg0,
        rt: v4,
        rn: arg2,
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2312.
    return v7;
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreRelease {
        access_ty: arg0,
        rt: arg2,
        rn: arg3,
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2319.
    return v5;
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> ProducesFlags {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRImmLogic {
        alu_op: ALUOp::AndS,
        size: v4.clone(),
        rd: v5,
        rn: arg1,
        imml: arg2,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2327.
    return v7;
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSel {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2341.
    return v7;
}

// Generated as internal constructor for term cset.
pub fn constructor_cset<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2349.
    return v5;
}

// Generated as internal constructor for term cset_paired.
pub fn constructor_cset_paired<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2356.
    return v5;
}

// Generated as internal constructor for term csetm.
pub fn constructor_csetm<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSetm {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2362.
    return v5;
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSNeg {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2372.
    return v7;
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> ProducesFlags {
    let v6 = MInst::CCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    let v8 = &constructor_produces_flags_concat(ctx, arg5, &v7);
    // Rule at src/isa/aarch64/inst.isle line 2382.
    return v8.clone();
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: UImm5,
    arg3: NZCV,
    arg4: &Cond,
) -> ConsumesFlags {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    let v10 = C::value_reg(ctx, v9);
    let v7 = MInst::CCmpImm {
        size: arg0.clone(),
        rn: arg1,
        imm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v8 = MInst::CSet {
        rd: v6,
        cond: arg4.clone(),
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 2387.
    return v11;
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2397.
    return v4;
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2400.
    return v4;
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2403.
    return v4;
}

// Generated as internal constructor for term add_extend_op.
pub fn constructor_add_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Reg {
    let v5 = constructor_alu_rrr_extend(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2406.
    return v5;
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2409.
    return v5;
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2412.
    return v4;
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2417.
    return v4;
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2420.
    return v4;
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2423.
    return v4;
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Sub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2426.
    return v5;
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2429.
    return v4;
}

// Generated as internal constructor for term sub_i128.
pub fn constructor_sub_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::value_regs_get(ctx, arg1, 0x0);
    let v7 = C::value_regs_get(ctx, arg1, 0x1);
    let v9 = &constructor_sub_with_flags_paired(ctx, I64, v3, v6);
    let v10 = &constructor_sbc_paired(ctx, I64, v5, v7);
    let v11 = constructor_with_flags(ctx, v9, v10);
    // Rule at src/isa/aarch64/inst.isle line 2432.
    return v11;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MAdd, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2452.
    return v5;
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MSub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2457.
    return v5;
}

// Generated as internal constructor for term umaddl.
pub fn constructor_umaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::UMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2461.
    return v5;
}

// Generated as internal constructor for term smaddl.
pub fn constructor_smaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::SMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2465.
    return v5;
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2469.
    return v4;
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2473.
    return v4;
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2477.
    return v4;
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2481.
    return v4;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2485.
    return v4;
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2489.
    return v4;
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Mul, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2493.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Neg, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2497.
    return v3;
}

// Generated as internal constructor for term rev16.
pub fn constructor_rev16<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2501.
    return v3;
}

// Generated as internal constructor for term rev32.
pub fn constructor_rev32<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2505.
    return v3;
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2509.
    return v3;
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Xtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2513.
    return v3;
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Fcvtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2517.
    return v3;
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2521.
    return v3;
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2525.
    return v4;
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2529.
    return v3;
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2533.
    return v4;
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2537.
    return v3;
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2541.
    return v4;
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/aarch64/inst.isle line 2545.
    return v1;
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Csdb };
    // Rule at src/isa/aarch64/inst.isle line 2550.
    return v1;
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Brk };
    // Rule at src/isa/aarch64/inst.isle line 2555.
    return v1;
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Addp, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2560.
    return v4;
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2564.
    return v4;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Abs, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2568.
    return v3;
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Reg) -> Reg {
    let v3 = C::u8_into_imm12(ctx, 0x0);
    let v4 = &constructor_cmp_imm(ctx, arg0, arg1, v3);
    let v6 = &constructor_csneg(ctx, &Cond::Gt, arg1, arg1);
    let v7 = constructor_with_flags(ctx, v4, v6);
    let v9 = C::value_regs_get(ctx, v7, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 2573.
    return v9;
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_lanes(ctx, &VecLanesOp::Addv, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2579.
    return v3;
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(ctx: &mut C, arg0: Reg, arg1: bool) -> Reg {
    let v3 = constructor_vec_rr_long(ctx, &VecRRLongOp::Shll32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2583.
    return v3;
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2588.
    return v2;
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2591.
    return v2;
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2594.
    return v2;
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2597.
    return v2;
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = constructor_vec_rrrr_long(ctx, &VecRRRLongModOp::Umlal32, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2601.
    return v5;
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2605.
    return v4;
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2609.
    return v4;
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2613.
    return v4;
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2617.
    return v4;
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2621.
    return v4;
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2625.
    return v4;
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2629.
    return v4;
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2632.
    return v4;
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2636.
    return v4;
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2639.
    return v4;
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2643.
    return v4;
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2646.
    return v4;
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2650.
    return v4;
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2654.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Not, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2658.
    return v3;
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::OrrNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2663.
    return v4;
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::OrrNot, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2666.
    return v5;
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2671.
    return v4;
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2674.
    return v4;
}

// Generated as internal constructor for term orr_shift.
pub fn constructor_orr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Orr, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2677.
    return v5;
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2680.
    return v4;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2685.
    return v4;
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2688.
    return v4;
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2691.
    return v4;
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Eor, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2695.
    return v4;
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::AndNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2700.
    return v4;
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Bic, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2703.
    return v4;
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sshl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2707.
    return v4;
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Ushl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2711.
    return v4;
}

// Generated as internal constructor for term ushl_vec_imm.
pub fn constructor_ushl_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Shl, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2715.
    return v4;
}

// Generated as internal constructor for term ushr_vec_imm.
pub fn constructor_ushr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Ushr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2719.
    return v4;
}

// Generated as internal constructor for term sshr_vec_imm.
pub fn constructor_sshr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Sshr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2723.
    return v4;
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2728.
    return v4;
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2731.
    return v4;
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::RBit, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2736.
    return v3;
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Clz, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2741.
    return v3;
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Cls, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2746.
    return v3;
}

// Generated as internal constructor for term a64_rev16.
pub fn constructor_a64_rev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2751.
    return v3;
}

// Generated as internal constructor for term a64_rev32.
pub fn constructor_a64_rev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2754.
    return v3;
}

// Generated as internal constructor for term a64_rev64.
pub fn constructor_a64_rev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2757.
    return v3;
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::EorNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2762.
    return v4;
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cnt, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2767.
    return v3;
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_vector_size(ctx, arg0);
    let v6 = constructor_vec_rrr_mod(ctx, &VecALUModOp::Bsl, arg1, arg2, arg3, v5);
    // Rule at src/isa/aarch64/inst.isle line 2772.
    return v6;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 2778.
    return v2;
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2784.
    return v6;
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2789.
    return v6;
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2794.
    return v6;
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2799.
    return v6;
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2804.
    return v6;
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2809.
    return v6;
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2814.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2819.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2824.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64X2);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2829.
    return v6;
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> ValueRegs {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadP64 {
        rt: v3,
        rt2: v4,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = C::value_regs(ctx, v7, v8);
    // Rule at src/isa/aarch64/inst.isle line 2834.
    return v9;
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store8 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2843.
    return v4;
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2846.
    return v4;
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2849.
    return v4;
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2852.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2855.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2858.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore128 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2861.
    return v4;
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreP64 {
        rt: arg2,
        rt2: arg3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2864.
    return v5;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> InstOutput {
    let v3 = C::cond_br_cond(ctx, arg2);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = &constructor_with_flags_side_effect(ctx, arg0, &v5);
    let v7 = constructor_side_effect(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2870.
    return v7;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg {
    let v1 = C::integral_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ImmExtend::Zero = arg1 {
            let v5 = C::move_wide_const_from_u64(ctx, v2, arg2);
            if let Some(v6) = v5 {
                let v7 = &constructor_operand_size(ctx, v2);
                let v8 = constructor_movz(ctx, v6, v7);
                // Rule at src/isa/aarch64/inst.isle line 2898.
                return v8;
            }
            let v9 = C::ty_32_or_64(ctx, v2);
            if let Some(v10) = v9 {
                let v11 = C::move_wide_const_from_inverted_u64(ctx, v10, arg2);
                if let Some(v12) = v11 {
                    let v13 = &constructor_operand_size(ctx, v10);
                    let v14 = constructor_movn(ctx, v12, v13);
                    // Rule at src/isa/aarch64/inst.isle line 2901.
                    return v14;
                }
            }
            let v15 = C::imm_logic_from_u64(ctx, v2, arg2);
            if let Some(v16) = v15 {
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_orr_imm(ctx, v2, v17, v16);
                // Rule at src/isa/aarch64/inst.isle line 2907.
                return v18;
            }
        }
        let v19 = C::load_constant64_full(ctx, v2, arg1, arg2);
        // Rule at src/isa/aarch64/inst.isle line 2915.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/aarch64/inst.isle line 2894"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2926.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2927.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2922.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/aarch64/inst.isle line 2921"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2935.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2936.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2931.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/aarch64/inst.isle line 2930"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2940.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2944.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/aarch64/inst.isle line 2939"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2948.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2952.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/aarch64/inst.isle line 2947"
    )
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::cond_br_zero(ctx, arg0);
    let v2 = &C::trap_code_division_by_zero(ctx);
    let v3 = MInst::TrapIf {
        kind: v1,
        trap_code: v2.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/aarch64/inst.isle line 2957.
    return arg0;
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 2962.
        return OperandSize::Size32;
    }
    if arg0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2963.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "size_from_ty", "src/isa/aarch64/inst.isle line 2961"
    )
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v7 = C::u8_into_imm12(ctx, 0x1);
    let v8 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: v4.clone(),
        rd: v5,
        rn: arg2,
        imm12: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = &constructor_size_from_ty(ctx, arg0);
    let v11 = C::u8_into_uimm5(ctx, 0x1);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = MInst::CCmpImm {
        size: v10.clone(),
        rn: arg1,
        imm: v11,
        nzcv: v13,
        cond: Cond::Eq,
    };
    let v16 = C::emit(ctx, &v15);
    let v18 = C::cond_br_cond(ctx, &Cond::Vs);
    let v19 = &C::trap_code_integer_overflow(ctx);
    let v20 = MInst::TrapIf {
        kind: v18,
        trap_code: v19.clone(),
    };
    let v21 = C::emit(ctx, &v20);
    // Rule at src/isa/aarch64/inst.isle line 2969.
    return arg1;
}

// Generated as internal constructor for term trap_if_overflow.
pub fn constructor_trap_if_overflow<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
) -> Reg {
    let v3 = C::cond_br_cond(ctx, &Cond::Hs);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = constructor_with_flags_reg(ctx, arg0, &v5);
    // Rule at src/isa/aarch64/inst.isle line 2988.
    return v6;
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(ctx: &mut C, arg0: Inst) -> Reg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref v2,
        arg: v3,
        flags: v4,
    } = v1
    {
        if let &Opcode::AtomicLoad = v2 {
            let v5 = C::sink_inst(ctx, arg0);
            let v6 = C::put_in_reg(ctx, v3);
            // Rule at src/isa/aarch64/inst.isle line 2995.
            return v6;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_atomic_load", "src/isa/aarch64/inst.isle line 2994"
    )
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v15 = C::def_inst(ctx, arg2);
    if let Some(v16) = v15 {
        let v17 = &C::inst_data(ctx, v16);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v38,
                args: ref v39,
            } => {
                if let &Opcode::Ishl = v38 {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v43 = C::def_inst(ctx, v40.1);
                    if let Some(v44) = v43 {
                        let v45 = &C::inst_data(ctx, v44);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v46,
                            imm: v47,
                        } = v45
                        {
                            if let &Opcode::Iconst = v46 {
                                let v48 = C::lshl_from_imm64(ctx, arg1, v47);
                                if let Some(v49) = v48 {
                                    let v22 = C::put_in_reg(ctx, arg3);
                                    let v50 = C::put_in_reg(ctx, v40.0);
                                    let v51 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v22, v50, v49);
                                    // Rule at src/isa/aarch64/inst.isle line 3020.
                                    return v51;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } => {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::imm_logic_from_imm64(ctx, arg1, v19);
                    if let Some(v21) = v20 {
                        let v22 = C::put_in_reg(ctx, arg3);
                        let v23 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v22, v21);
                        // Rule at src/isa/aarch64/inst.isle line 3012.
                        return v23;
                    }
                }
            }
            _ => {}
        }
    }
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                if let &Opcode::Ishl = v24 {
                    let v26 = C::unpack_value_array_2(ctx, v25);
                    let v29 = C::def_inst(ctx, v26.1);
                    if let Some(v30) = v29 {
                        let v31 = &C::inst_data(ctx, v30);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v32,
                            imm: v33,
                        } = v31
                        {
                            if let &Opcode::Iconst = v32 {
                                let v34 = C::lshl_from_imm64(ctx, arg1, v33);
                                if let Some(v35) = v34 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v36 = C::put_in_reg(ctx, v26.0);
                                    let v37 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v36, v35);
                                    // Rule at src/isa/aarch64/inst.isle line 3017.
                                    return v37;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3009.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3005.
    return v6;
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v15,
                args: ref v16,
            } => {
                if let &Opcode::Ishl = v15 {
                    let v17 = C::unpack_value_array_2(ctx, v16);
                    let v20 = C::def_inst(ctx, v17.1);
                    if let Some(v21) = v20 {
                        let v22 = &C::inst_data(ctx, v21);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v23,
                            imm: v24,
                        } = v22
                        {
                            if let &Opcode::Iconst = v23 {
                                let v25 = C::lshl_from_imm64(ctx, arg1, v24);
                                if let Some(v26) = v25 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v27 = C::put_in_reg(ctx, v17.0);
                                    let v28 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v27, v26);
                                    // Rule at src/isa/aarch64/inst.isle line 3032.
                                    return v28;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3029.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3027.
    return v6;
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v4 = C::put_in_regs(ctx, arg2);
    let v6 = C::value_regs_get(ctx, v4, 0x0);
    let v8 = C::value_regs_get(ctx, v4, 0x1);
    let v9 = C::put_in_regs(ctx, arg3);
    let v10 = C::value_regs_get(ctx, v9, 0x0);
    let v11 = C::value_regs_get(ctx, v9, 0x1);
    let v12 = constructor_alu_rrr(ctx, arg0, arg1, v6, v10);
    let v13 = constructor_alu_rrr(ctx, arg0, arg1, v8, v11);
    let v14 = C::value_regs(ctx, v12, v13);
    // Rule at src/isa/aarch64/inst.isle line 3041.
    return v14;
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLoadReplicate {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        flags: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 3056.
    return v7;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: BoxExternalName, arg1: i64) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::LoadExtName {
        rd: v3,
        name: arg0,
        offset: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3063.
    return v6;
}

// Generated as internal constructor for term sink_load_into_addr.
pub fn constructor_sink_load_into_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: Inst) -> Reg {
    let v2 = &C::inst_data(ctx, arg1);
    if let &InstructionData::Load {
        opcode: ref v3,
        arg: v4,
        flags: v5,
        offset: v6,
    } = v2
    {
        if let &Opcode::Load = v3 {
            let v8 = C::sink_inst(ctx, arg1);
            let v9 = C::put_in_reg(ctx, v4);
            let v7 = C::offset32(ctx, v6);
            let v10 = C::u32_as_u64(ctx, v7);
            let v11 = constructor_add_imm_to_addr(ctx, v9, v10);
            // Rule at src/isa/aarch64/inst.isle line 3074.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load_into_addr", "src/isa/aarch64/inst.isle line 3073"
    )
}

// Generated as internal constructor for term add_imm_to_addr.
pub fn constructor_add_imm_to_addr<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    if arg1 == 0x0 {
        // Rule at src/isa/aarch64/inst.isle line 3079.
        return arg0;
    }
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_add_imm(ctx, I64, arg0, v3);
        // Rule at src/isa/aarch64/inst.isle line 3080.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg1);
    let v8 = constructor_add(ctx, I64, arg0, v7);
    // Rule at src/isa/aarch64/inst.isle line 3081.
    return v8;
}

// Generated as internal constructor for term constant_f32.
pub fn constructor_constant_f32<C: Context>(ctx: &mut C, arg0: u32) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3089.
        return v5;
    }
    let v6 = C::u32_as_u64(ctx, arg0);
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, v6, &ScalarSize::Size32);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size32);
        // Rule at src/isa/aarch64/inst.isle line 3093.
        return v9;
    }
    let v12 = constructor_imm(ctx, I32, &ImmExtend::Zero, v6);
    let v13 = constructor_mov_to_fpu(ctx, v12, &ScalarSize::Size32);
    // Rule at src/isa/aarch64/inst.isle line 3096.
    return v13;
}

// Generated as internal constructor for term constant_f64.
pub fn constructor_constant_f64<C: Context>(ctx: &mut C, arg0: u64) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3107.
        return v5;
    }
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, &ScalarSize::Size64);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3111.
        return v9;
    }
    let v10 = C::u64_as_u32(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = constructor_constant_f32(ctx, v11);
        // Rule at src/isa/aarch64/inst.isle line 3114.
        return v12;
    }
    let v13 = C::u64_low32_bits_unset(ctx, arg0);
    if let Some(v14) = v13 {
        let v17 = constructor_imm(ctx, I64, &ImmExtend::Zero, v14);
        let v18 = constructor_mov_to_fpu(ctx, v17, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3116.
        return v18;
    }
    let v19 = C::emit_u64_le_const(ctx, arg0);
    let v20 = AMode::Const { addr: v19 };
    let v21 = C::mem_flags_trusted(ctx);
    let v22 = constructor_fpu_load64(ctx, &v20, v21);
    // Rule at src/isa/aarch64/inst.isle line 3118.
    return v22;
}

// Generated as internal constructor for term constant_f128.
pub fn constructor_constant_f128<C: Context>(ctx: &mut C, arg0: u128) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size8);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size8x16);
        // Rule at src/isa/aarch64/inst.isle line 3127.
        return v5;
    }
    let v6 = C::u128_as_u64(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = constructor_constant_f64(ctx, v7);
        // Rule at src/isa/aarch64/inst.isle line 3133.
        return v8;
    }
    let v9 = C::u128_replicated_u64(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = constructor_splat_const(ctx, v10, &VectorSize::Size64x2);
        // Rule at src/isa/aarch64/inst.isle line 3137.
        return v12;
    }
    let v13 = C::emit_u128_le_const(ctx, arg0);
    let v14 = AMode::Const { addr: v13 };
    let v15 = C::mem_flags_trusted(ctx);
    let v16 = constructor_fpu_load128(ctx, &v14, v15);
    // Rule at src/isa/aarch64/inst.isle line 3141.
    return v16;
}

// Generated as internal constructor for term splat_const.
pub fn constructor_splat_const<C: Context>(ctx: &mut C, arg0: u64, arg1: &VectorSize) -> Reg {
    match arg1 {
        &VectorSize::Size16x4 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v17 = constructor_splat_const(ctx, v13, &VectorSize::Size8x8);
                // Rule at src/isa/aarch64/inst.isle line 3160.
                return v17;
            }
        }
        &VectorSize::Size16x8 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v15 = constructor_splat_const(ctx, v13, &VectorSize::Size8x16);
                // Rule at src/isa/aarch64/inst.isle line 3158.
                return v15;
            }
        }
        &VectorSize::Size32x2 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v11 = constructor_splat_const(ctx, v7, &VectorSize::Size16x4);
                // Rule at src/isa/aarch64/inst.isle line 3156.
                return v11;
            }
        }
        &VectorSize::Size32x4 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v9 = constructor_splat_const(ctx, v7, &VectorSize::Size16x8);
                // Rule at src/isa/aarch64/inst.isle line 3154.
                return v9;
            }
        }
        &VectorSize::Size64x2 => {
            let v1 = C::u64_replicated_u32(ctx, arg0);
            if let Some(v2) = v1 {
                let v5 = constructor_splat_const(ctx, v2, &VectorSize::Size32x4);
                // Rule at src/isa/aarch64/inst.isle line 3152.
                return v5;
            }
        }
        _ => {}
    }
    let v18 = &constructor_vector_lane_size(ctx, arg1);
    let v19 = C::asimd_mov_mod_imm_from_u64(ctx, arg0, v18);
    if let Some(v20) = v19 {
        let v22 = constructor_vec_dup_imm(ctx, v20, false, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3165.
        return v22;
    }
    let v23 = C::u64_not(ctx, arg0);
    let v24 = C::asimd_mov_mod_imm_from_u64(ctx, v23, v18);
    if let Some(v25) = v24 {
        let v27 = constructor_vec_dup_imm(ctx, v25, true, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3168.
        return v27;
    }
    match arg1 {
        &VectorSize::Size32x2 => {
            let v29 = C::u64_shl(ctx, arg0, 0x20);
            let v30 = C::u64_or(ctx, arg0, v29);
            let v32 = C::asimd_mov_mod_imm_from_u64(ctx, v30, &ScalarSize::Size64);
            if let Some(v33) = v32 {
                let v35 = constructor_vec_dup_imm(ctx, v33, false, &VectorSize::Size64x2);
                let v36 = constructor_fpu_extend(ctx, v35, &ScalarSize::Size64);
                // Rule at src/isa/aarch64/inst.isle line 3177.
                return v36;
            }
        }
        &VectorSize::Size32x4 => {
            let v29 = C::u64_shl(ctx, arg0, 0x20);
            let v30 = C::u64_or(ctx, arg0, v29);
            let v32 = C::asimd_mov_mod_imm_from_u64(ctx, v30, &ScalarSize::Size64);
            if let Some(v33) = v32 {
                let v35 = constructor_vec_dup_imm(ctx, v33, false, &VectorSize::Size64x2);
                // Rule at src/isa/aarch64/inst.isle line 3174.
                return v35;
            }
        }
        _ => {}
    }
    let v37 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, v18);
    if let Some(v38) = v37 {
        let v39 = constructor_vec_dup_fp_imm(ctx, v38, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3181.
        return v39;
    }
    let v42 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v43 = constructor_vec_dup(ctx, v42, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3187.
    return v43;
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3233.
    return v4;
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3238.
    return v4;
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Fcmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3243.
    return v3;
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3263.
    return v4;
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3268.
    return v4;
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3273.
    return v3;
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::temp_writable_reg(ctx, arg3);
    let v7 = MInst::AtomicRMW {
        op: arg0.clone(),
        rs: arg2,
        rt: v6,
        rn: v5,
        ty: arg3,
        flags: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3278.
    return v9;
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg3);
    let v6 = MInst::AtomicCAS {
        rd: v5,
        rs: arg1,
        rt: arg2,
        rn: arg0,
        ty: arg3,
        flags: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 3288.
    return v8;
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = C::temp_writable_reg(ctx, I64);
    let v9 = MInst::AtomicRMWLoop {
        ty: arg3,
        op: arg0.clone(),
        flags: arg4,
        addr: arg1,
        operand: arg2,
        oldval: v6,
        scratch1: v7,
        scratch2: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3302.
    return v11;
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = MInst::AtomicCASLoop {
        ty: arg3,
        flags: arg4,
        addr: arg0,
        expected: arg1,
        replacement: arg2,
        oldval: v6,
        scratch: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3316.
    return v10;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3324.
    return v5;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Reg,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg { rd: arg0, rm: arg1 };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/aarch64/inst.isle line 3330.
    return v3;
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_sp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3346.
    return v1;
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_fp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3350.
    return v1;
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preserve_frame_pointers(ctx);
    if let Some(v1) = v0 {
        let v2 = C::sign_return_address_disabled(ctx);
        if let Some(v3) = v2 {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v7 = AMode::FPOffset { off: 0x8, ty: I64 };
            let v8 = C::mem_flags_trusted(ctx);
            let v9 = MInst::ULoad64 {
                rd: v5,
                mem: v7,
                flags: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src/isa/aarch64/inst.isle line 3354.
            return v11;
        }
        let v12 = C::writable_link_reg(ctx);
        let v7 = AMode::FPOffset { off: 0x8, ty: I64 };
        let v8 = C::mem_flags_trusted(ctx);
        let v13 = MInst::ULoad64 {
            rd: v12,
            mem: v7,
            flags: v8,
        };
        let v14 = C::emit(ctx, &v13);
        let v16 = C::emit(ctx, &MInst::Xpaclri);
        let v17 = C::preg_link(ctx);
        let v18 = constructor_mov_from_preg(ctx, v17);
        // Rule at src/isa/aarch64/inst.isle line 3370.
        return v18;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_link", "src/isa/aarch64/inst.isle line 3353"
    )
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(ctx: &mut C, arg0: Type) -> u8 {
    match arg0 {
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 3386.
            return 0x1F;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 3385.
            return 0x3F;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max_shift", "src/isa/aarch64/inst.isle line 3384"
    )
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Type) -> Reg {
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::temp_writable_reg(ctx, F64);
        let v8 = constructor_max_shift(ctx, v4);
        let v7 = C::ty_bits(ctx, v4);
        let v9 = &C::fpu_op_ri_ushr(ctx, v7, v8);
        let v10 = constructor_fpu_rri(ctx, v9, arg1);
        let v11 = constructor_max_shift(ctx, v4);
        let v12 = &C::fpu_op_ri_sli(ctx, v7, v11);
        let v13 = MInst::FpuRRIMod {
            fpu_op: v12.clone(),
            rd: v6,
            ri: arg0,
            rn: v10,
        };
        let v14 = C::emit(ctx, &v13);
        let v15 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/aarch64/inst.isle line 3391.
        return v15;
    }
    let v16 = C::multi_lane(ctx, arg2);
    if let Some(v17) = v16 {
        let v21 = C::temp_writable_reg(ctx, I8X16);
        let v22 = C::lane_type(ctx, arg2);
        let v23 = constructor_max_shift(ctx, v22);
        let v24 = &constructor_vector_size(ctx, arg2);
        let v25 = constructor_ushr_vec_imm(ctx, arg1, v23, v24);
        let v27 = &constructor_vector_size(ctx, arg2);
        let v28 = constructor_max_shift(ctx, v22);
        let v29 = MInst::VecShiftImmMod {
            op: VecShiftImmModOp::Sli,
            rd: v21,
            ri: arg0,
            rn: v25,
            size: v27.clone(),
            imm: v28,
        };
        let v30 = C::emit(ctx, &v29);
        let v31 = C::writable_reg_to_reg(ctx, v21);
        // Rule at src/isa/aarch64/inst.isle line 3396.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcopy_sign", "src/isa/aarch64/inst.isle line 3390"
    )
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpu_cmp(ctx, arg0, arg1, arg1);
    let v4 = C::cond_br_cond(ctx, &Cond::Vs);
    let v5 = &C::trap_code_bad_conversion_to_integer(ctx);
    let v6 = MInst::TrapIf {
        kind: v4,
        trap_code: v5.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: arg1,
    };
    let v8 = constructor_with_flags(ctx, v2, &v7);
    let v10 = C::value_regs_get(ctx, v8, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3405.
    return v10;
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                F32 => {
                    let v3 = C::fits_in_16(ctx, arg2);
                    if let Some(v4) = v3 {
                        let v8 = &constructor_fpu_cmp(ctx, &ScalarSize::Size32, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v14 = constructor_with_flags(ctx, v8, &v13);
                        let v16 = C::value_regs_get(ctx, v14, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3418.
                        return v16;
                    }
                }
                F64 => {
                    let v17 = C::fits_in_32(ctx, arg2);
                    if let Some(v18) = v17 {
                        let v20 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v21 = constructor_with_flags(ctx, v20, &v13);
                        let v22 = C::value_regs_get(ctx, v21, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3426.
                        return v22;
                    }
                }
                _ => {}
            }
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v26 = C::cond_br_cond(ctx, &Cond::Lt);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v27 = MInst::TrapIf {
                kind: v26,
                trap_code: v11.clone(),
            };
            let v28 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v27,
                result: arg3,
            };
            let v29 = constructor_with_flags(ctx, v24, &v28);
            let v30 = C::value_regs_get(ctx, v29, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3434.
            return v30;
        }
        false => {
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v31 = C::cond_br_cond(ctx, &Cond::Le);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v32 = MInst::TrapIf {
                kind: v31,
                trap_code: v11.clone(),
            };
            let v33 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v32,
                result: arg3,
            };
            let v34 = constructor_with_flags(ctx, v24, &v33);
            let v35 = C::value_regs_get(ctx, v34, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3442.
            return v35;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_underflow_check", "src/isa/aarch64/inst.isle line 3417"
    )
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpu_cmp(ctx, arg0, arg1, arg2);
    let v5 = C::cond_br_cond(ctx, &Cond::Ge);
    let v6 = &C::trap_code_integer_overflow(ctx);
    let v7 = MInst::TrapIf {
        kind: v5,
        trap_code: v6.clone(),
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v7,
        result: arg1,
    };
    let v9 = constructor_with_flags(ctx, v3, &v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3452.
    return v11;
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = &constructor_scalar_size(ctx, arg3);
    let v8 = constructor_fpu_to_int_nan_check(ctx, v5, arg1);
    let v6 = C::ty_bits(ctx, arg3);
    let v7 = C::ty_bits(ctx, arg4);
    let v9 = C::min_fp_value(ctx, arg2, v6, v7);
    let v10 = constructor_fpu_to_int_underflow_check(ctx, arg2, arg3, arg4, v8, v9);
    let v11 = C::max_fp_value(ctx, arg2, v6, v7);
    let v12 = constructor_fpu_to_int_overflow_check(ctx, v5, v10, v11);
    let v13 = constructor_fpu_to_int(ctx, arg0, v12);
    // Rule at src/isa/aarch64/inst.isle line 3468.
    return v13;
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Reg {
    match arg3 {
        I32 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3487.
            return v4;
        }
        I64 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3485.
            return v4;
        }
        _ => {}
    }
    match arg2 {
        true => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v15 = constructor_signed_max(ctx, v6);
                let v16 = constructor_signed_min(ctx, v6);
                let v17 = &constructor_operand_size(ctx, v6);
                let v18 = &constructor_cmp(ctx, v17, v4, v15);
                let v20 = &constructor_csel(ctx, &Cond::Gt, v15, v4);
                let v21 = constructor_with_flags_reg(ctx, v18, v20);
                let v22 = &constructor_operand_size(ctx, v6);
                let v23 = &constructor_cmp(ctx, v22, v21, v16);
                let v25 = &constructor_csel(ctx, &Cond::Lt, v16, v21);
                let v26 = constructor_with_flags_reg(ctx, v23, v25);
                // Rule at src/isa/aarch64/inst.isle line 3495.
                return v26;
            }
        }
        false => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v8 = C::ty_mask(ctx, v6);
                let v9 = constructor_imm(ctx, v6, &ImmExtend::Zero, v8);
                let v11 = &constructor_cmp(ctx, &OperandSize::Size32, v4, v9);
                let v13 = &constructor_csel(ctx, &Cond::Hi, v9, v4);
                let v14 = constructor_with_flags_reg(ctx, v11, v13);
                // Rule at src/isa/aarch64/inst.isle line 3489.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_cvt_sat", "src/isa/aarch64/inst.isle line 3484"
    )
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x80);
            // Rule at src/isa/aarch64/inst.isle line 3508.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x8000);
            // Rule at src/isa/aarch64/inst.isle line 3509.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_min", "src/isa/aarch64/inst.isle line 3507"
    )
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x7F);
            // Rule at src/isa/aarch64/inst.isle line 3512.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x7FFF);
            // Rule at src/isa/aarch64/inst.isle line 3513.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_max", "src/isa/aarch64/inst.isle line 3511"
    )
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(ctx: &mut C, arg0: &FpuToIntOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::FpuToInt {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3516.
    return v6;
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(ctx: &mut C, arg0: &IntToFpuOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::IntToFpu {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3524.
    return v6;
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(ctx: &mut C, arg0: Reg) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3540.
    return v2.clone();
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3546.
    return v6;
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg0, arg2);
    let v5 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg1, arg1, arg2);
    let v7 = constructor_vec_rrr(ctx, &VecALUOp::And, v4, v5, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3554.
    return v7;
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Reg {
    match arg3 {
        &Cond::Eq => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3598.
                return v23;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3576.
                return v12;
            }
        }
        &Cond::Ne => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v24 = constructor_vec_misc(ctx, &VecMisc2::Not, v23, v9);
                // Rule at src/isa/aarch64/inst.isle line 3601.
                return v24;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v13 = constructor_vec_misc(ctx, &VecMisc2::Not, v12, v9);
                // Rule at src/isa/aarch64/inst.isle line 3579.
                return v13;
            }
        }
        &Cond::Hs => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v30 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3611.
                return v30;
            }
        }
        &Cond::Lo => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v36 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3627.
                return v36;
            }
        }
        &Cond::Mi => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v18 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3590.
                return v18;
            }
        }
        &Cond::Vs => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v10 = constructor_vec_misc(ctx, &VecMisc2::Not, v7, v9);
                // Rule at src/isa/aarch64/inst.isle line 3566.
                return v10;
            }
        }
        &Cond::Vc => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3563.
                return v7;
            }
        }
        &Cond::Hi => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v32 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3614.
                return v32;
            }
        }
        &Cond::Ls => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v35 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3624.
                return v35;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v19 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3593.
                return v19;
            }
        }
        &Cond::Ge => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v26 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3605.
                return v26;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v15 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3583.
                return v15;
            }
        }
        &Cond::Lt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v34 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3621.
                return v34;
            }
        }
        &Cond::Gt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v28 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3608.
                return v28;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v17 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3586.
                return v17;
            }
        }
        &Cond::Le => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v33 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3618.
                return v33;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmp", "src/isa/aarch64/inst.isle line 3560"
    )
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> ProducesFlags {
    let v2 = C::ty_vec128(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_vec_rrr(ctx, &VecALUOp::Umaxp, arg0, arg0, &VectorSize::Size32x4);
        let v9 = constructor_mov_from_vec(ctx, v6, 0x0, &ScalarSize::Size64);
        let v11 = C::u8_into_imm12(ctx, 0x0);
        let v12 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v9, v11);
        // Rule at src/isa/aarch64/inst.isle line 3639.
        return v12.clone();
    }
    let v13 = C::ty_vec64_ctor(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = constructor_mov_from_vec(ctx, arg0, 0x0, &ScalarSize::Size64);
        let v16 = C::u8_into_imm12(ctx, 0x0);
        let v17 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v15, v16);
        // Rule at src/isa/aarch64/inst.isle line 3643.
        return v17.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vanytrue", "src/isa/aarch64/inst.isle line 3638"
    )
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3652.
    return v5;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3658.
    return v5;
}

// Generated as internal constructor for term flags_and_cc.
pub fn constructor_flags_and_cc<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &IntCC,
) -> FlagsAndCC {
    let v2 = FlagsAndCC::FlagsAndCC {
        flags: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/aarch64/inst.isle line 3669.
    return v2;
}

// Generated as internal constructor for term flags_and_cc_to_bool.
pub fn constructor_flags_and_cc_to_bool<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ValueRegs {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cond_code(ctx, v2);
        let v4 = &constructor_materialize_bool_result(ctx, v3);
        let v5 = constructor_with_flags(ctx, v1, v4);
        // Rule at src/isa/aarch64/inst.isle line 3673.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_to_bool", "src/isa/aarch64/inst.isle line 3672"
    )
}

// Generated as internal constructor for term flags_and_cc_flags.
pub fn constructor_flags_and_cc_flags<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ProducesFlags {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3678.
        return v1.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_flags", "src/isa/aarch64/inst.isle line 3677"
    )
}

// Generated as internal constructor for term flags_and_cc_cc.
pub fn constructor_flags_and_cc_cc<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> IntCC {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3682.
        return v2.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_cc", "src/isa/aarch64/inst.isle line 3681"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::fits_in_16(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = &C::signed_cond_code(ctx, arg0);
        if let Some(v7) = v6 {
            let v8 = constructor_put_in_reg_sext32(ctx, arg1);
            let v9 = &constructor_operand_size(ctx, v5);
            let v10 = C::put_in_reg(ctx, arg2);
            let v12 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Sext);
            let v13 = &constructor_cmp_extend(ctx, v9, v8, v10, v12);
            let v14 = &constructor_flags_and_cc(ctx, v13, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3716.
            return v14.clone();
        }
    }
    if arg3 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v39 = &constructor_flags_and_cc(ctx, v37, &IntCC::Equal);
                // Rule at src/isa/aarch64/inst.isle line 3782.
                return v39.clone();
            }
            &IntCC::NotEqual => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v41 = &constructor_flags_and_cc(ctx, v37, &IntCC::NotEqual);
                // Rule at src/isa/aarch64/inst.isle line 3784.
                return v41.clone();
            }
            _ => {}
        }
    }
    if let Some(v5) = v4 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v21 = C::imm12_from_u64(ctx, v20);
                    if let Some(v22) = v21 {
                        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
                        let v9 = &constructor_operand_size(ctx, v5);
                        let v24 = &constructor_cmp_imm(ctx, v9, v23, v22);
                        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
                        // Rule at src/isa/aarch64/inst.isle line 3720.
                        return v25.clone();
                    }
                }
            }
        }
        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
        let v9 = &constructor_operand_size(ctx, v5);
        let v10 = C::put_in_reg(ctx, arg2);
        let v27 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Uext);
        let v28 = &constructor_cmp_extend(ctx, v9, v23, v10, v27);
        let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3723.
        return v29.clone();
    }
    let v30 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v31) = v30 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v32 = &constructor_lower_icmp_const(ctx, arg0, arg1, v20, arg3);
                    // Rule at src/isa/aarch64/inst.isle line 3726.
                    return v32.clone();
                }
            }
        }
        let v33 = &constructor_operand_size(ctx, arg3);
        let v34 = C::put_in_reg(ctx, arg1);
        let v10 = C::put_in_reg(ctx, arg2);
        let v35 = &constructor_cmp(ctx, v33, v34, v10);
        let v36 = &constructor_flags_and_cc(ctx, v35, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3729.
        return v36.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp", "src/isa/aarch64/inst.isle line 3687"
    )
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> ValueRegs {
    let v4 = C::multi_lane(ctx, arg3);
    if let Some(v5) = v4 {
        let v9 = &C::cond_code(ctx, arg0);
        let v10 = C::put_in_reg(ctx, arg1);
        let v11 = C::put_in_reg(ctx, arg2);
        let v12 = constructor_vec_cmp(ctx, v10, v11, arg3, v9);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/inst.isle line 3697.
        return v13;
    }
    if arg3 == I128 {
        if arg4 == I8 {
            match arg0 {
                &IntCC::Equal => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3759.
                    return v20;
                }
                &IntCC::NotEqual => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3763.
                    return v20;
                }
                _ => {}
            }
            let v21 = &C::intcc_unsigned(ctx, arg0);
            let v22 = &C::cond_code(ctx, v21);
            let v23 = &C::cond_code(ctx, arg0);
            let v24 = C::put_in_regs(ctx, arg1);
            let v25 = C::put_in_regs(ctx, arg2);
            let v27 = C::value_regs_get(ctx, v24, 0x0);
            let v29 = C::value_regs_get(ctx, v24, 0x1);
            let v30 = C::value_regs_get(ctx, v25, 0x0);
            let v31 = C::value_regs_get(ctx, v25, 0x1);
            let v33 = &constructor_cmp(ctx, &OperandSize::Size64, v27, v30);
            let v34 = &constructor_materialize_bool_result(ctx, v22);
            let v35 = constructor_with_flags_reg(ctx, v33, v34);
            let v36 = &constructor_cmp(ctx, &OperandSize::Size64, v29, v31);
            let v37 = &constructor_lower_icmp_i128_consumer(ctx, v23, v35);
            let v38 = constructor_with_flags(ctx, v36, v37);
            // Rule at src/isa/aarch64/inst.isle line 3792.
            return v38;
        }
    }
    let v14 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v15) = v14 {
        let v9 = &C::cond_code(ctx, arg0);
        let v16 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
        let v17 = constructor_flags_and_cc_to_bool(ctx, v16);
        // Rule at src/isa/aarch64/inst.isle line 3711.
        return v17;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_into_reg", "src/isa/aarch64/inst.isle line 3688"
    )
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    match arg0 {
        &IntCC::SignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3887.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v15 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v13);
                let v16 = &constructor_flags_and_cc(ctx, v15, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3866.
                return v16.clone();
            }
        }
        &IntCC::SignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3895.
                return v29.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v21 = &constructor_cmp(ctx, &OperandSize::Size64, v13, v9);
                let v22 = &constructor_flags_and_cc(ctx, v21, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3876.
                return v22.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3891.
                return v27.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v19 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v18);
                let v20 = &constructor_flags_and_cc(ctx, v19, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3871.
                return v20.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3899.
                return v29.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v23 = &constructor_cmp(ctx, &OperandSize::Size64, v18, v9);
                let v24 = &constructor_flags_and_cc(ctx, v23, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3881.
                return v24.clone();
            }
        }
        _ => {}
    }
    let v4 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 3693.
    return v4.clone();
}

// Generated as internal constructor for term lower_icmp_const.
pub fn constructor_lower_icmp_const<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: u64,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v5) = v4 {
        match arg0 {
            &IntCC::SignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v17 = &constructor_flags_and_cc(ctx, v13, &IntCC::SignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3744.
                        return v17.clone();
                    }
                }
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v15 = &constructor_flags_and_cc(ctx, v13, &IntCC::UnsignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3739.
                        return v15.clone();
                    }
                }
            }
            _ => {}
        }
        let v18 = C::imm12_from_u64(ctx, arg2);
        if let Some(v19) = v18 {
            let v11 = &constructor_operand_size(ctx, arg3);
            let v12 = C::put_in_reg(ctx, arg1);
            let v20 = &constructor_cmp_imm(ctx, v11, v12, v19);
            let v21 = &constructor_flags_and_cc(ctx, v20, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3750.
            return v21.clone();
        }
        let v11 = &constructor_operand_size(ctx, arg3);
        let v12 = C::put_in_reg(ctx, arg1);
        let v23 = constructor_imm(ctx, arg3, &ImmExtend::Zero, arg2);
        let v24 = &constructor_cmp(ctx, v11, v12, v23);
        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3753.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_const", "src/isa/aarch64/inst.isle line 3690"
    )
}

// Generated as internal constructor for term lower_extend_op.
pub fn constructor_lower_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ArgumentExtension,
) -> ExtendOp {
    match arg0 {
        I8 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 3707.
                    return ExtendOp::UXTB;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 3705.
                    return ExtendOp::SXTB;
                }
                _ => {}
            }
        }
        I16 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 3708.
                    return ExtendOp::UXTH;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 3706.
                    return ExtendOp::SXTH;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_extend_op", "src/isa/aarch64/inst.isle line 3704"
    )
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> ProducesFlags {
    let v2 = C::put_in_regs(ctx, arg0);
    let v3 = C::put_in_regs(ctx, arg1);
    let v5 = C::value_regs_get(ctx, v2, 0x0);
    let v7 = C::value_regs_get(ctx, v2, 0x1);
    let v8 = C::value_regs_get(ctx, v3, 0x0);
    let v9 = C::value_regs_get(ctx, v3, 0x1);
    let v11 = &constructor_cmp(ctx, &OperandSize::Size64, v5, v8);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = &constructor_ccmp(ctx, &OperandSize::Size64, v7, v9, v13, &Cond::Eq, v11);
    // Rule at src/isa/aarch64/inst.isle line 3771.
    return v15.clone();
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    let v10 = C::value_reg(ctx, v9);
    let v5 = MInst::CSet {
        rd: v3,
        cond: arg0.clone(),
    };
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = MInst::CSel {
        rd: v4,
        cond: Cond::Eq,
        rn: arg1,
        rm: v7,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v5,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 3807.
    return v11;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    let v27 = C::fits_in_16(ctx, arg1);
    if let Some(v28) = v27 {
        let v30 = C::ty_mask(ctx, v28);
        let v31 = C::imm_logic_from_u64(ctx, I32, v30);
        if let Some(v32) = v31 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v33 = constructor_and_imm(ctx, I32, v17, v32);
            let v34 = C::value_reg(ctx, v33);
            let v35 = constructor_lower_bmask(ctx, arg0, I32, v34);
            // Rule at src/isa/aarch64/inst.isle line 3856.
            return v35;
        }
    }
    if arg0 == I128 {
        let v24 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v25 = C::value_regs_get(ctx, v24, 0x0);
        let v26 = C::value_regs(ctx, v25, v25);
        // Rule at src/isa/aarch64/inst.isle line 3844.
        return v26;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v19 = C::value_regs_get(ctx, arg2, 0x1);
            let v21 = constructor_orr(ctx, I64, v17, v19);
            let v22 = C::value_reg(ctx, v21);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src/isa/aarch64/inst.isle line 3835.
            return v23;
        }
        let v4 = C::ty_32_or_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = &constructor_operand_size(ctx, v5);
            let v9 = C::value_regs_get(ctx, arg2, 0x0);
            let v11 = C::u8_into_imm12(ctx, 0x0);
            let v12 = &constructor_cmp_imm(ctx, v7, v9, v11);
            let v14 = &constructor_csetm(ctx, &Cond::Ne);
            let v15 = constructor_with_flags_reg(ctx, v12, v14);
            let v16 = C::value_reg(ctx, v15);
            // Rule at src/isa/aarch64/inst.isle line 3822.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/aarch64/inst.isle line 3815"
    )
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    if arg2 == I128 {
        let v21 = C::temp_writable_reg(ctx, I64);
        let v22 = C::temp_writable_reg(ctx, I64);
        let v23 = C::put_in_regs(ctx, arg3);
        let v24 = C::put_in_regs(ctx, arg4);
        let v26 = C::value_regs_get(ctx, v23, 0x0);
        let v28 = C::value_regs_get(ctx, v23, 0x1);
        let v29 = C::value_regs_get(ctx, v24, 0x0);
        let v30 = C::value_regs_get(ctx, v24, 0x1);
        let v33 = C::writable_reg_to_reg(ctx, v21);
        let v34 = C::writable_reg_to_reg(ctx, v22);
        let v35 = C::value_regs(ctx, v33, v34);
        let v31 = MInst::CSel {
            rd: v21,
            cond: arg1.clone(),
            rn: v26,
            rm: v29,
        };
        let v32 = MInst::CSel {
            rd: v22,
            cond: arg1.clone(),
            rn: v28,
            rm: v30,
        };
        let v36 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v31,
            inst2: v32,
            result: v35,
        };
        let v37 = constructor_with_flags(ctx, arg0, &v36);
        // Rule at src/isa/aarch64/inst.isle line 3913.
        return v37;
    }
    let v11 = C::ty_vec128(ctx, arg2);
    if let Some(v12) = v11 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v13 = &constructor_vec_csel(ctx, arg1, v7, v8);
        let v14 = constructor_with_flags(ctx, arg0, v13);
        // Rule at src/isa/aarch64/inst.isle line 3908.
        return v14;
    }
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_fpu_csel(ctx, v4, arg1, v7, v8);
        let v10 = constructor_with_flags(ctx, arg0, v9);
        // Rule at src/isa/aarch64/inst.isle line 3906.
        return v10;
    }
    let v38 = C::ty_int_ref_scalar_64(ctx, arg2);
    if let Some(v39) = v38 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v40 = &constructor_csel(ctx, arg1, v7, v8);
        let v41 = constructor_with_flags(ctx, arg0, v40);
        // Rule at src/isa/aarch64/inst.isle line 3927.
        return v41;
    }
    let v15 = C::ty_vec64_ctor(ctx, arg2);
    if let Some(v16) = v15 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v18 = &constructor_fpu_csel(ctx, F64, arg1, v7, v8);
        let v19 = constructor_with_flags(ctx, arg0, v18);
        // Rule at src/isa/aarch64/inst.isle line 3910.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select", "src/isa/aarch64/inst.isle line 3905"
    )
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(ctx: &mut C, arg0: BranchTarget) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 3933.
    return v2;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: BoxJTSequenceInfo,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::JTSequence {
        info: arg1,
        ridx: arg0,
        rtmp1: v3,
        rtmp2: v4,
    };
    let v6 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 3955.
    return v6;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        kind: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3963.
    return v4;
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(ctx: &mut C, arg0: Reg) -> ProducesFlags {
    let v1 = MInst::MovToNZCV { rn: arg0 };
    let v2 = ProducesFlags::ProducesFlagsSideEffect { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 3969.
    return v2;
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(ctx: &mut C, arg0: CodeOffset) -> SideEffectNoResult {
    let v1 = MInst::EmitIsland { needed_space: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 3975.
    return v2;
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: &VecMachLabel,
) -> Unit {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::targets_jt_info(ctx, arg2);
        let v7 = &constructor_cmp_imm(ctx, &OperandSize::Size32, arg1, v2);
        let v8 = &constructor_jt_sequence(ctx, arg1, v5);
        let v9 = &constructor_with_flags_side_effect(ctx, v7, v8);
        let v10 = constructor_emit_side_effect(ctx, v9);
        // Rule at src/isa/aarch64/inst.isle line 3981.
        return v10;
    }
    let v13 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v14 = C::targets_jt_info(ctx, arg2);
    let v15 = &constructor_cmp(ctx, &OperandSize::Size32, arg1, v13);
    let v16 = &constructor_jt_sequence(ctx, arg1, v14);
    let v17 = &constructor_with_flags_side_effect(ctx, v15, v16);
    let v18 = constructor_emit_side_effect(ctx, v17);
    // Rule at src/isa/aarch64/inst.isle line 3986.
    return v18;
}

// Generated as internal constructor for term vec_uzp1.
pub fn constructor_vec_uzp1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3995.
    return v4;
}

// Generated as internal constructor for term vec_uzp2.
pub fn constructor_vec_uzp2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3999.
    return v4;
}

// Generated as internal constructor for term vec_zip1.
pub fn constructor_vec_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4003.
    return v4;
}

// Generated as internal constructor for term vec_zip2.
pub fn constructor_vec_zip2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4007.
    return v4;
}

// Generated as internal constructor for term vec_trn1.
pub fn constructor_vec_trn1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4011.
    return v4;
}

// Generated as internal constructor for term vec_trn2.
pub fn constructor_vec_trn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4015.
    return v4;
}

// Generated as internal constructor for term vec_dup_fp_imm.
pub fn constructor_vec_dup_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &VectorSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDupFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4031.
    return v6;
}

// Generated as internal constructor for term fpu_load64.
pub fn constructor_fpu_load64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4038.
    return v6;
}

// Generated as internal constructor for term fpu_load128.
pub fn constructor_fpu_load128<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4045.
    return v6;
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I8X16);
    let v3 = MInst::FpuMove128 { rd: v2, rn: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst_neon.isle line 4.
    return v5;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1385,
            args: ref v1386,
            flags: v1387,
        } => {
            if let &Opcode::AtomicCas = v1385 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1291 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1292) = v1291 {
                        let v1312 = C::use_lse(ctx, arg0);
                        if let Some(v1313) = v1312 {
                            let v1388 = C::unpack_value_array_3(ctx, v1386);
                            let v1392 = C::put_in_reg(ctx, v1388.0);
                            let v1393 = C::put_in_reg(ctx, v1388.1);
                            let v1394 = C::put_in_reg(ctx, v1388.2);
                            let v1395 =
                                constructor_lse_atomic_cas(ctx, v1392, v1393, v1394, v1292, v1387);
                            let v1396 = constructor_output_reg(ctx, v1395);
                            // Rule at src/isa/aarch64/lower.isle line 2125.
                            return Some(v1396);
                        }
                        let v1388 = C::unpack_value_array_3(ctx, v1386);
                        let v1392 = C::put_in_reg(ctx, v1388.0);
                        let v1393 = C::put_in_reg(ctx, v1388.1);
                        let v1394 = C::put_in_reg(ctx, v1388.2);
                        let v1397 =
                            constructor_atomic_cas_loop(ctx, v1392, v1393, v1394, v1292, v1387);
                        let v1398 = constructor_output_reg(ctx, v1397);
                        // Rule at src/isa/aarch64/lower.isle line 2130.
                        return Some(v1398);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1314,
            args: ref v1315,
            flags: v1316,
            op: ref v1317,
        } => {
            if let &Opcode::AtomicRmw = v1314 {
                match v1317 {
                    &AtomicRmwOp::Add => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1323 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1318.0,
                                        v1322,
                                        v1292,
                                        v1316,
                                    );
                                    let v1324 = constructor_output_reg(ctx, v1323);
                                    // Rule at src/isa/aarch64/lower.isle line 2052.
                                    return Some(v1324);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1353 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Add,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1354 = constructor_output_reg(ctx, v1353);
                                // Rule at src/isa/aarch64/lower.isle line 2090.
                                return Some(v1354);
                            }
                        }
                    }
                    &AtomicRmwOp::And => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1217 = C::zero_reg(ctx);
                                    let v1348 = constructor_eon(ctx, v1292, v1322, v1217);
                                    let v1349 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Clr,
                                        v1318.0,
                                        v1348,
                                        v1292,
                                        v1316,
                                    );
                                    let v1350 = constructor_output_reg(ctx, v1349);
                                    // Rule at src/isa/aarch64/lower.isle line 2084.
                                    return Some(v1350);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1359 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::And,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1360 = constructor_output_reg(ctx, v1359);
                                // Rule at src/isa/aarch64/lower.isle line 2096.
                                return Some(v1360);
                            }
                        }
                    }
                    &AtomicRmwOp::Nand => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1362 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Nand,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1363 = constructor_output_reg(ctx, v1362);
                                // Rule at src/isa/aarch64/lower.isle line 2099.
                                return Some(v1363);
                            }
                        }
                    }
                    &AtomicRmwOp::Or => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1329 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Set,
                                        v1318.0,
                                        v1322,
                                        v1292,
                                        v1316,
                                    );
                                    let v1330 = constructor_output_reg(ctx, v1329);
                                    // Rule at src/isa/aarch64/lower.isle line 2060.
                                    return Some(v1330);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1365 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Orr,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1366 = constructor_output_reg(ctx, v1365);
                                // Rule at src/isa/aarch64/lower.isle line 2102.
                                return Some(v1366);
                            }
                        }
                    }
                    &AtomicRmwOp::Smax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1332 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smax,
                                        v1318.0,
                                        v1322,
                                        v1292,
                                        v1316,
                                    );
                                    let v1333 = constructor_output_reg(ctx, v1332);
                                    // Rule at src/isa/aarch64/lower.isle line 2064.
                                    return Some(v1333);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1374 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smax,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1375 = constructor_output_reg(ctx, v1374);
                                // Rule at src/isa/aarch64/lower.isle line 2111.
                                return Some(v1375);
                            }
                        }
                    }
                    &AtomicRmwOp::Smin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1335 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smin,
                                        v1318.0,
                                        v1322,
                                        v1292,
                                        v1316,
                                    );
                                    let v1336 = constructor_output_reg(ctx, v1335);
                                    // Rule at src/isa/aarch64/lower.isle line 2068.
                                    return Some(v1336);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1371 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smin,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1372 = constructor_output_reg(ctx, v1371);
                                // Rule at src/isa/aarch64/lower.isle line 2108.
                                return Some(v1372);
                            }
                        }
                    }
                    &AtomicRmwOp::Sub => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v586 = C::zero_reg(ctx);
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1343 = C::put_in_reg(ctx, v1318.1);
                                    let v1344 = constructor_sub(ctx, v1292, v586, v1343);
                                    let v1345 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1318.0,
                                        v1344,
                                        v1292,
                                        v1316,
                                    );
                                    let v1346 = constructor_output_reg(ctx, v1345);
                                    // Rule at src/isa/aarch64/lower.isle line 2080.
                                    return Some(v1346);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1356 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Sub,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1357 = constructor_output_reg(ctx, v1356);
                                // Rule at src/isa/aarch64/lower.isle line 2093.
                                return Some(v1357);
                            }
                        }
                    }
                    &AtomicRmwOp::Umax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1338 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umax,
                                        v1318.0,
                                        v1322,
                                        v1292,
                                        v1316,
                                    );
                                    let v1339 = constructor_output_reg(ctx, v1338);
                                    // Rule at src/isa/aarch64/lower.isle line 2072.
                                    return Some(v1339);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1380 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umax,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1381 = constructor_output_reg(ctx, v1380);
                                // Rule at src/isa/aarch64/lower.isle line 2117.
                                return Some(v1381);
                            }
                        }
                    }
                    &AtomicRmwOp::Umin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1341 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umin,
                                        v1318.0,
                                        v1322,
                                        v1292,
                                        v1316,
                                    );
                                    let v1342 = constructor_output_reg(ctx, v1341);
                                    // Rule at src/isa/aarch64/lower.isle line 2076.
                                    return Some(v1342);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1377 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umin,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1378 = constructor_output_reg(ctx, v1377);
                                // Rule at src/isa/aarch64/lower.isle line 2114.
                                return Some(v1378);
                            }
                        }
                    }
                    &AtomicRmwOp::Xchg => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1383 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Xchg,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1384 = constructor_output_reg(ctx, v1383);
                                // Rule at src/isa/aarch64/lower.isle line 2120.
                                return Some(v1384);
                            }
                        }
                    }
                    &AtomicRmwOp::Xor => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1291 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1292) = v1291 {
                                let v1312 = C::use_lse(ctx, arg0);
                                if let Some(v1313) = v1312 {
                                    let v1318 = C::unpack_value_array_2(ctx, v1315);
                                    let v1322 = C::put_in_reg(ctx, v1318.1);
                                    let v1326 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Eor,
                                        v1318.0,
                                        v1322,
                                        v1292,
                                        v1316,
                                    );
                                    let v1327 = constructor_output_reg(ctx, v1326);
                                    // Rule at src/isa/aarch64/lower.isle line 2056.
                                    return Some(v1327);
                                }
                                let v1318 = C::unpack_value_array_2(ctx, v1315);
                                let v1352 = C::put_in_reg(ctx, v1318.0);
                                let v1343 = C::put_in_reg(ctx, v1318.1);
                                let v1368 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Eor,
                                    v1352,
                                    v1343,
                                    v1292,
                                    v1316,
                                );
                                let v1369 = constructor_output_reg(ctx, v1368);
                                // Rule at src/isa/aarch64/lower.isle line 2105.
                                return Some(v1369);
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v29,
            args: ref v30,
        } => {
            match v29 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v228 = constructor_vec_tbl(ctx, v34, v35);
                        let v229 = constructor_output_reg(ctx, v228);
                        // Rule at src/isa/aarch64/lower.isle line 241.
                        return Some(v229);
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v680 = C::ty_int(ctx, v3);
                            if let Some(v681) = v680 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v686 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v687 = C::output(ctx, v686);
                                // Rule at src/isa/aarch64/lower.isle line 1076.
                                return Some(v687);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v700 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v56,
                                v325,
                                &VectorSize::Size64x2,
                            );
                            let v701 = C::put_in_reg(ctx, v31.0);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v702 = constructor_bsl(ctx, I64X2, v700, v701, v386);
                            let v703 = constructor_output_reg(ctx, v702);
                            // Rule at src/isa/aarch64/lower.isle line 1088.
                            return Some(v703);
                        }
                        let v693 = C::not_i64x2(ctx, v3);
                        if let Some(v694) = v693 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v696 = constructor_vec_rrr(ctx, &VecALUOp::Smin, v34, v35, v121);
                            let v697 = constructor_output_reg(ctx, v696);
                            // Rule at src/isa/aarch64/lower.isle line 1085.
                            return Some(v697);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v680 = C::ty_int(ctx, v3);
                            if let Some(v681) = v680 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v683 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lo,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v684 = C::output(ctx, v683);
                                // Rule at src/isa/aarch64/lower.isle line 1074.
                                return Some(v684);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v708 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v56,
                                v325,
                                &VectorSize::Size64x2,
                            );
                            let v701 = C::put_in_reg(ctx, v31.0);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v709 = constructor_bsl(ctx, I64X2, v708, v701, v386);
                            let v710 = constructor_output_reg(ctx, v709);
                            // Rule at src/isa/aarch64/lower.isle line 1094.
                            return Some(v710);
                        }
                        let v693 = C::not_i64x2(ctx, v3);
                        if let Some(v694) = v693 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v705 = constructor_vec_rrr(ctx, &VecALUOp::Umin, v34, v35, v121);
                            let v706 = constructor_output_reg(ctx, v705);
                            // Rule at src/isa/aarch64/lower.isle line 1091.
                            return Some(v706);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v680 = C::ty_int(ctx, v3);
                            if let Some(v681) = v680 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v691 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Gt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v692 = C::output(ctx, v691);
                                // Rule at src/isa/aarch64/lower.isle line 1080.
                                return Some(v692);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v714 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v701 = C::put_in_reg(ctx, v31.0);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v715 = constructor_bsl(ctx, I64X2, v714, v701, v386);
                            let v716 = constructor_output_reg(ctx, v715);
                            // Rule at src/isa/aarch64/lower.isle line 1100.
                            return Some(v716);
                        }
                        let v693 = C::not_i64x2(ctx, v3);
                        if let Some(v694) = v693 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v712 = constructor_vec_rrr(ctx, &VecALUOp::Smax, v34, v35, v121);
                            let v713 = constructor_output_reg(ctx, v712);
                            // Rule at src/isa/aarch64/lower.isle line 1097.
                            return Some(v713);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v680 = C::ty_int(ctx, v3);
                            if let Some(v681) = v680 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v689 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Hi,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v690 = C::output(ctx, v689);
                                // Rule at src/isa/aarch64/lower.isle line 1078.
                                return Some(v690);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v720 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v701 = C::put_in_reg(ctx, v31.0);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v721 = constructor_bsl(ctx, I64X2, v720, v701, v386);
                            let v722 = constructor_output_reg(ctx, v721);
                            // Rule at src/isa/aarch64/lower.isle line 1106.
                            return Some(v722);
                        }
                        let v693 = C::not_i64x2(ctx, v3);
                        if let Some(v694) = v693 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v718 = constructor_vec_rrr(ctx, &VecALUOp::Umax, v34, v35, v121);
                            let v719 = constructor_output_reg(ctx, v718);
                            // Rule at src/isa/aarch64/lower.isle line 1103.
                            return Some(v719);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v324 = constructor_splat_const(ctx, 0x1, &VectorSize::Size64x2);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v112 = C::put_in_reg(ctx, v31.1);
                            let v326 = constructor_orr_vec(ctx, v325, v112, &VectorSize::Size64x2);
                            let v327 = constructor_and_vec(ctx, v326, v324, &VectorSize::Size64x2);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v330 =
                                constructor_ushr_vec_imm(ctx, v328, 0x1, &VectorSize::Size64x2);
                            let v331 = C::put_in_reg(ctx, v31.1);
                            let v332 =
                                constructor_ushr_vec_imm(ctx, v331, 0x1, &VectorSize::Size64x2);
                            let v333 = constructor_add_vec(ctx, v330, v332, &VectorSize::Size64x2);
                            let v334 = constructor_add_vec(ctx, v327, v333, &VectorSize::Size64x2);
                            let v335 = constructor_output_reg(ctx, v334);
                            // Rule at src/isa/aarch64/lower.isle line 353.
                            return Some(v335);
                        }
                        let v336 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v337) = v336 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v339 = &constructor_vector_size(ctx, v337);
                            let v340 = constructor_vec_rrr(ctx, &VecALUOp::Urhadd, v34, v35, v339);
                            let v341 = constructor_output_reg(ctx, v340);
                            // Rule at src/isa/aarch64/lower.isle line 362.
                            return Some(v341);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v577 = &constructor_vector_size(ctx, v576);
                            let v578 = constructor_uqadd(ctx, v34, v35, v577);
                            let v579 = constructor_output_reg(ctx, v578);
                            // Rule at src/isa/aarch64/lower.isle line 726.
                            return Some(v579);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v577 = &constructor_vector_size(ctx, v576);
                            let v580 = constructor_sqadd(ctx, v34, v35, v577);
                            let v581 = constructor_output_reg(ctx, v580);
                            // Rule at src/isa/aarch64/lower.isle line 731.
                            return Some(v581);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v577 = &constructor_vector_size(ctx, v576);
                            let v582 = constructor_uqsub(ctx, v34, v35, v577);
                            let v583 = constructor_output_reg(ctx, v582);
                            // Rule at src/isa/aarch64/lower.isle line 736.
                            return Some(v583);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v577 = &constructor_vector_size(ctx, v576);
                            let v584 = constructor_sqsub(ctx, v34, v35, v577);
                            let v585 = constructor_output_reg(ctx, v584);
                            // Rule at src/isa/aarch64/lower.isle line 741.
                            return Some(v585);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    match v75 {
                                        &Opcode::Imul => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v108 = constructor_madd(ctx, v28, v105, v106, v107);
                                            let v109 = constructor_output_reg(ctx, v108);
                                            // Rule at src/isa/aarch64/lower.isle line 88.
                                            return Some(v109);
                                        }
                                        &Opcode::Ishl => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v80 = C::def_inst(ctx, v77.1);
                                            if let Some(v81) = v80 {
                                                let v82 = &C::inst_data(ctx, v81);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v83,
                                                    imm: v84,
                                                } = v82
                                                {
                                                    if let &Opcode::Iconst = v83 {
                                                        let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                        if let Some(v86) = v85 {
                                                            let v34 = C::put_in_reg(ctx, v31.0);
                                                            let v87 = C::put_in_reg(ctx, v77.0);
                                                            let v88 = constructor_add_shift(
                                                                ctx, v28, v34, v87, v86,
                                                            );
                                                            let v89 =
                                                                constructor_output_reg(ctx, v88);
                                                            // Rule at src/isa/aarch64/lower.isle line 77.
                                                            return Some(v89);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                match v50 {
                                    &InstructionData::Binary {
                                        opcode: ref v90,
                                        args: ref v91,
                                    } => {
                                        match v90 {
                                            &Opcode::Imul => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v110 = C::put_in_reg(ctx, v92.0);
                                                let v111 = C::put_in_reg(ctx, v92.1);
                                                let v112 = C::put_in_reg(ctx, v31.1);
                                                let v113 =
                                                    constructor_madd(ctx, v28, v110, v111, v112);
                                                let v114 = constructor_output_reg(ctx, v113);
                                                // Rule at src/isa/aarch64/lower.isle line 91.
                                                return Some(v114);
                                            }
                                            &Opcode::Ishl => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v95 = C::def_inst(ctx, v92.1);
                                                if let Some(v96) = v95 {
                                                    let v97 = &C::inst_data(ctx, v96);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v98,
                                                        imm: v99,
                                                    } = v97
                                                    {
                                                        if let &Opcode::Iconst = v98 {
                                                            let v100 =
                                                                C::lshl_from_imm64(ctx, v28, v99);
                                                            if let Some(v101) = v100 {
                                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                                let v102 =
                                                                    C::put_in_reg(ctx, v92.0);
                                                                let v103 = constructor_add_shift(
                                                                    ctx, v28, v56, v102, v101,
                                                                );
                                                                let v104 = constructor_output_reg(
                                                                    ctx, v103,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 82.
                                                                return Some(v104);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v51,
                                        imm: v52,
                                    } => {
                                        if let &Opcode::Iconst = v51 {
                                            let v53 = C::u64_from_imm64(ctx, v52);
                                            let v54 = C::imm12_from_u64(ctx, v53);
                                            if let Some(v55) = v54 {
                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                let v57 = constructor_add_imm(ctx, v28, v56, v55);
                                                let v58 = constructor_output_reg(ctx, v57);
                                                // Rule at src/isa/aarch64/lower.isle line 54.
                                                return Some(v58);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v44 = C::imm12_from_u64(ctx, v43);
                                        if let Some(v45) = v44 {
                                            let v34 = C::put_in_reg(ctx, v31.0);
                                            let v46 = constructor_add_imm(ctx, v28, v34, v45);
                                            let v47 = constructor_output_reg(ctx, v46);
                                            // Rule at src/isa/aarch64/lower.isle line 51.
                                            return Some(v47);
                                        }
                                    }
                                }
                            }
                            let v63 = constructor_imm12_from_negated_value(ctx, v31.0);
                            if let Some(v64) = v63 {
                                let v56 = C::put_in_reg(ctx, v31.1);
                                let v65 = constructor_sub_imm(ctx, v28, v56, v64);
                                let v66 = constructor_output_reg(ctx, v65);
                                // Rule at src/isa/aarch64/lower.isle line 63.
                                return Some(v66);
                            }
                            let v59 = constructor_imm12_from_negated_value(ctx, v31.1);
                            if let Some(v60) = v59 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v61 = constructor_sub_imm(ctx, v28, v34, v60);
                                let v62 = constructor_output_reg(ctx, v61);
                                // Rule at src/isa/aarch64/lower.isle line 59.
                                return Some(v62);
                            }
                            let v71 = &C::extended_value_from_value(ctx, v31.0);
                            if let Some(v72) = v71 {
                                let v56 = C::put_in_reg(ctx, v31.1);
                                let v73 = constructor_add_extend(ctx, v28, v56, v72);
                                let v74 = constructor_output_reg(ctx, v73);
                                // Rule at src/isa/aarch64/lower.isle line 72.
                                return Some(v74);
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v69 = constructor_add_extend(ctx, v28, v34, v68);
                                let v70 = constructor_output_reg(ctx, v69);
                                // Rule at src/isa/aarch64/lower.isle line 69.
                                return Some(v70);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v36 = constructor_add(ctx, v28, v34, v35);
                            let v37 = constructor_output_reg(ctx, v36);
                            // Rule at src/isa/aarch64/lower.isle line 47.
                            return Some(v37);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v123 = constructor_output_reg(ctx, v122);
                            // Rule at src/isa/aarch64/lower.isle line 100.
                            return Some(v123);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v126 = C::value_regs_get(ctx, v124, 0x0);
                            let v128 = C::value_regs_get(ctx, v124, 0x1);
                            let v129 = C::put_in_regs(ctx, v31.1);
                            let v130 = C::value_regs_get(ctx, v129, 0x0);
                            let v131 = C::value_regs_get(ctx, v129, 0x1);
                            let v133 = &constructor_add_with_flags_paired(ctx, I64, v126, v130);
                            let v134 = &constructor_adc_paired(ctx, I64, v128, v131);
                            let v135 = constructor_with_flags(ctx, v133, v134);
                            let v136 = C::output(ctx, v135);
                            // Rule at src/isa/aarch64/lower.isle line 104.
                            return Some(v136);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v1811 = C::value_reg(ctx, v122);
                            let v1812 = C::output(ctx, v1811);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 3.
                            return Some(v1812);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v59 = constructor_imm12_from_negated_value(ctx, v31.1);
                            if let Some(v60) = v59 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v564 = constructor_add_imm(ctx, v28, v34, v60);
                                let v565 = constructor_output_reg(ctx, v564);
                                // Rule at src/isa/aarch64/lower.isle line 700.
                                return Some(v565);
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v566 = constructor_sub_extend(ctx, v28, v34, v68);
                                let v567 = constructor_output_reg(ctx, v566);
                                // Rule at src/isa/aarch64/lower.isle line 706.
                                return Some(v567);
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                match v40 {
                                    &InstructionData::Binary {
                                        opcode: ref v75,
                                        args: ref v76,
                                    } => {
                                        if let &Opcode::Imul = v75 {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v115 = constructor_msub(ctx, v28, v105, v106, v107);
                                            let v116 = constructor_output_reg(ctx, v115);
                                            // Rule at src/isa/aarch64/lower.isle line 95.
                                            return Some(v116);
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } => {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v562 = constructor_sub_imm(ctx, v28, v34, v45);
                                                let v563 = constructor_output_reg(ctx, v562);
                                                // Rule at src/isa/aarch64/lower.isle line 695.
                                                return Some(v563);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v572 = C::put_in_regs(ctx, v31.1);
                            let v573 = constructor_sub_i128(ctx, v124, v572);
                            let v574 = C::output(ctx, v573);
                            // Rule at src/isa/aarch64/lower.isle line 721.
                            return Some(v574);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v570 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v571 = constructor_output_reg(ctx, v570);
                            // Rule at src/isa/aarch64/lower.isle line 717.
                            return Some(v571);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    if let &Opcode::Ishl = v75 {
                                        let v77 = C::unpack_value_array_2(ctx, v76);
                                        let v80 = C::def_inst(ctx, v77.1);
                                        if let Some(v81) = v80 {
                                            let v82 = &C::inst_data(ctx, v81);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v83,
                                                imm: v84,
                                            } = v82
                                            {
                                                if let &Opcode::Iconst = v83 {
                                                    let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                    if let Some(v86) = v85 {
                                                        let v34 = C::put_in_reg(ctx, v31.0);
                                                        let v87 = C::put_in_reg(ctx, v77.0);
                                                        let v568 = constructor_sub_shift(
                                                            ctx, v28, v34, v87, v86,
                                                        );
                                                        let v569 =
                                                            constructor_output_reg(ctx, v568);
                                                        // Rule at src/isa/aarch64/lower.isle line 711.
                                                        return Some(v569);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v560 = constructor_sub(ctx, v28, v34, v35);
                            let v561 = constructor_output_reg(ctx, v560);
                            // Rule at src/isa/aarch64/lower.isle line 691.
                            return Some(v561);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v570 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v1813 = C::value_reg(ctx, v570);
                            let v1814 = C::output(ctx, v1813);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 7.
                            return Some(v1814);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v126 = C::value_regs_get(ctx, v124, 0x0);
                                let v128 = C::value_regs_get(ctx, v124, 0x1);
                                let v129 = C::put_in_regs(ctx, v31.1);
                                let v130 = C::value_regs_get(ctx, v129, 0x0);
                                let v131 = C::value_regs_get(ctx, v129, 0x1);
                                let v599 = constructor_umulh(ctx, I64, v126, v130);
                                let v600 = constructor_madd(ctx, I64, v126, v131, v599);
                                let v601 = constructor_madd(ctx, I64, v128, v130, v600);
                                let v602 = C::zero_reg(ctx);
                                let v603 = constructor_madd(ctx, I64, v126, v130, v602);
                                let v604 = C::value_regs(ctx, v603, v601);
                                let v605 = C::output(ctx, v604);
                                // Rule at src/isa/aarch64/lower.isle line 765.
                                return Some(v605);
                            }
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I8X16 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v621 = constructor_smull8(
                                                                        ctx, v302, v620, false,
                                                                    );
                                                                    let v622 =
                                                                        constructor_output_reg(
                                                                            ctx, v621,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 864.
                                                                    return Some(v622);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I8X16 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v623 = constructor_smull8(
                                                                        ctx, v302, v620, true,
                                                                    );
                                                                    let v624 =
                                                                        constructor_output_reg(
                                                                            ctx, v623,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 870.
                                                                    return Some(v624);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I8X16 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v625 = constructor_umull8(
                                                                        ctx, v302, v620, false,
                                                                    );
                                                                    let v626 =
                                                                        constructor_output_reg(
                                                                            ctx, v625,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 876.
                                                                    return Some(v626);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I8X16 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v627 = constructor_umull8(
                                                                        ctx, v302, v620, true,
                                                                    );
                                                                    let v628 =
                                                                        constructor_output_reg(
                                                                            ctx, v627,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 882.
                                                                    return Some(v628);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I16X8 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v629 = constructor_smull16(
                                                                        ctx, v302, v620, false,
                                                                    );
                                                                    let v630 =
                                                                        constructor_output_reg(
                                                                            ctx, v629,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 888.
                                                                    return Some(v630);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I16X8 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v631 = constructor_smull16(
                                                                        ctx, v302, v620, true,
                                                                    );
                                                                    let v632 =
                                                                        constructor_output_reg(
                                                                            ctx, v631,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 894.
                                                                    return Some(v632);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I16X8 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v633 = constructor_umull16(
                                                                        ctx, v302, v620, false,
                                                                    );
                                                                    let v634 =
                                                                        constructor_output_reg(
                                                                            ctx, v633,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 900.
                                                                    return Some(v634);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I16X8 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v635 = constructor_umull16(
                                                                        ctx, v302, v620, true,
                                                                    );
                                                                    let v636 =
                                                                        constructor_output_reg(
                                                                            ctx, v635,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 906.
                                                                    return Some(v636);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I32X4 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v637 = constructor_smull32(
                                                                        ctx, v302, v620, false,
                                                                    );
                                                                    let v638 =
                                                                        constructor_output_reg(
                                                                            ctx, v637,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 912.
                                                                    return Some(v638);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I32X4 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v639 = constructor_smull32(
                                                                        ctx, v302, v620, true,
                                                                    );
                                                                    let v640 =
                                                                        constructor_output_reg(
                                                                            ctx, v639,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 918.
                                                                    return Some(v640);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I32X4 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v641 = constructor_umull32(
                                                                        ctx, v302, v620, false,
                                                                    );
                                                                    let v642 =
                                                                        constructor_output_reg(
                                                                            ctx, v641,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 924.
                                                                    return Some(v642);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v618 = C::value_type(ctx, v299);
                                                            if v618 == I32X4 {
                                                                let v619 = C::value_type(ctx, v301);
                                                                if v619 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v620 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v643 = constructor_umull32(
                                                                        ctx, v302, v620, true,
                                                                    );
                                                                    let v644 =
                                                                        constructor_output_reg(
                                                                            ctx, v643,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 930.
                                                                    return Some(v644);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v610 = constructor_rev64(ctx, v35, &VectorSize::Size32x4);
                                let v611 = constructor_mul(ctx, v610, v34, &VectorSize::Size32x4);
                                let v612 = constructor_xtn(ctx, v34, &ScalarSize::Size32);
                                let v613 = constructor_addp(ctx, v611, v611, &VectorSize::Size32x4);
                                let v614 = constructor_xtn(ctx, v35, &ScalarSize::Size32);
                                let v615 = constructor_shll32(ctx, v613, false);
                                let v616 = constructor_umlal32(ctx, v615, v614, v612, false);
                                let v617 = constructor_output_reg(ctx, v616);
                                // Rule at src/isa/aarch64/lower.isle line 825.
                                return Some(v617);
                            }
                            _ => {}
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v606 = C::not_i64x2(ctx, v576);
                            if let Some(v607) = v606 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v577 = &constructor_vector_size(ctx, v576);
                                let v608 = constructor_mul(ctx, v34, v35, v577);
                                let v609 = constructor_output_reg(ctx, v608);
                                // Rule at src/isa/aarch64/lower.isle line 793.
                                return Some(v609);
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v597 = constructor_madd(ctx, v28, v34, v35, v269);
                            let v598 = constructor_output_reg(ctx, v597);
                            // Rule at src/isa/aarch64/lower.isle line 761.
                            return Some(v598);
                        }
                        let v336 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v337) = v336 {
                            let v1815 = C::dynamic_lane(ctx, v337);
                            if let Some(v1816) = v1815 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v339 = &constructor_vector_size(ctx, v337);
                                let v1820 =
                                    constructor_vec_rrr(ctx, &VecALUOp::Mul, v34, v35, v339);
                                let v1821 = C::value_reg(ctx, v1820);
                                let v1822 = C::output(ctx, v1821);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 11.
                                return Some(v1822);
                            }
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v654 = constructor_umulh(ctx, I64, v34, v35);
                            let v655 = constructor_output_reg(ctx, v654);
                            // Rule at src/isa/aarch64/lower.isle line 949.
                            return Some(v655);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v656 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v657 = constructor_put_in_reg_zext64(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v658 = constructor_madd(ctx, I64, v656, v657, v269);
                            let v650 = C::ty_bits(ctx, v319);
                            let v651 = C::imm_shift_from_u8(ctx, v650);
                            let v659 = constructor_lsr_imm(ctx, I64, v658, v651);
                            let v660 = C::value_reg(ctx, v659);
                            let v661 = C::output(ctx, v660);
                            // Rule at src/isa/aarch64/lower.isle line 952.
                            return Some(v661);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v645 = constructor_smulh(ctx, I64, v34, v35);
                            let v646 = constructor_output_reg(ctx, v645);
                            // Rule at src/isa/aarch64/lower.isle line 937.
                            return Some(v646);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v647 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v648 = constructor_put_in_reg_sext64(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v649 = constructor_madd(ctx, I64, v647, v648, v269);
                            let v650 = C::ty_bits(ctx, v319);
                            let v651 = C::imm_shift_from_u8(ctx, v650);
                            let v652 = constructor_asr_imm(ctx, I64, v649, v651);
                            let v653 = constructor_output_reg(ctx, v652);
                            // Rule at src/isa/aarch64/lower.isle line 940.
                            return Some(v653);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v343 =
                                constructor_vec_rrr(ctx, &VecALUOp::Sqrdmulh, v34, v35, v121);
                            let v344 = constructor_output_reg(ctx, v343);
                            // Rule at src/isa/aarch64/lower.isle line 367.
                            return Some(v344);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v656 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v662 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v663 = constructor_a64_udiv(ctx, I64, v656, v662);
                            let v664 = constructor_output_reg(ctx, v663);
                            // Rule at src/isa/aarch64/lower.isle line 968.
                            return Some(v664);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v669 = C::safe_divisor_from_imm64(ctx, v28, v42);
                                        if let Some(v670) = v669 {
                                            let v647 = constructor_put_in_reg_sext64(ctx, v31.0);
                                            let v672 =
                                                constructor_imm(ctx, v28, &ImmExtend::Sign, v670);
                                            let v673 = constructor_a64_sdiv(ctx, I64, v647, v672);
                                            let v674 = constructor_output_reg(ctx, v673);
                                            // Rule at src/isa/aarch64/lower.isle line 1010.
                                            return Some(v674);
                                        }
                                    }
                                }
                            }
                            let v647 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v665 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v666 = constructor_trap_if_div_overflow(ctx, v28, v647, v665);
                            let v667 = constructor_a64_sdiv(ctx, I64, v666, v665);
                            let v668 = constructor_output_reg(ctx, v667);
                            // Rule at src/isa/aarch64/lower.isle line 1001.
                            return Some(v668);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v656 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v662 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v663 = constructor_a64_udiv(ctx, I64, v656, v662);
                            let v675 = constructor_msub(ctx, I64, v663, v662, v656);
                            let v676 = constructor_output_reg(ctx, v675);
                            // Rule at src/isa/aarch64/lower.isle line 1039.
                            return Some(v676);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v647 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v665 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v677 = constructor_a64_sdiv(ctx, I64, v647, v665);
                            let v678 = constructor_msub(ctx, I64, v677, v665, v647);
                            let v679 = constructor_output_reg(ctx, v678);
                            // Rule at src/isa/aarch64/lower.isle line 1046.
                            return Some(v679);
                        }
                    }
                }
                &Opcode::UaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1726 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1727) = v1726 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1730 = constructor_overflow_op_normal(
                                ctx,
                                v1727,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &Cond::Hs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2671.
                            return Some(v1730);
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1725 = constructor_overflow_op_small(
                                ctx,
                                v910,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Add,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2667.
                            return Some(v1725);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1732 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Hs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2675.
                            return Some(v1732);
                        }
                    }
                }
                &Opcode::SaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1726 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1727) = v1726 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1736 = constructor_overflow_op_normal(
                                ctx,
                                v1727,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2689.
                            return Some(v1736);
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1734 = constructor_overflow_op_small(
                                ctx,
                                v910,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Add,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2684.
                            return Some(v1734);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1737 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2695.
                            return Some(v1737);
                        }
                    }
                }
                &Opcode::UsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1726 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1727) = v1726 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1741 = constructor_overflow_op_normal(
                                ctx,
                                v1727,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &Cond::Lo,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2709.
                            return Some(v1741);
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1739 = constructor_overflow_op_small(
                                ctx,
                                v910,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Sub,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2704.
                            return Some(v1739);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1743 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Lo,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2715.
                            return Some(v1743);
                        }
                    }
                }
                &Opcode::SsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1726 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1727) = v1726 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1745 = constructor_overflow_op_normal(
                                ctx,
                                v1727,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2729.
                            return Some(v1745);
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1744 = constructor_overflow_op_small(
                                ctx,
                                v910,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Sub,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2724.
                            return Some(v1744);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1746 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2735.
                            return Some(v1746);
                        }
                    }
                }
                &Opcode::UmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1757 = constructor_umaddl(ctx, v34, v35, v269);
                                let v1759 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1757,
                                    v1757,
                                    &ExtendOp::UXTW,
                                );
                                let v1760 = &constructor_cset(ctx, &Cond::Ne);
                                let v1761 = constructor_with_flags_reg(ctx, v1759, v1760);
                                let v1762 = C::value_reg(ctx, v1757);
                                let v1763 = C::value_reg(ctx, v1761);
                                let v1764 = C::output_pair(ctx, v1762, v1763);
                                // Rule at src/isa/aarch64/lower.isle line 2761.
                                return Some(v1764);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1765 = constructor_madd(ctx, I64, v34, v35, v269);
                                let v922 = C::put_in_reg(ctx, v31.0);
                                let v1766 = C::put_in_reg(ctx, v31.1);
                                let v1767 = constructor_umulh(ctx, I64, v922, v1766);
                                let v1768 = C::u8_into_imm12(ctx, 0x0);
                                let v1769 = &constructor_cmp64_imm(ctx, v1767, v1768);
                                let v1770 = &constructor_cset(ctx, &Cond::Ne);
                                let v1771 = constructor_with_flags_reg(ctx, v1769, v1770);
                                let v1772 = C::value_reg(ctx, v1765);
                                let v1773 = C::value_reg(ctx, v1771);
                                let v1774 = C::output_pair(ctx, v1772, v1773);
                                // Rule at src/isa/aarch64/lower.isle line 2775.
                                return Some(v1774);
                            }
                            _ => {}
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v1747 =
                                &constructor_lower_extend_op(ctx, v910, &ArgumentExtension::Uext);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1748 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v1749 = constructor_put_in_reg_zext32(ctx, v31.1);
                            let v797 = C::zero_reg(ctx);
                            let v1750 = constructor_madd(ctx, v910, v1748, v1749, v797);
                            let v1751 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v1750,
                                v1750,
                                v1747,
                            );
                            let v1752 = &constructor_cset(ctx, &Cond::Ne);
                            let v1753 = constructor_with_flags_reg(ctx, v1751, v1752);
                            let v1754 = C::value_reg(ctx, v1750);
                            let v1755 = C::value_reg(ctx, v1753);
                            let v1756 = C::output_pair(ctx, v1754, v1755);
                            // Rule at src/isa/aarch64/lower.isle line 2745.
                            return Some(v1756);
                        }
                    }
                }
                &Opcode::SmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1784 = constructor_smaddl(ctx, v34, v35, v269);
                                let v1786 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1784,
                                    v1784,
                                    &ExtendOp::SXTW,
                                );
                                let v1760 = &constructor_cset(ctx, &Cond::Ne);
                                let v1787 = constructor_with_flags_reg(ctx, v1786, v1760);
                                let v1788 = C::value_reg(ctx, v1784);
                                let v1789 = C::value_reg(ctx, v1787);
                                let v1790 = C::output_pair(ctx, v1788, v1789);
                                // Rule at src/isa/aarch64/lower.isle line 2809.
                                return Some(v1790);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1765 = constructor_madd(ctx, I64, v34, v35, v269);
                                let v922 = C::put_in_reg(ctx, v31.0);
                                let v1766 = C::put_in_reg(ctx, v31.1);
                                let v1791 = constructor_smulh(ctx, I64, v922, v1766);
                                let v1793 = &constructor_cmp_rr_shift_asr(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1791,
                                    v1765,
                                    0x3F,
                                );
                                let v1794 = &constructor_cset(ctx, &Cond::Ne);
                                let v1795 = constructor_with_flags_reg(ctx, v1793, v1794);
                                let v1796 = C::value_reg(ctx, v1765);
                                let v1797 = C::value_reg(ctx, v1795);
                                let v1798 = C::output_pair(ctx, v1796, v1797);
                                // Rule at src/isa/aarch64/lower.isle line 2823.
                                return Some(v1798);
                            }
                            _ => {}
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v1775 =
                                &constructor_lower_extend_op(ctx, v910, &ArgumentExtension::Sext);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1776 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v1777 = constructor_put_in_reg_sext32(ctx, v31.1);
                            let v797 = C::zero_reg(ctx);
                            let v1778 = constructor_madd(ctx, v910, v1776, v1777, v797);
                            let v1779 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v1778,
                                v1778,
                                v1775,
                            );
                            let v1752 = &constructor_cset(ctx, &Cond::Ne);
                            let v1780 = constructor_with_flags_reg(ctx, v1779, v1752);
                            let v1781 = C::value_reg(ctx, v1778);
                            let v1782 = C::value_reg(ctx, v1780);
                            let v1783 = C::output_pair(ctx, v1781, v1782);
                            // Rule at src/isa/aarch64/lower.isle line 2793.
                            return Some(v1783);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v56 = C::put_in_reg(ctx, v31.1);
                                        let v828 = C::put_in_reg(ctx, v299);
                                        let v577 = &constructor_vector_size(ctx, v576);
                                        let v829 = constructor_bic_vec(ctx, v56, v828, v577);
                                        let v830 = constructor_output_reg(ctx, v829);
                                        // Rule at src/isa/aarch64/lower.isle line 1249.
                                        return Some(v830);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v620 = C::put_in_reg(ctx, v301);
                                        let v577 = &constructor_vector_size(ctx, v576);
                                        let v826 = constructor_bic_vec(ctx, v34, v620, v577);
                                        let v827 = constructor_output_reg(ctx, v826);
                                        // Rule at src/isa/aarch64/lower.isle line 1247.
                                        return Some(v827);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v824 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v825 = C::output(ctx, v824);
                                        // Rule at src/isa/aarch64/lower.isle line 1245.
                                        return Some(v825);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v822 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v823 = C::output(ctx, v822);
                                        // Rule at src/isa/aarch64/lower.isle line 1244.
                                        return Some(v823);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v820 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v821 = constructor_output_reg(ctx, v820);
                                        // Rule at src/isa/aarch64/lower.isle line 1241.
                                        return Some(v821);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v818 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v819 = constructor_output_reg(ctx, v818);
                                        // Rule at src/isa/aarch64/lower.isle line 1239.
                                        return Some(v819);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v813 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::And, I64, v31.0, v31.1);
                            let v814 = C::output(ctx, v813);
                            // Rule at src/isa/aarch64/lower.isle line 1230.
                            return Some(v814);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v811 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::And,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v812 = constructor_output_reg(ctx, v811);
                            // Rule at src/isa/aarch64/lower.isle line 1227.
                            return Some(v812);
                        }
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v577 = &constructor_vector_size(ctx, v576);
                            let v815 = constructor_and_vec(ctx, v34, v35, v577);
                            let v816 = constructor_output_reg(ctx, v815);
                            // Rule at src/isa/aarch64/lower.isle line 1232.
                            return Some(v816);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v845 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v846 = C::output(ctx, v845);
                                        // Rule at src/isa/aarch64/lower.isle line 1272.
                                        return Some(v846);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v843 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v844 = C::output(ctx, v843);
                                        // Rule at src/isa/aarch64/lower.isle line 1271.
                                        return Some(v844);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v841 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v842 = constructor_output_reg(ctx, v841);
                                        // Rule at src/isa/aarch64/lower.isle line 1268.
                                        return Some(v842);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v839 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v840 = constructor_output_reg(ctx, v839);
                                        // Rule at src/isa/aarch64/lower.isle line 1266.
                                        return Some(v840);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v834 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Orr, I64, v31.0, v31.1);
                            let v835 = C::output(ctx, v834);
                            // Rule at src/isa/aarch64/lower.isle line 1257.
                            return Some(v835);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v832 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Orr,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v833 = constructor_output_reg(ctx, v832);
                            // Rule at src/isa/aarch64/lower.isle line 1254.
                            return Some(v833);
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v577 = &constructor_vector_size(ctx, v576);
                            let v836 = constructor_orr_vec(ctx, v34, v35, v577);
                            let v837 = constructor_output_reg(ctx, v836);
                            // Rule at src/isa/aarch64/lower.isle line 1259.
                            return Some(v837);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v860 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v861 = C::output(ctx, v860);
                                        // Rule at src/isa/aarch64/lower.isle line 1294.
                                        return Some(v861);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v858 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v859 = C::output(ctx, v858);
                                        // Rule at src/isa/aarch64/lower.isle line 1293.
                                        return Some(v859);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v856 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v857 = constructor_output_reg(ctx, v856);
                                        // Rule at src/isa/aarch64/lower.isle line 1290.
                                        return Some(v857);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v854 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v855 = constructor_output_reg(ctx, v854);
                                        // Rule at src/isa/aarch64/lower.isle line 1288.
                                        return Some(v855);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v850 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Eor, I64, v31.0, v31.1);
                            let v851 = C::output(ctx, v850);
                            // Rule at src/isa/aarch64/lower.isle line 1279.
                            return Some(v851);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v848 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Eor,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v849 = constructor_output_reg(ctx, v848);
                            // Rule at src/isa/aarch64/lower.isle line 1276.
                            return Some(v849);
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v577 = &constructor_vector_size(ctx, v576);
                            let v852 = constructor_eor_vec(ctx, v34, v35, v577);
                            let v853 = constructor_output_reg(ctx, v852);
                            // Rule at src/isa/aarch64/lower.isle line 1281.
                            return Some(v853);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v928 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v929) = v928 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v930 = C::negate_imm_shift(ctx, I32, v929);
                                                let v931 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v930);
                                                let v932 = constructor_output_reg(ctx, v931);
                                                // Rule at src/isa/aarch64/lower.isle line 1538.
                                                return Some(v932);
                                            }
                                        }
                                    }
                                }
                                let v911 = C::put_in_regs(ctx, v31.1);
                                let v912 = C::value_regs_get(ctx, v911, 0x0);
                                let v269 = C::zero_reg(ctx);
                                let v913 = constructor_sub(ctx, I32, v269, v912);
                                let v922 = C::put_in_reg(ctx, v31.0);
                                let v923 = constructor_a64_rotr(ctx, I32, v922, v913);
                                let v924 = constructor_output_reg(ctx, v923);
                                // Rule at src/isa/aarch64/lower.isle line 1526.
                                return Some(v924);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v933 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v934) = v933 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v935 = C::negate_imm_shift(ctx, I64, v934);
                                                let v936 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v935);
                                                let v937 = constructor_output_reg(ctx, v936);
                                                // Rule at src/isa/aarch64/lower.isle line 1543.
                                                return Some(v937);
                                            }
                                        }
                                    }
                                }
                                let v911 = C::put_in_regs(ctx, v31.1);
                                let v912 = C::value_regs_get(ctx, v911, 0x0);
                                let v269 = C::zero_reg(ctx);
                                let v925 = constructor_sub(ctx, I64, v269, v912);
                                let v922 = C::put_in_reg(ctx, v31.0);
                                let v926 = constructor_a64_rotr(ctx, I64, v922, v925);
                                let v927 = constructor_output_reg(ctx, v926);
                                // Rule at src/isa/aarch64/lower.isle line 1532.
                                return Some(v927);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v572 = C::put_in_regs(ctx, v31.1);
                                let v867 = C::value_regs_get(ctx, v572, 0x0);
                                let v939 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v940 = constructor_sub(ctx, I64, v939, v867);
                                let v941 = constructor_lower_shl128(ctx, v124, v867);
                                let v942 = constructor_lower_ushr128(ctx, v124, v940);
                                let v943 = C::value_regs_get(ctx, v941, 0x0);
                                let v944 = C::value_regs_get(ctx, v942, 0x0);
                                let v945 = constructor_orr(ctx, I64, v943, v944);
                                let v946 = C::value_regs_get(ctx, v941, 0x1);
                                let v947 = C::value_regs_get(ctx, v942, 0x1);
                                let v948 = constructor_orr(ctx, I64, v946, v947);
                                let v949 = C::value_regs(ctx, v945, v948);
                                let v950 = C::output(ctx, v949);
                                // Rule at src/isa/aarch64/lower.isle line 1553.
                                return Some(v950);
                            }
                            _ => {}
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v917 = C::imm_shift_from_imm64(ctx, v910, v42);
                                        if let Some(v918) = v917 {
                                            let v881 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v919 = C::negate_imm_shift(ctx, v910, v918);
                                            let v920 =
                                                constructor_small_rotr_imm(ctx, v910, v881, v919);
                                            let v921 = constructor_output_reg(ctx, v920);
                                            // Rule at src/isa/aarch64/lower.isle line 1513.
                                            return Some(v921);
                                        }
                                    }
                                }
                            }
                            let v911 = C::put_in_regs(ctx, v31.1);
                            let v912 = C::value_regs_get(ctx, v911, 0x0);
                            let v269 = C::zero_reg(ctx);
                            let v913 = constructor_sub(ctx, I32, v269, v912);
                            let v914 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v915 = constructor_small_rotr(ctx, v910, v914, v913);
                            let v916 = constructor_output_reg(ctx, v915);
                            // Rule at src/isa/aarch64/lower.isle line 1507.
                            return Some(v916);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v928 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v929) = v928 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v959 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v929);
                                                let v960 = constructor_output_reg(ctx, v959);
                                                // Rule at src/isa/aarch64/lower.isle line 1583.
                                                return Some(v960);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v572 = C::put_in_regs(ctx, v31.1);
                                let v867 = C::value_regs_get(ctx, v572, 0x0);
                                let v953 = constructor_a64_rotr(ctx, I32, v34, v867);
                                let v954 = constructor_output_reg(ctx, v953);
                                // Rule at src/isa/aarch64/lower.isle line 1570.
                                return Some(v954);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v933 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v934) = v933 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v961 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v934);
                                                let v962 = constructor_output_reg(ctx, v961);
                                                // Rule at src/isa/aarch64/lower.isle line 1588.
                                                return Some(v962);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v572 = C::put_in_regs(ctx, v31.1);
                                let v867 = C::value_regs_get(ctx, v572, 0x0);
                                let v955 = constructor_a64_rotr(ctx, I64, v34, v867);
                                let v956 = constructor_output_reg(ctx, v955);
                                // Rule at src/isa/aarch64/lower.isle line 1574.
                                return Some(v956);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v572 = C::put_in_regs(ctx, v31.1);
                                let v867 = C::value_regs_get(ctx, v572, 0x0);
                                let v939 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v940 = constructor_sub(ctx, I64, v939, v867);
                                let v963 = constructor_lower_ushr128(ctx, v124, v867);
                                let v964 = constructor_lower_shl128(ctx, v124, v940);
                                let v965 = C::value_regs_get(ctx, v963, 0x1);
                                let v966 = C::value_regs_get(ctx, v964, 0x1);
                                let v967 = constructor_orr(ctx, I64, v965, v966);
                                let v968 = C::value_regs_get(ctx, v963, 0x0);
                                let v969 = C::value_regs_get(ctx, v964, 0x0);
                                let v970 = constructor_orr(ctx, I64, v968, v969);
                                let v971 = C::value_regs(ctx, v970, v967);
                                let v972 = C::output(ctx, v971);
                                // Rule at src/isa/aarch64/lower.isle line 1637.
                                return Some(v972);
                            }
                            _ => {}
                        }
                        let v909 = C::fits_in_16(ctx, v3);
                        if let Some(v910) = v909 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v917 = C::imm_shift_from_imm64(ctx, v910, v42);
                                        if let Some(v918) = v917 {
                                            let v881 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v957 =
                                                constructor_small_rotr_imm(ctx, v910, v881, v918);
                                            let v958 = constructor_output_reg(ctx, v957);
                                            // Rule at src/isa/aarch64/lower.isle line 1578.
                                            return Some(v958);
                                        }
                                    }
                                }
                            }
                            let v881 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v572 = C::put_in_regs(ctx, v31.1);
                            let v867 = C::value_regs_get(ctx, v572, 0x0);
                            let v951 = constructor_small_rotr(ctx, v910, v881, v867);
                            let v952 = constructor_output_reg(ctx, v951);
                            // Rule at src/isa/aarch64/lower.isle line 1566.
                            return Some(v952);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v865 = constructor_do_shift(ctx, &ALUOp::Lsl, I64, v34, v31.1);
                                let v866 = constructor_output_reg(ctx, v865);
                                // Rule at src/isa/aarch64/lower.isle line 1303.
                                return Some(v866);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v572 = C::put_in_regs(ctx, v31.1);
                                let v867 = C::value_regs_get(ctx, v572, 0x0);
                                let v868 = constructor_lower_shl128(ctx, v124, v867);
                                let v869 = C::output(ctx, v868);
                                // Rule at src/isa/aarch64/lower.isle line 1307.
                                return Some(v869);
                            }
                            _ => {}
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v863 = constructor_do_shift(ctx, &ALUOp::Lsl, v319, v34, v31.1);
                            let v864 = constructor_output_reg(ctx, v863);
                            // Rule at src/isa/aarch64/lower.isle line 1299.
                            return Some(v864);
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v594 = &constructor_vector_size(ctx, v576);
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v877 = C::shift_masked_imm(ctx, v576, v43);
                                        let v878 = constructor_ushl_vec_imm(ctx, v34, v877, v594);
                                        let v879 = constructor_output_reg(ctx, v878);
                                        // Rule at src/isa/aarch64/lower.isle line 1342.
                                        return Some(v879);
                                    }
                                }
                            }
                            let v870 = &constructor_vector_size(ctx, v576);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v872 = C::shift_mask(ctx, v576);
                            let v873 = constructor_and_imm(ctx, I32, v35, v872);
                            let v874 = constructor_vec_dup(ctx, v873, v870);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v875 = constructor_sshl(ctx, v328, v874, v870);
                            let v876 = constructor_output_reg(ctx, v875);
                            // Rule at src/isa/aarch64/lower.isle line 1337.
                            return Some(v876);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v656 = constructor_put_in_reg_zext64(ctx, v31.0);
                                let v884 = constructor_do_shift(ctx, &ALUOp::Lsr, I64, v656, v31.1);
                                let v885 = constructor_output_reg(ctx, v884);
                                // Rule at src/isa/aarch64/lower.isle line 1394.
                                return Some(v885);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v572 = C::put_in_regs(ctx, v31.1);
                                let v867 = C::value_regs_get(ctx, v572, 0x0);
                                let v886 = constructor_lower_ushr128(ctx, v124, v867);
                                let v887 = C::output(ctx, v886);
                                // Rule at src/isa/aarch64/lower.isle line 1398.
                                return Some(v887);
                            }
                            _ => {}
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v881 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v882 = constructor_do_shift(ctx, &ALUOp::Lsr, v319, v881, v31.1);
                            let v883 = constructor_output_reg(ctx, v882);
                            // Rule at src/isa/aarch64/lower.isle line 1390.
                            return Some(v883);
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v877 = C::shift_masked_imm(ctx, v576, v43);
                                        if v877 == 0x0 {
                                            let v896 = constructor_output_value(ctx, v31.0);
                                            // Rule at src/isa/aarch64/lower.isle line 1413.
                                            return Some(v896);
                                        }
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v594 = &constructor_vector_size(ctx, v576);
                                        let v894 = constructor_ushr_vec_imm(ctx, v34, v877, v594);
                                        let v895 = constructor_output_reg(ctx, v894);
                                        // Rule at src/isa/aarch64/lower.isle line 1411.
                                        return Some(v895);
                                    }
                                }
                            }
                            let v870 = &constructor_vector_size(ctx, v576);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v872 = C::shift_mask(ctx, v576);
                            let v873 = constructor_and_imm(ctx, I32, v35, v872);
                            let v888 = C::zero_reg(ctx);
                            let v889 = constructor_sub(ctx, I64, v888, v873);
                            let v890 = constructor_vec_dup(ctx, v889, v870);
                            let v891 = C::put_in_reg(ctx, v31.0);
                            let v892 = constructor_ushl(ctx, v891, v890, v870);
                            let v893 = constructor_output_reg(ctx, v892);
                            // Rule at src/isa/aarch64/lower.isle line 1406.
                            return Some(v893);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v647 = constructor_put_in_reg_sext64(ctx, v31.0);
                                let v901 = constructor_do_shift(ctx, &ALUOp::Asr, I64, v647, v31.1);
                                let v902 = constructor_output_reg(ctx, v901);
                                // Rule at src/isa/aarch64/lower.isle line 1451.
                                return Some(v902);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v572 = C::put_in_regs(ctx, v31.1);
                                let v867 = C::value_regs_get(ctx, v572, 0x0);
                                let v903 = constructor_lower_sshr128(ctx, v124, v867);
                                let v904 = C::output(ctx, v903);
                                // Rule at src/isa/aarch64/lower.isle line 1455.
                                return Some(v904);
                            }
                            _ => {}
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v877 = C::shift_masked_imm(ctx, v576, v43);
                                        if v877 == 0x0 {
                                            let v896 = constructor_output_value(ctx, v31.0);
                                            // Rule at src/isa/aarch64/lower.isle line 1471.
                                            return Some(v896);
                                        }
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v594 = &constructor_vector_size(ctx, v576);
                                        let v907 = constructor_sshr_vec_imm(ctx, v34, v877, v594);
                                        let v908 = constructor_output_reg(ctx, v907);
                                        // Rule at src/isa/aarch64/lower.isle line 1469.
                                        return Some(v908);
                                    }
                                }
                            }
                            let v870 = &constructor_vector_size(ctx, v576);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v872 = C::shift_mask(ctx, v576);
                            let v873 = constructor_and_imm(ctx, I32, v35, v872);
                            let v888 = C::zero_reg(ctx);
                            let v889 = constructor_sub(ctx, I64, v888, v873);
                            let v890 = constructor_vec_dup(ctx, v889, v870);
                            let v891 = C::put_in_reg(ctx, v31.0);
                            let v905 = constructor_sshl(ctx, v891, v890, v870);
                            let v906 = constructor_output_reg(ctx, v905);
                            // Rule at src/isa/aarch64/lower.isle line 1464.
                            return Some(v906);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v898 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v899 = constructor_do_shift(ctx, &ALUOp::Asr, v319, v898, v31.1);
                            let v900 = constructor_output_reg(ctx, v899);
                            // Rule at src/isa/aarch64/lower.isle line 1447.
                            return Some(v900);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v352 = constructor_fpu_rrr(ctx, &FPUOp2::Add, v34, v35, v351);
                            let v353 = constructor_output_reg(ctx, v352);
                            // Rule at src/isa/aarch64/lower.isle line 375.
                            return Some(v353);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v346 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v347 = constructor_output_reg(ctx, v346);
                            // Rule at src/isa/aarch64/lower.isle line 372.
                            return Some(v347);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v346 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v1823 = C::value_reg(ctx, v346);
                            let v1824 = C::output(ctx, v1823);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 15.
                            return Some(v1824);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v358 = constructor_fpu_rrr(ctx, &FPUOp2::Sub, v34, v35, v351);
                            let v359 = constructor_output_reg(ctx, v358);
                            // Rule at src/isa/aarch64/lower.isle line 383.
                            return Some(v359);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v355 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v356 = constructor_output_reg(ctx, v355);
                            // Rule at src/isa/aarch64/lower.isle line 380.
                            return Some(v356);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v355 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v1825 = C::value_reg(ctx, v355);
                            let v1826 = C::output(ctx, v1825);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 19.
                            return Some(v1826);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v364 = constructor_fpu_rrr(ctx, &FPUOp2::Mul, v34, v35, v351);
                            let v365 = constructor_output_reg(ctx, v364);
                            // Rule at src/isa/aarch64/lower.isle line 391.
                            return Some(v365);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v361 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v362 = constructor_output_reg(ctx, v361);
                            // Rule at src/isa/aarch64/lower.isle line 388.
                            return Some(v362);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v361 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v1827 = C::value_reg(ctx, v361);
                            let v1828 = C::output(ctx, v1827);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 23.
                            return Some(v1828);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v370 = constructor_fpu_rrr(ctx, &FPUOp2::Div, v34, v35, v351);
                            let v371 = constructor_output_reg(ctx, v370);
                            // Rule at src/isa/aarch64/lower.isle line 399.
                            return Some(v371);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v367 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v368 = constructor_output_reg(ctx, v367);
                            // Rule at src/isa/aarch64/lower.isle line 396.
                            return Some(v368);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v367 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v1829 = C::value_reg(ctx, v367);
                            let v1830 = C::output(ctx, v1829);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 27.
                            return Some(v1830);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v478 = constructor_fcopy_sign(ctx, v34, v35, v3);
                        let v479 = constructor_output_reg(ctx, v478);
                        // Rule at src/isa/aarch64/lower.isle line 575.
                        return Some(v479);
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v376 = constructor_fpu_rrr(ctx, &FPUOp2::Min, v34, v35, v351);
                            let v377 = constructor_output_reg(ctx, v376);
                            // Rule at src/isa/aarch64/lower.isle line 407.
                            return Some(v377);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v373 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v374 = constructor_output_reg(ctx, v373);
                            // Rule at src/isa/aarch64/lower.isle line 404.
                            return Some(v374);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v373 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v1831 = C::value_reg(ctx, v373);
                            let v1832 = C::output(ctx, v1831);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 31.
                            return Some(v1832);
                        }
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v389 = &constructor_scalar_size(ctx, v349);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v112 = C::put_in_reg(ctx, v31.1);
                            let v390 = &constructor_fpu_cmp(ctx, v389, v325, v112);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v392 = &constructor_fpu_csel(ctx, v349, &Cond::Gt, v386, v328);
                            let v393 = constructor_with_flags(ctx, v390, v392);
                            let v394 = C::output(ctx, v393);
                            // Rule at src/isa/aarch64/lower.isle line 423.
                            return Some(v394);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v385 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v34, v35, v121);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v387 = constructor_bsl(ctx, v3, v385, v386, v328);
                            let v388 = constructor_output_reg(ctx, v387);
                            // Rule at src/isa/aarch64/lower.isle line 420.
                            return Some(v388);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v385 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v34, v35, v121);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v387 = constructor_bsl(ctx, v3, v385, v386, v328);
                            let v1835 = C::value_reg(ctx, v387);
                            let v1836 = C::output(ctx, v1835);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 39.
                            return Some(v1836);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v382 = constructor_fpu_rrr(ctx, &FPUOp2::Max, v34, v35, v351);
                            let v383 = constructor_output_reg(ctx, v382);
                            // Rule at src/isa/aarch64/lower.isle line 415.
                            return Some(v383);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v379 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v380 = constructor_output_reg(ctx, v379);
                            // Rule at src/isa/aarch64/lower.isle line 412.
                            return Some(v380);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v379 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v1833 = C::value_reg(ctx, v379);
                            let v1834 = C::output(ctx, v1833);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 35.
                            return Some(v1834);
                        }
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v389 = &constructor_scalar_size(ctx, v349);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v107 = C::put_in_reg(ctx, v31.0);
                            let v398 = &constructor_fpu_cmp(ctx, v389, v35, v107);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v392 = &constructor_fpu_csel(ctx, v349, &Cond::Gt, v386, v328);
                            let v399 = constructor_with_flags(ctx, v398, v392);
                            let v400 = C::output(ctx, v399);
                            // Rule at src/isa/aarch64/lower.isle line 432.
                            return Some(v400);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v395 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v56, v325, v121);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v396 = constructor_bsl(ctx, v3, v395, v386, v328);
                            let v397 = constructor_output_reg(ctx, v396);
                            // Rule at src/isa/aarch64/lower.isle line 429.
                            return Some(v397);
                        }
                        let v1807 = C::dynamic_lane(ctx, v3);
                        if let Some(v1808) = v1807 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v395 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v56, v325, v121);
                            let v386 = C::put_in_reg(ctx, v31.1);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v396 = constructor_bsl(ctx, v3, v395, v386, v328);
                            let v1837 = C::value_reg(ctx, v396);
                            let v1838 = C::output(ctx, v1837);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 45.
                            return Some(v1838);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1408 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1409) = v1408 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1410 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1411 = &constructor_lane_size(ctx, v1409);
                            let v1412 = constructor_sqxtn(ctx, v1410, v1411);
                            let v1413 = constructor_output_reg(ctx, v1412);
                            // Rule at src/isa/aarch64/lower.isle line 2144.
                            return Some(v1413);
                        }
                        let v1401 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1402) = v1401 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1403 = C::zero_value(ctx, v31.1);
                            if let Some(v1404) = v1403 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1405 = &constructor_lane_size(ctx, v1402);
                                let v1406 = constructor_sqxtn(ctx, v34, v1405);
                                let v1407 = constructor_output_reg(ctx, v1406);
                                // Rule at src/isa/aarch64/lower.isle line 2140.
                                return Some(v1407);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1405 = &constructor_lane_size(ctx, v1402);
                            let v1406 = constructor_sqxtn(ctx, v34, v1405);
                            let v1414 = C::put_in_reg(ctx, v31.1);
                            let v1415 = &constructor_lane_size(ctx, v1402);
                            let v1416 = constructor_sqxtn2(ctx, v1406, v1414, v1415);
                            let v1417 = constructor_output_reg(ctx, v1416);
                            // Rule at src/isa/aarch64/lower.isle line 2148.
                            return Some(v1417);
                        }
                        let v1844 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1845) = v1844 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1410 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1846 = &constructor_lane_size(ctx, v1845);
                            let v1847 = constructor_sqxtn(ctx, v1410, v1846);
                            let v1848 = constructor_output_reg(ctx, v1847);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 55.
                            return Some(v1848);
                        }
                        let v1839 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1840) = v1839 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1403 = C::zero_value(ctx, v31.1);
                            if let Some(v1404) = v1403 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1841 = &constructor_lane_size(ctx, v1840);
                                let v1842 = constructor_sqxtn(ctx, v34, v1841);
                                let v1843 = constructor_output_reg(ctx, v1842);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 51.
                                return Some(v1843);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1841 = &constructor_lane_size(ctx, v1840);
                            let v1842 = constructor_sqxtn(ctx, v34, v1841);
                            let v1414 = C::put_in_reg(ctx, v31.1);
                            let v1849 = &constructor_lane_size(ctx, v1840);
                            let v1850 = constructor_sqxtn2(ctx, v1842, v1414, v1849);
                            let v1851 = constructor_output_reg(ctx, v1850);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 59.
                            return Some(v1851);
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1408 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1409) = v1408 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1410 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1411 = &constructor_lane_size(ctx, v1409);
                            let v1420 = constructor_sqxtun(ctx, v1410, v1411);
                            let v1421 = constructor_output_reg(ctx, v1420);
                            // Rule at src/isa/aarch64/lower.isle line 2159.
                            return Some(v1421);
                        }
                        let v1401 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1402) = v1401 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1403 = C::zero_value(ctx, v31.1);
                            if let Some(v1404) = v1403 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1405 = &constructor_lane_size(ctx, v1402);
                                let v1418 = constructor_sqxtun(ctx, v34, v1405);
                                let v1419 = constructor_output_reg(ctx, v1418);
                                // Rule at src/isa/aarch64/lower.isle line 2155.
                                return Some(v1419);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1405 = &constructor_lane_size(ctx, v1402);
                            let v1418 = constructor_sqxtun(ctx, v34, v1405);
                            let v1414 = C::put_in_reg(ctx, v31.1);
                            let v1415 = &constructor_lane_size(ctx, v1402);
                            let v1422 = constructor_sqxtun2(ctx, v1418, v1414, v1415);
                            let v1423 = constructor_output_reg(ctx, v1422);
                            // Rule at src/isa/aarch64/lower.isle line 2163.
                            return Some(v1423);
                        }
                        let v1844 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1845) = v1844 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1410 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1846 = &constructor_lane_size(ctx, v1845);
                            let v1854 = constructor_sqxtun(ctx, v1410, v1846);
                            let v1855 = constructor_output_reg(ctx, v1854);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 69.
                            return Some(v1855);
                        }
                        let v1839 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1840) = v1839 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1403 = C::zero_value(ctx, v31.1);
                            if let Some(v1404) = v1403 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1841 = &constructor_lane_size(ctx, v1840);
                                let v1852 = constructor_sqxtun(ctx, v34, v1841);
                                let v1853 = constructor_output_reg(ctx, v1852);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 65.
                                return Some(v1853);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1841 = &constructor_lane_size(ctx, v1840);
                            let v1852 = constructor_sqxtun(ctx, v34, v1841);
                            let v1414 = C::put_in_reg(ctx, v31.1);
                            let v1849 = &constructor_lane_size(ctx, v1840);
                            let v1856 = constructor_sqxtun2(ctx, v1852, v1414, v1849);
                            let v1857 = constructor_output_reg(ctx, v1856);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 73.
                            return Some(v1857);
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1408 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1409) = v1408 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1410 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1411 = &constructor_lane_size(ctx, v1409);
                            let v1426 = constructor_uqxtn(ctx, v1410, v1411);
                            let v1427 = constructor_output_reg(ctx, v1426);
                            // Rule at src/isa/aarch64/lower.isle line 2175.
                            return Some(v1427);
                        }
                        let v1401 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1402) = v1401 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1403 = C::zero_value(ctx, v31.1);
                            if let Some(v1404) = v1403 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1405 = &constructor_lane_size(ctx, v1402);
                                let v1424 = constructor_uqxtn(ctx, v34, v1405);
                                let v1425 = constructor_output_reg(ctx, v1424);
                                // Rule at src/isa/aarch64/lower.isle line 2171.
                                return Some(v1425);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1405 = &constructor_lane_size(ctx, v1402);
                            let v1424 = constructor_uqxtn(ctx, v34, v1405);
                            let v1414 = C::put_in_reg(ctx, v31.1);
                            let v1415 = &constructor_lane_size(ctx, v1402);
                            let v1428 = constructor_uqxtn2(ctx, v1424, v1414, v1415);
                            let v1429 = constructor_output_reg(ctx, v1428);
                            // Rule at src/isa/aarch64/lower.isle line 2179.
                            return Some(v1429);
                        }
                        let v1844 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1845) = v1844 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1410 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1846 = &constructor_lane_size(ctx, v1845);
                            let v1860 = constructor_uqxtn(ctx, v1410, v1846);
                            let v1861 = constructor_output_reg(ctx, v1860);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 83.
                            return Some(v1861);
                        }
                        let v1839 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1840) = v1839 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1403 = C::zero_value(ctx, v31.1);
                            if let Some(v1404) = v1403 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1841 = &constructor_lane_size(ctx, v1840);
                                let v1858 = constructor_uqxtn(ctx, v34, v1841);
                                let v1859 = constructor_output_reg(ctx, v1858);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 79.
                                return Some(v1859);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1841 = &constructor_lane_size(ctx, v1840);
                            let v1858 = constructor_uqxtn(ctx, v34, v1841);
                            let v1414 = C::put_in_reg(ctx, v31.1);
                            let v1849 = &constructor_lane_size(ctx, v1840);
                            let v1862 = constructor_uqxtn2(ctx, v1858, v1414, v1849);
                            let v1863 = constructor_output_reg(ctx, v1862);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 87.
                            return Some(v1863);
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v303 =
                                                                    constructor_saddlp8(ctx, v302);
                                                                let v304 = constructor_output_reg(
                                                                    ctx, v303,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 322.
                                                                return Some(v304);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v307 =
                                                                    constructor_uaddlp8(ctx, v302);
                                                                let v308 = constructor_output_reg(
                                                                    ctx, v307,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 330.
                                                                return Some(v308);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v305 =
                                                                    constructor_saddlp16(ctx, v302);
                                                                let v306 = constructor_output_reg(
                                                                    ctx, v305,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 326.
                                                                return Some(v306);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v309 =
                                                                    constructor_uaddlp16(ctx, v302);
                                                                let v310 = constructor_output_reg(
                                                                    ctx, v309,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 334.
                                                                return Some(v310);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v121 = &constructor_vector_size(ctx, v3);
                        let v311 = constructor_addp(ctx, v34, v35, v121);
                        let v312 = constructor_output_reg(ctx, v311);
                        // Rule at src/isa/aarch64/lower.isle line 337.
                        return Some(v312);
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v239 = C::value_regs(ctx, v34, v35);
                            let v240 = C::output(ctx, v239);
                            // Rule at src/isa/aarch64/lower.isle line 255.
                            return Some(v240);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1638,
            arg: v1639,
            imm: v1640,
        } => {
            match v1638 {
                &Opcode::Extractlane => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v1641 = C::u8_from_uimm8(ctx, v1640);
                            if v1641 == 0x0 {
                                let v1642 = constructor_output_value(ctx, v1639);
                                // Rule at src/isa/aarch64/lower.isle line 2482.
                                return Some(v1642);
                            }
                            let v1643 = C::put_in_reg(ctx, v1639);
                            let v1647 = C::value_type(ctx, v1639);
                            let v1648 = &constructor_vector_size(ctx, v1647);
                            let v1649 = constructor_fpu_move_from_vec(ctx, v1643, v1641, v1648);
                            let v1650 = constructor_output_reg(ctx, v1649);
                            // Rule at src/isa/aarch64/lower.isle line 2490.
                            return Some(v1650);
                        }
                        let v680 = C::ty_int(ctx, v3);
                        if let Some(v681) = v680 {
                            let v1643 = C::put_in_reg(ctx, v1639);
                            let v1644 = &constructor_scalar_size(ctx, v681);
                            let v1641 = C::u8_from_uimm8(ctx, v1640);
                            let v1645 = constructor_mov_from_vec(ctx, v1643, v1641, v1644);
                            let v1646 = constructor_output_reg(ctx, v1645);
                            // Rule at src/isa/aarch64/lower.isle line 2485.
                            return Some(v1646);
                        }
                    }
                }
                &Opcode::ExtractVector => {
                    if v1640 == 0x0 {
                        let v1643 = C::put_in_reg(ctx, v1639);
                        let v1872 = C::value_reg(ctx, v1643);
                        let v1873 = C::output(ctx, v1872);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 99.
                        return Some(v1873);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v1488,
            args: v1489,
            func_ref: v1490,
        } => {
            match v1488 {
                &Opcode::Call => {
                    let v1492 = C::func_ref_data(ctx, v1490);
                    let v1491 = C::value_list_slice(ctx, v1489);
                    let v1496 = C::gen_call(ctx, v1492.0, v1492.1, v1492.2, v1491);
                    // Rule at src/isa/aarch64/lower.isle line 2259.
                    return Some(v1496);
                }
                &Opcode::ReturnCall => {
                    let v1492 = C::func_ref_data(ctx, v1490);
                    let v1491 = C::value_list_slice(ctx, v1489);
                    let v1510 = C::gen_return_call(ctx, v1492.0, v1492.1, v1492.2, v1491);
                    // Rule at src/isa/aarch64/lower.isle line 2273.
                    return Some(v1510);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1497,
            args: v1498,
            sig_ref: v1499,
        } => {
            match v1497 {
                &Opcode::CallIndirect => {
                    let v1500 = C::value_list_slice(ctx, v1498);
                    let v1501 = C::value_slice_unwrap(ctx, v1500);
                    if let Some(v1502) = v1501 {
                        let v1505 = C::gen_call_indirect(ctx, v1499, v1502.0, v1502.1);
                        // Rule at src/isa/aarch64/lower.isle line 2262.
                        return Some(v1505);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1500 = C::value_list_slice(ctx, v1498);
                    let v1501 = C::value_slice_unwrap(ctx, v1500);
                    if let Some(v1502) = v1501 {
                        let v1511 = C::gen_return_call_indirect(ctx, v1499, v1502.0, v1502.1);
                        // Rule at src/isa/aarch64/lower.isle line 2276.
                        return Some(v1511);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref v1864,
            dynamic_stack_slot: v1865,
        } => {
            if let &Opcode::DynamicStackAddr = v1864 {
                let v1866 = C::temp_writable_reg(ctx, I64);
                let v1867 = &C::abi_dynamic_stackslot_addr(ctx, v1866, v1865);
                let v1868 = C::emit(ctx, v1867);
                let v1869 = C::writable_reg_to_reg(ctx, v1866);
                let v1870 = C::value_reg(ctx, v1869);
                let v1871 = C::output(ctx, v1870);
                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 93.
                return Some(v1871);
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1091,
            args: ref v1092,
            cond: ref v1093,
        } => {
            if let &Opcode::Fcmp = v1091 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1094 = C::unpack_value_array_2(ctx, v1092);
                        let v1099 = C::zero_value(ctx, v1094.1);
                        if let Some(v1100) = v1099 {
                            let v1097 = &C::fcmp_zero_cond_not_eq(ctx, v1093);
                            if let Some(v1098) = v1097 {
                                let v1101 = C::put_in_reg(ctx, v1094.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1102 = constructor_fcmeq0(ctx, v1101, v313);
                                let v1103 = constructor_not(ctx, v1102, v313);
                                let v1104 = C::value_reg(ctx, v1103);
                                let v1105 = C::output(ctx, v1104);
                                // Rule at src/isa/aarch64/lower.isle line 1850.
                                return Some(v1105);
                            }
                            let v1106 = &C::fcmp_zero_cond(ctx, v1093);
                            if let Some(v1107) = v1106 {
                                let v1101 = C::put_in_reg(ctx, v1094.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1108 = constructor_float_cmp_zero(ctx, v1107, v1101, v313);
                                let v1109 = C::value_reg(ctx, v1108);
                                let v1110 = C::output(ctx, v1109);
                                // Rule at src/isa/aarch64/lower.isle line 1856.
                                return Some(v1110);
                            }
                        }
                        let v1111 = C::zero_value(ctx, v1094.0);
                        if let Some(v1112) = v1111 {
                            let v1097 = &C::fcmp_zero_cond_not_eq(ctx, v1093);
                            if let Some(v1098) = v1097 {
                                let v1113 = C::put_in_reg(ctx, v1094.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1114 = constructor_fcmeq0(ctx, v1113, v313);
                                let v1115 = constructor_not(ctx, v1114, v313);
                                let v1116 = C::value_reg(ctx, v1115);
                                let v1117 = C::output(ctx, v1116);
                                // Rule at src/isa/aarch64/lower.isle line 1862.
                                return Some(v1117);
                            }
                            let v1106 = &C::fcmp_zero_cond(ctx, v1093);
                            if let Some(v1107) = v1106 {
                                let v1113 = C::put_in_reg(ctx, v1094.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1118 =
                                    constructor_float_cmp_zero_swap(ctx, v1107, v1113, v313);
                                let v1119 = C::value_reg(ctx, v1118);
                                let v1120 = C::output(ctx, v1119);
                                // Rule at src/isa/aarch64/lower.isle line 1868.
                                return Some(v1120);
                            }
                        }
                    }
                    let v1094 = C::unpack_value_array_2(ctx, v1092);
                    let v1121 = C::value_type(ctx, v1094.0);
                    let v1122 = C::ty_scalar_float(ctx, v1121);
                    if let Some(v1123) = v1122 {
                        let v1124 = &constructor_scalar_size(ctx, v1123);
                        let v1125 = C::put_in_reg(ctx, v1094.0);
                        let v1126 = C::put_in_reg(ctx, v1094.1);
                        let v1127 = &constructor_fpu_cmp(ctx, v1124, v1125, v1126);
                        let v1128 = &C::fp_cond_code(ctx, v1093);
                        let v1129 = &constructor_materialize_bool_result(ctx, v1128);
                        let v1130 = constructor_with_flags(ctx, v1127, v1129);
                        let v1131 = C::output(ctx, v1130);
                        // Rule at src/isa/aarch64/lower.isle line 1874.
                        return Some(v1131);
                    }
                    let v1132 = C::ty_vector_float(ctx, v1121);
                    if let Some(v1133) = v1132 {
                        let v1101 = C::put_in_reg(ctx, v1094.0);
                        let v1134 = C::put_in_reg(ctx, v1094.1);
                        let v1135 = &C::fp_cond_code(ctx, v1093);
                        let v1136 = constructor_vec_cmp(ctx, v1101, v1134, v1121, v1135);
                        let v1137 = constructor_output_reg(ctx, v1136);
                        // Rule at src/isa/aarch64/lower.isle line 1879.
                        return Some(v1137);
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1462,
            func_ref: v1463,
        } => {
            if let &Opcode::FuncAddr = v1462 {
                let v1464 = C::func_ref_data(ctx, v1463);
                let v1468 = C::box_external_name(ctx, v1464.1);
                let v1470 = constructor_load_ext_name(ctx, v1468, 0x0);
                let v1471 = constructor_output_reg(ctx, v1470);
                // Rule at src/isa/aarch64/lower.isle line 2238.
                return Some(v1471);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1712,
            args: ref v1713,
            code: ref v1714,
        } => {
            if let &Opcode::UaddOverflowTrap = v1712 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v27 = C::fits_in_64(ctx, v3);
                    if let Some(v28) = v27 {
                        let v1715 = C::unpack_value_array_2(ctx, v1713);
                        let v1718 = C::put_in_reg(ctx, v1715.0);
                        let v1719 = C::put_in_reg(ctx, v1715.1);
                        let v1720 = &constructor_add_with_flags_paired(ctx, v28, v1718, v1719);
                        let v1721 = constructor_trap_if_overflow(ctx, v1720, v1714);
                        let v1722 = constructor_output_reg(ctx, v1721);
                        // Rule at src/isa/aarch64/lower.isle line 2587.
                        return Some(v1722);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1138,
            args: ref v1139,
            cond: ref v1140,
        } => {
            if let &Opcode::Icmp = v1138 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1141 = C::unpack_value_array_2(ctx, v1139);
                        let v1146 = C::zero_value(ctx, v1141.1);
                        if let Some(v1147) = v1146 {
                            let v1144 = &C::icmp_zero_cond_not_eq(ctx, v1140);
                            if let Some(v1145) = v1144 {
                                let v1148 = C::put_in_reg(ctx, v1141.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1149 = constructor_cmeq0(ctx, v1148, v313);
                                let v1150 = constructor_not(ctx, v1149, v313);
                                let v1151 = C::value_reg(ctx, v1150);
                                let v1152 = C::output(ctx, v1151);
                                // Rule at src/isa/aarch64/lower.isle line 1885.
                                return Some(v1152);
                            }
                            let v1153 = &C::icmp_zero_cond(ctx, v1140);
                            if let Some(v1154) = v1153 {
                                let v1148 = C::put_in_reg(ctx, v1141.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1155 = constructor_int_cmp_zero(ctx, v1154, v1148, v313);
                                let v1156 = C::value_reg(ctx, v1155);
                                let v1157 = C::output(ctx, v1156);
                                // Rule at src/isa/aarch64/lower.isle line 1891.
                                return Some(v1157);
                            }
                        }
                        let v1158 = C::zero_value(ctx, v1141.0);
                        if let Some(v1159) = v1158 {
                            let v1144 = &C::icmp_zero_cond_not_eq(ctx, v1140);
                            if let Some(v1145) = v1144 {
                                let v1160 = C::put_in_reg(ctx, v1141.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1161 = constructor_cmeq0(ctx, v1160, v313);
                                let v1162 = constructor_not(ctx, v1161, v313);
                                let v1163 = C::value_reg(ctx, v1162);
                                let v1164 = C::output(ctx, v1163);
                                // Rule at src/isa/aarch64/lower.isle line 1897.
                                return Some(v1164);
                            }
                            let v1153 = &C::icmp_zero_cond(ctx, v1140);
                            if let Some(v1154) = v1153 {
                                let v1160 = C::put_in_reg(ctx, v1141.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1165 = constructor_int_cmp_zero_swap(ctx, v1154, v1160, v313);
                                let v1166 = C::value_reg(ctx, v1165);
                                let v1167 = C::output(ctx, v1166);
                                // Rule at src/isa/aarch64/lower.isle line 1903.
                                return Some(v1167);
                            }
                        }
                    }
                }
                let v1141 = C::unpack_value_array_2(ctx, v1139);
                let v1168 = C::value_type(ctx, v1141.0);
                let v1170 =
                    constructor_lower_icmp_into_reg(ctx, v1140, v1141.0, v1141.1, v1168, I8);
                let v1171 = C::output(ctx, v1170);
                // Rule at src/isa/aarch64/lower.isle line 1909.
                return Some(v1171);
            }
        }
        &InstructionData::Load {
            opcode: ref v1512,
            arg: v1513,
            flags: v1514,
            offset: v1515,
        } => {
            match v1512 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1517 = &C::amode(ctx, I8, v1513, v1516);
                                let v1518 = constructor_aarch64_uload8(ctx, v1517, v1514);
                                let v1519 = constructor_output_reg(ctx, v1518);
                                // Rule at src/isa/aarch64/lower.isle line 2281.
                                return Some(v1519);
                            }
                            I16 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1520 = &C::amode(ctx, I16, v1513, v1516);
                                let v1521 = constructor_aarch64_uload16(ctx, v1520, v1514);
                                let v1522 = constructor_output_reg(ctx, v1521);
                                // Rule at src/isa/aarch64/lower.isle line 2284.
                                return Some(v1522);
                            }
                            I32 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1523 = &C::amode(ctx, I32, v1513, v1516);
                                let v1524 = constructor_aarch64_uload32(ctx, v1523, v1514);
                                let v1525 = constructor_output_reg(ctx, v1524);
                                // Rule at src/isa/aarch64/lower.isle line 2287.
                                return Some(v1525);
                            }
                            I64 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1526 = &C::amode(ctx, I64, v1513, v1516);
                                let v1527 = constructor_aarch64_uload64(ctx, v1526, v1514);
                                let v1528 = constructor_output_reg(ctx, v1527);
                                // Rule at src/isa/aarch64/lower.isle line 2290.
                                return Some(v1528);
                            }
                            I128 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1535 = &C::pair_amode(ctx, v1513, v1516);
                                let v1536 = constructor_aarch64_loadp64(ctx, v1535, v1514);
                                let v1537 = C::output(ctx, v1536);
                                // Rule at src/isa/aarch64/lower.isle line 2302.
                                return Some(v1537);
                            }
                            R64 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1526 = &C::amode(ctx, I64, v1513, v1516);
                                let v1527 = constructor_aarch64_uload64(ctx, v1526, v1514);
                                let v1528 = constructor_output_reg(ctx, v1527);
                                // Rule at src/isa/aarch64/lower.isle line 2293.
                                return Some(v1528);
                            }
                            F32 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1529 = &C::amode(ctx, F32, v1513, v1516);
                                let v1530 = constructor_aarch64_fpuload32(ctx, v1529, v1514);
                                let v1531 = constructor_output_reg(ctx, v1530);
                                // Rule at src/isa/aarch64/lower.isle line 2296.
                                return Some(v1531);
                            }
                            F64 => {
                                let v1516 = C::offset32_to_u32(ctx, v1515);
                                let v1532 = &C::amode(ctx, F64, v1513, v1516);
                                let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                                let v1534 = constructor_output_reg(ctx, v1533);
                                // Rule at src/isa/aarch64/lower.isle line 2299.
                                return Some(v1534);
                            }
                            _ => {}
                        }
                        let v1538 = C::ty_vec64(ctx, v3);
                        if let Some(v1539) = v1538 {
                            let v1516 = C::offset32_to_u32(ctx, v1515);
                            let v1532 = &C::amode(ctx, F64, v1513, v1516);
                            let v1540 = constructor_aarch64_fpuload128(ctx, v1532, v1514);
                            let v1541 = constructor_output_reg(ctx, v1540);
                            // Rule at src/isa/aarch64/lower.isle line 2305.
                            return Some(v1541);
                        }
                        let v1546 = C::ty_dyn_vec64(ctx, v3);
                        if let Some(v1547) = v1546 {
                            let v1516 = C::offset32_to_u32(ctx, v1515);
                            let v1532 = &C::amode(ctx, F64, v1513, v1516);
                            let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                            let v1534 = constructor_output_reg(ctx, v1533);
                            // Rule at src/isa/aarch64/lower.isle line 2313.
                            return Some(v1534);
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v1516 = C::offset32_to_u32(ctx, v1515);
                            let v1543 = &C::amode(ctx, I8X16, v1513, v1516);
                            let v1544 = constructor_aarch64_fpuload128(ctx, v1543, v1514);
                            let v1545 = constructor_output_reg(ctx, v1544);
                            // Rule at src/isa/aarch64/lower.isle line 2309.
                            return Some(v1545);
                        }
                        let v1548 = C::ty_dyn_vec128(ctx, v3);
                        if let Some(v1549) = v1548 {
                            let v1516 = C::offset32_to_u32(ctx, v1515);
                            let v1543 = &C::amode(ctx, I8X16, v1513, v1516);
                            let v1544 = constructor_aarch64_fpuload128(ctx, v1543, v1514);
                            let v1545 = constructor_output_reg(ctx, v1544);
                            // Rule at src/isa/aarch64/lower.isle line 2317.
                            return Some(v1545);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1517 = &C::amode(ctx, I8, v1513, v1516);
                    let v1518 = constructor_aarch64_uload8(ctx, v1517, v1514);
                    let v1519 = constructor_output_reg(ctx, v1518);
                    // Rule at src/isa/aarch64/lower.isle line 2322.
                    return Some(v1519);
                }
                &Opcode::Sload8 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1517 = &C::amode(ctx, I8, v1513, v1516);
                    let v1550 = constructor_aarch64_sload8(ctx, v1517, v1514);
                    let v1551 = constructor_output_reg(ctx, v1550);
                    // Rule at src/isa/aarch64/lower.isle line 2325.
                    return Some(v1551);
                }
                &Opcode::Uload16 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1520 = &C::amode(ctx, I16, v1513, v1516);
                    let v1521 = constructor_aarch64_uload16(ctx, v1520, v1514);
                    let v1522 = constructor_output_reg(ctx, v1521);
                    // Rule at src/isa/aarch64/lower.isle line 2328.
                    return Some(v1522);
                }
                &Opcode::Sload16 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1520 = &C::amode(ctx, I16, v1513, v1516);
                    let v1552 = constructor_aarch64_sload16(ctx, v1520, v1514);
                    let v1553 = constructor_output_reg(ctx, v1552);
                    // Rule at src/isa/aarch64/lower.isle line 2331.
                    return Some(v1553);
                }
                &Opcode::Uload32 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1523 = &C::amode(ctx, I32, v1513, v1516);
                    let v1524 = constructor_aarch64_uload32(ctx, v1523, v1514);
                    let v1525 = constructor_output_reg(ctx, v1524);
                    // Rule at src/isa/aarch64/lower.isle line 2334.
                    return Some(v1525);
                }
                &Opcode::Sload32 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1523 = &C::amode(ctx, I32, v1513, v1516);
                    let v1554 = constructor_aarch64_sload32(ctx, v1523, v1514);
                    let v1555 = constructor_output_reg(ctx, v1554);
                    // Rule at src/isa/aarch64/lower.isle line 2337.
                    return Some(v1555);
                }
                &Opcode::Uload8x8 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1532 = &C::amode(ctx, F64, v1513, v1516);
                    let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                    let v1559 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1533,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1560 = constructor_output_reg(ctx, v1559);
                    // Rule at src/isa/aarch64/lower.isle line 2347.
                    return Some(v1560);
                }
                &Opcode::Sload8x8 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1532 = &C::amode(ctx, F64, v1513, v1516);
                    let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                    let v1557 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1533,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1558 = constructor_output_reg(ctx, v1557);
                    // Rule at src/isa/aarch64/lower.isle line 2341.
                    return Some(v1558);
                }
                &Opcode::Uload16x4 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1532 = &C::amode(ctx, F64, v1513, v1516);
                    let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                    let v1563 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1533,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1564 = constructor_output_reg(ctx, v1563);
                    // Rule at src/isa/aarch64/lower.isle line 2359.
                    return Some(v1564);
                }
                &Opcode::Sload16x4 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1532 = &C::amode(ctx, F64, v1513, v1516);
                    let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                    let v1561 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1533,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1562 = constructor_output_reg(ctx, v1561);
                    // Rule at src/isa/aarch64/lower.isle line 2353.
                    return Some(v1562);
                }
                &Opcode::Uload32x2 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1532 = &C::amode(ctx, F64, v1513, v1516);
                    let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                    let v1567 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1533,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1568 = constructor_output_reg(ctx, v1567);
                    // Rule at src/isa/aarch64/lower.isle line 2371.
                    return Some(v1568);
                }
                &Opcode::Sload32x2 => {
                    let v1516 = C::offset32_to_u32(ctx, v1515);
                    let v1532 = &C::amode(ctx, F64, v1513, v1516);
                    let v1533 = constructor_aarch64_fpuload64(ctx, v1532, v1514);
                    let v1565 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1533,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1566 = constructor_output_reg(ctx, v1565);
                    // Rule at src/isa/aarch64/lower.isle line 2365.
                    return Some(v1566);
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1293,
            arg: v1294,
            flags: v1295,
        } => {
            match v1293 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1620 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v1621) = v1620 {
                            let v1622 = C::value_type(ctx, v1294);
                            let v1623 = C::ty_float_or_vec(ctx, v1622);
                            if let Some(v1624) = v1623 {
                                let v1625 = constructor_output_value(ctx, v1294);
                                // Rule at src/isa/aarch64/lower.isle line 2458.
                                return Some(v1625);
                            }
                            let v1626 = C::ty_int_ref_scalar_64(ctx, v1622);
                            if let Some(v1627) = v1626 {
                                let v1296 = C::put_in_reg(ctx, v1294);
                                let v1628 = &constructor_scalar_size(ctx, v1622);
                                let v1629 = constructor_mov_to_fpu(ctx, v1296, v1628);
                                let v1630 = constructor_output_reg(ctx, v1629);
                                // Rule at src/isa/aarch64/lower.isle line 2462.
                                return Some(v1630);
                            }
                        }
                        let v1077 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1078) = v1077 {
                            let v1622 = C::value_type(ctx, v1294);
                            let v1631 = C::fits_in_64(ctx, v1622);
                            if let Some(v1632) = v1631 {
                                let v1633 = C::ty_float_or_vec(ctx, v1632);
                                if let Some(v1634) = v1633 {
                                    let v1296 = C::put_in_reg(ctx, v1294);
                                    let v1635 = &constructor_scalar_size(ctx, v3);
                                    let v1636 = constructor_mov_from_vec(ctx, v1296, 0x0, v1635);
                                    let v1637 = constructor_output_reg(ctx, v1636);
                                    // Rule at src/isa/aarch64/lower.isle line 2467.
                                    return Some(v1637);
                                }
                            }
                            let v1626 = C::ty_int_ref_scalar_64(ctx, v1622);
                            if let Some(v1627) = v1626 {
                                let v1625 = constructor_output_value(ctx, v1294);
                                // Rule at src/isa/aarch64/lower.isle line 2472.
                                return Some(v1625);
                            }
                        }
                        if v3 == I128 {
                            let v1622 = C::value_type(ctx, v1294);
                            if v1622 == I128 {
                                let v1625 = constructor_output_value(ctx, v1294);
                                // Rule at src/isa/aarch64/lower.isle line 2476.
                                return Some(v1625);
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1291 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1292) = v1291 {
                            let v1296 = C::put_in_reg(ctx, v1294);
                            let v1297 = constructor_load_acquire(ctx, v1292, v1295, v1296);
                            let v1298 = constructor_output_reg(ctx, v1297);
                            // Rule at src/isa/aarch64/lower.isle line 2040.
                            return Some(v1298);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1506,
            args: v1507,
        } => {
            if let &Opcode::Return = v1506 {
                let v1508 = C::value_list_slice(ctx, v1507);
                let v1509 = constructor_lower_return(ctx, v1508);
                // Rule at src/isa/aarch64/lower.isle line 2268.
                return Some(v1509);
            }
        }
        &InstructionData::NullAry { opcode: ref v11 } => {
            match v11 {
                &Opcode::Debugtrap => {
                    let v1460 = &constructor_brk(ctx);
                    let v1461 = constructor_side_effect(ctx, v1460);
                    // Rule at src/isa/aarch64/lower.isle line 2233.
                    return Some(v1461);
                }
                &Opcode::GetPinnedReg => {
                    let v1615 = C::preg_pinned(ctx);
                    let v1616 = constructor_mov_from_preg(ctx, v1615);
                    let v1617 = constructor_output_reg(ctx, v1616);
                    // Rule at src/isa/aarch64/lower.isle line 2449.
                    return Some(v1617);
                }
                &Opcode::GetFramePointer => {
                    let v1482 = constructor_aarch64_fp(ctx);
                    let v1483 = constructor_output_reg(ctx, v1482);
                    // Rule at src/isa/aarch64/lower.isle line 2248.
                    return Some(v1483);
                }
                &Opcode::GetStackPointer => {
                    let v1484 = constructor_aarch64_sp(ctx);
                    let v1485 = constructor_output_reg(ctx, v1484);
                    // Rule at src/isa/aarch64/lower.isle line 2251.
                    return Some(v1485);
                }
                &Opcode::GetReturnAddress => {
                    let v1486 = constructor_aarch64_link(ctx);
                    let v1487 = constructor_output_reg(ctx, v1486);
                    // Rule at src/isa/aarch64/lower.isle line 2254.
                    return Some(v1487);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v13 = constructor_imm(ctx, v3, &ImmExtend::Zero, 0x0);
                        let v14 = constructor_output_reg(ctx, v13);
                        // Rule at src/isa/aarch64/lower.isle line 24.
                        return Some(v14);
                    }
                }
                &Opcode::Nop => {
                    let v25 = C::invalid_reg(ctx);
                    let v26 = constructor_output_reg(ctx, v25);
                    // Rule at src/isa/aarch64/lower.isle line 39.
                    return Some(v26);
                }
                &Opcode::Fence => {
                    let v1449 = &constructor_aarch64_fence(ctx);
                    let v1450 = constructor_side_effect(ctx, v1449);
                    // Rule at src/isa/aarch64/lower.isle line 2216.
                    return Some(v1450);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v137,
            args: ref v138,
            imm: v139,
        } => {
            if let &Opcode::Shuffle = v137 {
                let v143 = C::shuffle_dup8_from_imm(ctx, v139);
                if let Some(v144) = v143 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v147 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size8x16, v144);
                    let v148 = constructor_output_reg(ctx, v147);
                    // Rule at src/isa/aarch64/lower.isle line 127.
                    return Some(v148);
                }
                let v149 = C::shuffle_dup16_from_imm(ctx, v139);
                if let Some(v150) = v149 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v152 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size16x8, v150);
                    let v153 = constructor_output_reg(ctx, v152);
                    // Rule at src/isa/aarch64/lower.isle line 129.
                    return Some(v153);
                }
                let v154 = C::shuffle_dup32_from_imm(ctx, v139);
                if let Some(v155) = v154 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v157 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size32x4, v155);
                    let v158 = constructor_output_reg(ctx, v157);
                    // Rule at src/isa/aarch64/lower.isle line 131.
                    return Some(v158);
                }
                let v159 = C::shuffle_dup64_from_imm(ctx, v139);
                if let Some(v160) = v159 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v162 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size64x2, v160);
                    let v163 = constructor_output_reg(ctx, v162);
                    // Rule at src/isa/aarch64/lower.isle line 133.
                    return Some(v163);
                }
                let v164 = C::vec_extract_imm4_from_immediate(ctx, v139);
                if let Some(v165) = v164 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v166 = C::put_in_reg(ctx, v140.1);
                    let v167 = constructor_vec_extract(ctx, v145, v166, v165);
                    let v168 = constructor_output_reg(ctx, v167);
                    // Rule at src/isa/aarch64/lower.isle line 152.
                    return Some(v168);
                }
                let v169 = C::u128_from_immediate(ctx, v139);
                if let Some(v170) = v169 {
                    match v170 {
                        0x8090A0B0C0D0E0F0001020304050607 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v217 = constructor_rev64(ctx, v145, &VectorSize::Size8x16);
                            let v218 = constructor_output_reg(ctx, v217);
                            // Rule at src/isa/aarch64/lower.isle line 228.
                            return Some(v218);
                        }
                        0x9080B0A0D0C0F0E0100030205040706 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v219 = constructor_rev64(ctx, v145, &VectorSize::Size16x8);
                            let v220 = constructor_output_reg(ctx, v219);
                            // Rule at src/isa/aarch64/lower.isle line 230.
                            return Some(v220);
                        }
                        0xB0A09080F0E0D0C0302010007060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v221 = constructor_rev64(ctx, v145, &VectorSize::Size32x4);
                            let v222 = constructor_output_reg(ctx, v221);
                            // Rule at src/isa/aarch64/lower.isle line 232.
                            return Some(v222);
                        }
                        0xC0D0E0F08090A0B0405060700010203 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v213 = constructor_rev32(ctx, v145, &VectorSize::Size8x16);
                            let v214 = constructor_output_reg(ctx, v213);
                            // Rule at src/isa/aarch64/lower.isle line 224.
                            return Some(v214);
                        }
                        0xD0C0F0E09080B0A0504070601000302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v215 = constructor_rev32(ctx, v145, &VectorSize::Size16x8);
                            let v216 = constructor_output_reg(ctx, v215);
                            // Rule at src/isa/aarch64/lower.isle line 226.
                            return Some(v216);
                        }
                        0xE0F0C0D0A0B08090607040502030001 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v211 = constructor_rev16(ctx, v145, &VectorSize::Size8x16);
                            let v212 = constructor_output_reg(ctx, v211);
                            // Rule at src/isa/aarch64/lower.isle line 222.
                            return Some(v212);
                        }
                        0x17071606150514041303120211011000 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v187 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v188 = constructor_output_reg(ctx, v187);
                            // Rule at src/isa/aarch64/lower.isle line 184.
                            return Some(v188);
                        }
                        0x17160706151405041312030211100100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v191 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v192 = constructor_output_reg(ctx, v191);
                            // Rule at src/isa/aarch64/lower.isle line 188.
                            return Some(v192);
                        }
                        0x17161514070605041312111003020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v195 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v196 = constructor_output_reg(ctx, v195);
                            // Rule at src/isa/aarch64/lower.isle line 192.
                            return Some(v196);
                        }
                        0x17161514131211100706050403020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v183 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size64x2);
                            let v184 = constructor_output_reg(ctx, v183);
                            // Rule at src/isa/aarch64/lower.isle line 177.
                            return Some(v184);
                        }
                        0x1B1A19180B0A09081312111003020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v207 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v208 = constructor_output_reg(ctx, v207);
                            // Rule at src/isa/aarch64/lower.isle line 210.
                            return Some(v208);
                        }
                        0x1B1A1918131211100B0A090803020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v179 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v180 = constructor_output_reg(ctx, v179);
                            // Rule at src/isa/aarch64/lower.isle line 173.
                            return Some(v180);
                        }
                        0x1D1C0D0C191809081514050411100100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v203 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v204 = constructor_output_reg(ctx, v203);
                            // Rule at src/isa/aarch64/lower.isle line 206.
                            return Some(v204);
                        }
                        0x1D1C1918151411100D0C090805040100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v175 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v176 = constructor_output_reg(ctx, v175);
                            // Rule at src/isa/aarch64/lower.isle line 169.
                            return Some(v176);
                        }
                        0x1E0E1C0C1A0A18081606140412021000 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v199 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v200 = constructor_output_reg(ctx, v199);
                            // Rule at src/isa/aarch64/lower.isle line 202.
                            return Some(v200);
                        }
                        0x1E1C1A18161412100E0C0A0806040200 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v171 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v172 = constructor_output_reg(ctx, v171);
                            // Rule at src/isa/aarch64/lower.isle line 165.
                            return Some(v172);
                        }
                        0x1F0F1D0D1B0B19091707150513031101 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v201 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v202 = constructor_output_reg(ctx, v201);
                            // Rule at src/isa/aarch64/lower.isle line 204.
                            return Some(v202);
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v189 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v190 = constructor_output_reg(ctx, v189);
                            // Rule at src/isa/aarch64/lower.isle line 186.
                            return Some(v190);
                        }
                        0x1F1D1B19171513110F0D0B0907050301 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v173 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v174 = constructor_output_reg(ctx, v173);
                            // Rule at src/isa/aarch64/lower.isle line 167.
                            return Some(v174);
                        }
                        0x1F1E0F0E1B1A0B0A1716070613120302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v205 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v206 = constructor_output_reg(ctx, v205);
                            // Rule at src/isa/aarch64/lower.isle line 208.
                            return Some(v206);
                        }
                        0x1F1E0F0E1D1C0D0C1B1A0B0A19180908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v193 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v194 = constructor_output_reg(ctx, v193);
                            // Rule at src/isa/aarch64/lower.isle line 190.
                            return Some(v194);
                        }
                        0x1F1E1B1A171613120F0E0B0A07060302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v177 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v178 = constructor_output_reg(ctx, v177);
                            // Rule at src/isa/aarch64/lower.isle line 171.
                            return Some(v178);
                        }
                        0x1F1E1D1C0F0E0D0C1716151407060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v209 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v210 = constructor_output_reg(ctx, v209);
                            // Rule at src/isa/aarch64/lower.isle line 212.
                            return Some(v210);
                        }
                        0x1F1E1D1C0F0E0D0C1B1A19180B0A0908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v197 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v198 = constructor_output_reg(ctx, v197);
                            // Rule at src/isa/aarch64/lower.isle line 194.
                            return Some(v198);
                        }
                        0x1F1E1D1C171615140F0E0D0C07060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v181 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v182 = constructor_output_reg(ctx, v181);
                            // Rule at src/isa/aarch64/lower.isle line 175.
                            return Some(v182);
                        }
                        0x1F1E1D1C1B1A19180F0E0D0C0B0A0908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v185 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size64x2);
                            let v186 = constructor_output_reg(ctx, v185);
                            // Rule at src/isa/aarch64/lower.isle line 179.
                            return Some(v186);
                        }
                        _ => {}
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v223 = constructor_constant_f128(ctx, v170);
                        let v140 = C::unpack_value_array_2(ctx, v138);
                        let v224 = C::put_in_reg(ctx, v140.0);
                        let v225 = C::put_in_reg(ctx, v140.1);
                        let v3 = C::value_type(ctx, v2);
                        let v226 = constructor_vec_tbl2(ctx, v224, v225, v223, v3);
                        let v227 = constructor_output_reg(ctx, v226);
                        // Rule at src/isa/aarch64/lower.isle line 235.
                        return Some(v227);
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1671,
            stack_slot: v1672,
            offset: v1673,
        } => {
            if let &Opcode::StackAddr = v1671 {
                let v1674 = constructor_compute_stack_addr(ctx, v1672, v1673);
                let v1675 = constructor_output_reg(ctx, v1674);
                // Rule at src/isa/aarch64/lower.isle line 2509.
                return Some(v1675);
            }
        }
        &InstructionData::Store {
            opcode: ref v1569,
            args: ref v1570,
            flags: v1571,
            offset: v1572,
        } => {
            match v1569 {
                &Opcode::Store => {
                    let v1573 = C::unpack_value_array_2(ctx, v1570);
                    let v1576 = C::value_type(ctx, v1573.0);
                    match v1576 {
                        I8 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1578 = &C::amode(ctx, I8, v1573.1, v1577);
                            let v1579 = C::put_in_reg(ctx, v1573.0);
                            let v1580 = &constructor_aarch64_store8(ctx, v1578, v1571, v1579);
                            let v1581 = constructor_side_effect(ctx, v1580);
                            // Rule at src/isa/aarch64/lower.isle line 2380.
                            return Some(v1581);
                        }
                        I16 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1582 = &C::amode(ctx, I16, v1573.1, v1577);
                            let v1579 = C::put_in_reg(ctx, v1573.0);
                            let v1583 = &constructor_aarch64_store16(ctx, v1582, v1571, v1579);
                            let v1584 = constructor_side_effect(ctx, v1583);
                            // Rule at src/isa/aarch64/lower.isle line 2384.
                            return Some(v1584);
                        }
                        I32 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1585 = &C::amode(ctx, I32, v1573.1, v1577);
                            let v1579 = C::put_in_reg(ctx, v1573.0);
                            let v1586 = &constructor_aarch64_store32(ctx, v1585, v1571, v1579);
                            let v1587 = constructor_side_effect(ctx, v1586);
                            // Rule at src/isa/aarch64/lower.isle line 2388.
                            return Some(v1587);
                        }
                        I64 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1588 = &C::amode(ctx, I64, v1573.1, v1577);
                            let v1579 = C::put_in_reg(ctx, v1573.0);
                            let v1589 = &constructor_aarch64_store64(ctx, v1588, v1571, v1579);
                            let v1590 = constructor_side_effect(ctx, v1589);
                            // Rule at src/isa/aarch64/lower.isle line 2392.
                            return Some(v1590);
                        }
                        I128 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1597 = &C::pair_amode(ctx, v1573.1, v1577);
                            let v1598 = C::put_in_regs(ctx, v1573.0);
                            let v1599 = C::value_regs_get(ctx, v1598, 0x0);
                            let v1600 = C::put_in_regs(ctx, v1573.0);
                            let v1601 = C::value_regs_get(ctx, v1600, 0x1);
                            let v1602 =
                                &constructor_aarch64_storep64(ctx, v1597, v1571, v1599, v1601);
                            let v1603 = constructor_side_effect(ctx, v1602);
                            // Rule at src/isa/aarch64/lower.isle line 2423.
                            return Some(v1603);
                        }
                        R64 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1588 = &C::amode(ctx, I64, v1573.1, v1577);
                            let v1579 = C::put_in_reg(ctx, v1573.0);
                            let v1589 = &constructor_aarch64_store64(ctx, v1588, v1571, v1579);
                            let v1590 = constructor_side_effect(ctx, v1589);
                            // Rule at src/isa/aarch64/lower.isle line 2396.
                            return Some(v1590);
                        }
                        F32 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1591 = &C::amode(ctx, F32, v1573.1, v1577);
                            let v1579 = C::put_in_reg(ctx, v1573.0);
                            let v1592 = &constructor_aarch64_fpustore32(ctx, v1591, v1571, v1579);
                            let v1593 = constructor_side_effect(ctx, v1592);
                            // Rule at src/isa/aarch64/lower.isle line 2414.
                            return Some(v1593);
                        }
                        F64 => {
                            let v1577 = C::offset32_to_u32(ctx, v1572);
                            let v1594 = &C::amode(ctx, F64, v1573.1, v1577);
                            let v1579 = C::put_in_reg(ctx, v1573.0);
                            let v1595 = &constructor_aarch64_fpustore64(ctx, v1594, v1571, v1579);
                            let v1596 = constructor_side_effect(ctx, v1595);
                            // Rule at src/isa/aarch64/lower.isle line 2418.
                            return Some(v1596);
                        }
                        _ => {}
                    }
                    let v1604 = C::ty_vec64(ctx, v1576);
                    if let Some(v1605) = v1604 {
                        let v1577 = C::offset32_to_u32(ctx, v1572);
                        let v1594 = &C::amode(ctx, F64, v1573.1, v1577);
                        let v1579 = C::put_in_reg(ctx, v1573.0);
                        let v1595 = &constructor_aarch64_fpustore64(ctx, v1594, v1571, v1579);
                        let v1596 = constructor_side_effect(ctx, v1595);
                        // Rule at src/isa/aarch64/lower.isle line 2430.
                        return Some(v1596);
                    }
                    let v1611 = C::ty_dyn_vec64(ctx, v1576);
                    if let Some(v1612) = v1611 {
                        let v1577 = C::offset32_to_u32(ctx, v1572);
                        let v1594 = &C::amode(ctx, F64, v1573.1, v1577);
                        let v1579 = C::put_in_reg(ctx, v1573.0);
                        let v1595 = &constructor_aarch64_fpustore64(ctx, v1594, v1571, v1579);
                        let v1596 = constructor_side_effect(ctx, v1595);
                        // Rule at src/isa/aarch64/lower.isle line 2438.
                        return Some(v1596);
                    }
                    let v1606 = C::ty_vec128(ctx, v1576);
                    if let Some(v1607) = v1606 {
                        let v1577 = C::offset32_to_u32(ctx, v1572);
                        let v1608 = &C::amode(ctx, I8X16, v1573.1, v1577);
                        let v1579 = C::put_in_reg(ctx, v1573.0);
                        let v1609 = &constructor_aarch64_fpustore128(ctx, v1608, v1571, v1579);
                        let v1610 = constructor_side_effect(ctx, v1609);
                        // Rule at src/isa/aarch64/lower.isle line 2434.
                        return Some(v1610);
                    }
                    let v1613 = C::ty_dyn_vec128(ctx, v1576);
                    if let Some(v1614) = v1613 {
                        let v1577 = C::offset32_to_u32(ctx, v1572);
                        let v1608 = &C::amode(ctx, I8X16, v1573.1, v1577);
                        let v1579 = C::put_in_reg(ctx, v1573.0);
                        let v1609 = &constructor_aarch64_fpustore128(ctx, v1608, v1571, v1579);
                        let v1610 = constructor_side_effect(ctx, v1609);
                        // Rule at src/isa/aarch64/lower.isle line 2442.
                        return Some(v1610);
                    }
                }
                &Opcode::Istore8 => {
                    let v1573 = C::unpack_value_array_2(ctx, v1570);
                    let v1577 = C::offset32_to_u32(ctx, v1572);
                    let v1578 = &C::amode(ctx, I8, v1573.1, v1577);
                    let v1579 = C::put_in_reg(ctx, v1573.0);
                    let v1580 = &constructor_aarch64_store8(ctx, v1578, v1571, v1579);
                    let v1581 = constructor_side_effect(ctx, v1580);
                    // Rule at src/isa/aarch64/lower.isle line 2401.
                    return Some(v1581);
                }
                &Opcode::Istore16 => {
                    let v1573 = C::unpack_value_array_2(ctx, v1570);
                    let v1577 = C::offset32_to_u32(ctx, v1572);
                    let v1582 = &C::amode(ctx, I16, v1573.1, v1577);
                    let v1579 = C::put_in_reg(ctx, v1573.0);
                    let v1583 = &constructor_aarch64_store16(ctx, v1582, v1571, v1579);
                    let v1584 = constructor_side_effect(ctx, v1583);
                    // Rule at src/isa/aarch64/lower.isle line 2405.
                    return Some(v1584);
                }
                &Opcode::Istore32 => {
                    let v1573 = C::unpack_value_array_2(ctx, v1570);
                    let v1577 = C::offset32_to_u32(ctx, v1572);
                    let v1585 = &C::amode(ctx, I32, v1573.1, v1577);
                    let v1579 = C::put_in_reg(ctx, v1573.0);
                    let v1586 = &constructor_aarch64_store32(ctx, v1585, v1571, v1579);
                    let v1587 = constructor_side_effect(ctx, v1586);
                    // Rule at src/isa/aarch64/lower.isle line 2409.
                    return Some(v1587);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1299,
            args: ref v1300,
            flags: v1301,
        } => {
            if let &Opcode::AtomicStore = v1299 {
                let v1302 = C::unpack_value_array_2(ctx, v1300);
                let v1305 = C::value_type(ctx, v1302.0);
                let v1306 = C::valid_atomic_transaction(ctx, v1305);
                if let Some(v1307) = v1306 {
                    let v1308 = C::put_in_reg(ctx, v1302.0);
                    let v1309 = C::put_in_reg(ctx, v1302.1);
                    let v1310 = &constructor_store_release(ctx, v1307, v1301, v1308, v1309);
                    let v1311 = constructor_side_effect(ctx, v1310);
                    // Rule at src/isa/aarch64/lower.isle line 2045.
                    return Some(v1311);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v462,
            args: ref v463,
        } => {
            match v462 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v464 = C::unpack_value_array_3(ctx, v463);
                        let v1176 = C::maybe_uextend(ctx, v464.0);
                        if let Some(v1177) = v1176 {
                            let v1178 = C::def_inst(ctx, v1177);
                            if let Some(v1179) = v1178 {
                                let v1180 = &C::inst_data(ctx, v1179);
                                match v1180 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1194,
                                        args: ref v1195,
                                        cond: ref v1196,
                                    } => {
                                        if let &Opcode::Fcmp = v1194 {
                                            let v1201 = &C::fp_cond_code(ctx, v1196);
                                            let v1197 = C::unpack_value_array_2(ctx, v1195);
                                            let v1200 = C::value_type(ctx, v1197.0);
                                            let v1202 = &constructor_scalar_size(ctx, v1200);
                                            let v1203 = C::put_in_reg(ctx, v1197.0);
                                            let v1204 = C::put_in_reg(ctx, v1197.1);
                                            let v1205 =
                                                &constructor_fpu_cmp(ctx, v1202, v1203, v1204);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1206 = constructor_lower_select(
                                                ctx, v1205, v1201, v3, v464.1, v464.2,
                                            );
                                            let v1207 = C::output(ctx, v1206);
                                            // Rule at src/isa/aarch64/lower.isle line 1937.
                                            return Some(v1207);
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1181,
                                        args: ref v1182,
                                        cond: ref v1183,
                                    } => {
                                        if let &Opcode::Icmp = v1181 {
                                            let v1184 = C::unpack_value_array_2(ctx, v1182);
                                            let v1187 = C::value_type(ctx, v1184.0);
                                            let v1188 = &constructor_lower_icmp_into_flags(
                                                ctx, v1183, v1184.0, v1184.1, v1187,
                                            );
                                            let v1189 = &constructor_flags_and_cc_flags(ctx, v1188);
                                            let v1190 = &constructor_flags_and_cc_cc(ctx, v1188);
                                            let v1191 = &C::cond_code(ctx, v1190);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1192 = constructor_lower_select(
                                                ctx, v1189, v1191, v3, v464.1, v464.2,
                                            );
                                            let v1193 = C::output(ctx, v1192);
                                            // Rule at src/isa/aarch64/lower.isle line 1924.
                                            return Some(v1193);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1208 = C::value_type(ctx, v464.0);
                        if v1208 == I8 {
                            let v1085 = C::put_in_reg(ctx, v464.0);
                            let v1210 = C::u64_into_imm_logic(ctx, I32, 0xFF);
                            let v1211 = &constructor_tst_imm(ctx, I32, v1085, v1210);
                            let v3 = C::value_type(ctx, v2);
                            let v1212 =
                                constructor_lower_select(ctx, v1211, &Cond::Ne, v3, v464.1, v464.2);
                            let v1213 = C::output(ctx, v1212);
                            // Rule at src/isa/aarch64/lower.isle line 1946.
                            return Some(v1213);
                        }
                        let v1214 = C::fits_in_32(ctx, v1208);
                        if let Some(v1215) = v1214 {
                            let v1216 = constructor_put_in_reg_zext32(ctx, v464.0);
                            let v1217 = C::zero_reg(ctx);
                            let v1218 = &constructor_cmp(ctx, &OperandSize::Size32, v1216, v1217);
                            let v3 = C::value_type(ctx, v2);
                            let v1219 =
                                constructor_lower_select(ctx, v1218, &Cond::Ne, v3, v464.1, v464.2);
                            let v1220 = C::output(ctx, v1219);
                            // Rule at src/isa/aarch64/lower.isle line 1952.
                            return Some(v1220);
                        }
                        let v1221 = C::fits_in_64(ctx, v1208);
                        if let Some(v1222) = v1221 {
                            let v1223 = constructor_put_in_reg_zext64(ctx, v464.0);
                            let v1217 = C::zero_reg(ctx);
                            let v1224 = &constructor_cmp(ctx, &OperandSize::Size64, v1223, v1217);
                            let v3 = C::value_type(ctx, v2);
                            let v1225 =
                                constructor_lower_select(ctx, v1224, &Cond::Ne, v3, v464.1, v464.2);
                            let v1226 = C::output(ctx, v1225);
                            // Rule at src/isa/aarch64/lower.isle line 1958.
                            return Some(v1226);
                        }
                        if v1208 == I128 {
                            let v1227 = C::put_in_regs(ctx, v464.0);
                            let v1228 = C::value_regs_get(ctx, v1227, 0x0);
                            let v1229 = C::value_regs_get(ctx, v1227, 0x1);
                            let v1230 = constructor_orr(ctx, I64, v1228, v1229);
                            let v888 = C::zero_reg(ctx);
                            let v1231 = &constructor_cmp(ctx, &OperandSize::Size64, v1230, v888);
                            let v3 = C::value_type(ctx, v2);
                            let v1232 =
                                constructor_lower_select(ctx, v1231, &Cond::Ne, v3, v464.1, v464.2);
                            let v1233 = C::output(ctx, v1232);
                            // Rule at src/isa/aarch64/lower.isle line 1964.
                            return Some(v1233);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v464 = C::unpack_value_array_3(ctx, v463);
                        let v1176 = C::maybe_uextend(ctx, v464.0);
                        if let Some(v1177) = v1176 {
                            let v1178 = C::def_inst(ctx, v1177);
                            if let Some(v1179) = v1178 {
                                let v1180 = &C::inst_data(ctx, v1179);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1181,
                                    args: ref v1182,
                                    cond: ref v1183,
                                } = v1180
                                {
                                    if let &Opcode::Icmp = v1181 {
                                        let v1184 = C::unpack_value_array_2(ctx, v1182);
                                        let v1187 = C::value_type(ctx, v1184.0);
                                        let v1188 = &constructor_lower_icmp_into_flags(
                                            ctx, v1183, v1184.0, v1184.1, v1187,
                                        );
                                        let v1189 = &constructor_flags_and_cc_flags(ctx, v1188);
                                        let v1190 = &constructor_flags_and_cc_cc(ctx, v1188);
                                        let v1191 = &C::cond_code(ctx, v1190);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1192 = constructor_lower_select(
                                            ctx, v1189, v1191, v3, v464.1, v464.2,
                                        );
                                        let v1234 = &constructor_csdb(ctx);
                                        let v1235 = constructor_side_effect(ctx, v1234);
                                        let v1236 = C::output(ctx, v1192);
                                        // Rule at src/isa/aarch64/lower.isle line 1975.
                                        return Some(v1236);
                                    }
                                }
                            }
                        }
                        let v1208 = C::value_type(ctx, v464.0);
                        let v1221 = C::fits_in_64(ctx, v1208);
                        if let Some(v1222) = v1221 {
                            let v1223 = constructor_put_in_reg_zext64(ctx, v464.0);
                            let v1217 = C::zero_reg(ctx);
                            let v1224 = &constructor_cmp(ctx, &OperandSize::Size64, v1223, v1217);
                            let v3 = C::value_type(ctx, v2);
                            let v1225 =
                                constructor_lower_select(ctx, v1224, &Cond::Ne, v3, v464.1, v464.2);
                            let v1226 = C::output(ctx, v1225);
                            // Rule at src/isa/aarch64/lower.isle line 1989.
                            return Some(v1226);
                        }
                        if v1208 == I128 {
                            let v1227 = C::put_in_regs(ctx, v464.0);
                            let v1228 = C::value_regs_get(ctx, v1227, 0x0);
                            let v1229 = C::value_regs_get(ctx, v1227, 0x1);
                            let v1230 = constructor_orr(ctx, I64, v1228, v1229);
                            let v888 = C::zero_reg(ctx);
                            let v1231 = &constructor_cmp(ctx, &OperandSize::Size64, v1230, v888);
                            let v3 = C::value_type(ctx, v2);
                            let v1232 =
                                constructor_lower_select(ctx, v1231, &Cond::Ne, v3, v464.1, v464.2);
                            let v1233 = C::output(ctx, v1232);
                            // Rule at src/isa/aarch64/lower.isle line 1995.
                            return Some(v1233);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v464 = C::unpack_value_array_3(ctx, v463);
                            let v1085 = C::put_in_reg(ctx, v464.0);
                            let v1086 = C::put_in_reg(ctx, v464.1);
                            let v1087 = C::put_in_reg(ctx, v464.2);
                            let v1088 = constructor_bsl(ctx, v576, v1085, v1086, v1087);
                            let v1089 = constructor_output_reg(ctx, v1088);
                            // Rule at src/isa/aarch64/lower.isle line 1836.
                            return Some(v1089);
                        }
                        let v1077 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1078) = v1077 {
                            let v464 = C::unpack_value_array_3(ctx, v463);
                            let v1079 = C::put_in_reg(ctx, v464.1);
                            let v469 = C::put_in_reg(ctx, v464.0);
                            let v1080 = constructor_and_reg(ctx, v3, v1079, v469);
                            let v471 = C::put_in_reg(ctx, v464.2);
                            let v1081 = C::put_in_reg(ctx, v464.0);
                            let v1082 = constructor_bic(ctx, v3, v471, v1081);
                            let v1083 = constructor_orr(ctx, v3, v1080, v1082);
                            let v1084 = constructor_output_reg(ctx, v1083);
                            // Rule at src/isa/aarch64/lower.isle line 1830.
                            return Some(v1084);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v475 = &constructor_vector_size(ctx, v3);
                            let v464 = C::unpack_value_array_3(ctx, v463);
                            let v476 = constructor_lower_fmla(
                                ctx,
                                &VecALUModOp::Fmla,
                                v464.0,
                                v464.1,
                                v464.2,
                                v475,
                            );
                            let v477 = constructor_output_reg(ctx, v476);
                            // Rule at src/isa/aarch64/lower.isle line 520.
                            return Some(v477);
                        }
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v389 = &constructor_scalar_size(ctx, v349);
                            let v464 = C::unpack_value_array_3(ctx, v463);
                            let v469 = C::put_in_reg(ctx, v464.0);
                            let v470 = C::put_in_reg(ctx, v464.1);
                            let v471 = C::put_in_reg(ctx, v464.2);
                            let v472 =
                                constructor_fpu_rrrr(ctx, &FPUOp3::MAdd, v389, v469, v470, v471);
                            let v473 = constructor_output_reg(ctx, v472);
                            // Rule at src/isa/aarch64/lower.isle line 516.
                            return Some(v473);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1651,
            args: ref v1652,
            imm: v1653,
        } => {
            if let &Opcode::Insertlane = v1651 {
                let v1654 = C::unpack_value_array_2(ctx, v1652);
                let v1658 = C::value_type(ctx, v1654.1);
                let v1659 = C::ty_int(ctx, v1658);
                if let Some(v1660) = v1659 {
                    let v1662 = C::put_in_reg(ctx, v1654.0);
                    let v1663 = C::put_in_reg(ctx, v1654.1);
                    let v1657 = C::value_type(ctx, v1654.0);
                    let v1664 = &constructor_vector_size(ctx, v1657);
                    let v1661 = C::u8_from_uimm8(ctx, v1653);
                    let v1665 = constructor_mov_to_vec(ctx, v1662, v1663, v1661, v1664);
                    let v1666 = constructor_output_reg(ctx, v1665);
                    // Rule at src/isa/aarch64/lower.isle line 2497.
                    return Some(v1666);
                }
                let v1667 = C::ty_scalar_float(ctx, v1658);
                if let Some(v1668) = v1667 {
                    let v1662 = C::put_in_reg(ctx, v1654.0);
                    let v1663 = C::put_in_reg(ctx, v1654.1);
                    let v1657 = C::value_type(ctx, v1654.0);
                    let v1664 = &constructor_vector_size(ctx, v1657);
                    let v1661 = C::u8_from_uimm8(ctx, v1653);
                    let v1669 = constructor_mov_vec_elem(ctx, v1662, v1663, v1661, 0x0, v1664);
                    let v1670 = constructor_output_reg(ctx, v1669);
                    // Rule at src/isa/aarch64/lower.isle line 2502.
                    return Some(v1670);
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1172,
            code: ref v1173,
        } => {
            match v1172 {
                &Opcode::Trap => {
                    let v1174 = &constructor_udf(ctx, v1173);
                    let v1175 = constructor_side_effect(ctx, v1174);
                    // Rule at src/isa/aarch64/lower.isle line 1914.
                    return Some(v1175);
                }
                &Opcode::ResumableTrap => {
                    let v1174 = &constructor_udf(ctx, v1173);
                    let v1175 = constructor_side_effect(ctx, v1174);
                    // Rule at src/isa/aarch64/lower.isle line 1919.
                    return Some(v1175);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v230,
            arg: v231,
        } => {
            match v230 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v727 = C::def_inst(ctx, v231);
                        if let Some(v728) = v727 {
                            let v729 = &C::inst_data(ctx, v728);
                            match v729 {
                                &InstructionData::Load {
                                    opcode: ref v1283,
                                    arg: v1284,
                                    flags: v1285,
                                    offset: v1286,
                                } => {
                                    if let &Opcode::Load = v1283 {
                                        let v742 = C::is_sinkable_inst(ctx, v231);
                                        if let Some(v743) = v742 {
                                            let v3 = C::value_type(ctx, v2);
                                            let v1287 = C::lane_type(ctx, v3);
                                            let v1288 =
                                                constructor_sink_load_into_addr(ctx, v1287, v743);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v1289 = constructor_ld1r(ctx, v1288, v313, v1285);
                                            let v1290 = constructor_output_reg(ctx, v1289);
                                            // Rule at src/isa/aarch64/lower.isle line 2034.
                                            return Some(v1290);
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v1273,
                                    arg: v1274,
                                } => {
                                    if let &Opcode::Ireduce = v1273 {
                                        let v1275 = C::def_inst(ctx, v1274);
                                        if let Some(v1276) = v1275 {
                                            let v1277 = &C::inst_data(ctx, v1276);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1278,
                                                imm: v1279,
                                            } = v1277
                                            {
                                                if let &Opcode::Iconst = v1278 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v475 = &constructor_vector_size(ctx, v3);
                                                    let v1280 = C::u64_from_imm64(ctx, v1279);
                                                    let v1281 =
                                                        constructor_splat_const(ctx, v1280, v475);
                                                    let v1282 = constructor_output_reg(ctx, v1281);
                                                    // Rule at src/isa/aarch64/lower.isle line 2031.
                                                    return Some(v1282);
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v1257,
                                    imm: v1258,
                                } => {
                                    if let &Opcode::F32const = v1257 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v475 = &constructor_vector_size(ctx, v3);
                                        let v1259 = C::u32_from_ieee32(ctx, v1258);
                                        let v1260 = C::u32_as_u64(ctx, v1259);
                                        let v1261 = constructor_splat_const(ctx, v1260, v475);
                                        let v1262 = constructor_output_reg(ctx, v1261);
                                        // Rule at src/isa/aarch64/lower.isle line 2022.
                                        return Some(v1262);
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v1263,
                                    imm: v1264,
                                } => {
                                    if let &Opcode::F64const = v1263 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v475 = &constructor_vector_size(ctx, v3);
                                        let v1265 = C::u64_from_ieee64(ctx, v1264);
                                        let v1266 = constructor_splat_const(ctx, v1265, v475);
                                        let v1267 = constructor_output_reg(ctx, v1266);
                                        // Rule at src/isa/aarch64/lower.isle line 2025.
                                        return Some(v1267);
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1268,
                                    imm: v1269,
                                } => {
                                    if let &Opcode::Iconst = v1268 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v475 = &constructor_vector_size(ctx, v3);
                                        let v1270 = C::u64_from_imm64(ctx, v1269);
                                        let v1271 = constructor_splat_const(ctx, v1270, v475);
                                        let v1272 = constructor_output_reg(ctx, v1271);
                                        // Rule at src/isa/aarch64/lower.isle line 2028.
                                        return Some(v1272);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v232 = C::value_type(ctx, v231);
                        let v1249 = C::ty_int_ref_scalar_64(ctx, v232);
                        if let Some(v1250) = v1249 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v3 = C::value_type(ctx, v2);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v1251 = constructor_vec_dup(ctx, v241, v313);
                            let v1252 = constructor_output_reg(ctx, v1251);
                            // Rule at src/isa/aarch64/lower.isle line 2015.
                            return Some(v1252);
                        }
                        let v1253 = C::ty_scalar_float(ctx, v232);
                        if let Some(v1254) = v1253 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v3 = C::value_type(ctx, v2);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v1255 = constructor_vec_dup_from_fpu(ctx, v241, v313, 0x0);
                            let v1256 = constructor_output_reg(ctx, v1255);
                            // Rule at src/isa/aarch64/lower.isle line 2019.
                            return Some(v1256);
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1618 = &constructor_write_pinned_reg(ctx, v241);
                    let v1619 = constructor_side_effect(ctx, v1618);
                    // Rule at src/isa/aarch64/lower.isle line 2452.
                    return Some(v1619);
                }
                &Opcode::VanyTrue => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v232 = C::value_type(ctx, v231);
                    let v294 = &constructor_vanytrue(ctx, v241, v232);
                    let v295 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                    let v296 = constructor_with_flags(ctx, v294, v295);
                    let v297 = C::output(ctx, v296);
                    // Rule at src/isa/aarch64/lower.isle line 315.
                    return Some(v297);
                }
                &Opcode::VallTrue => {
                    let v232 = C::value_type(ctx, v231);
                    let v255 = C::multi_lane(ctx, v232);
                    if let Some(v256) = v255 {
                        match v256.0 {
                            0x20 => {
                                if v256.1 == 0x2 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v267 = constructor_mov_from_vec(
                                        ctx,
                                        v241,
                                        0x0,
                                        &ScalarSize::Size64,
                                    );
                                    let v269 = C::zero_reg(ctx);
                                    let v271 = &constructor_cmp_rr_shift(
                                        ctx,
                                        &OperandSize::Size64,
                                        v269,
                                        v267,
                                        0x20,
                                    );
                                    let v273 = C::u8_into_uimm5(ctx, 0x0);
                                    let v276 = C::nzcv(ctx, false, true, false, false);
                                    let v278 = &constructor_ccmp_imm(
                                        ctx,
                                        &OperandSize::Size32,
                                        v267,
                                        v273,
                                        v276,
                                        &Cond::Ne,
                                    );
                                    let v279 = constructor_with_flags(ctx, v271, v278);
                                    let v280 = C::output(ctx, v279);
                                    // Rule at src/isa/aarch64/lower.isle line 289.
                                    return Some(v280);
                                }
                            }
                            0x40 => {
                                if v256.1 == 0x2 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v259 = constructor_cmeq0(ctx, v241, &VectorSize::Size64x2);
                                    let v260 =
                                        constructor_addp(ctx, v259, v259, &VectorSize::Size64x2);
                                    let v261 =
                                        &constructor_fpu_cmp(ctx, &ScalarSize::Size64, v260, v260);
                                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                                    let v264 = constructor_with_flags(ctx, v261, v263);
                                    let v265 = C::output(ctx, v264);
                                    // Rule at src/isa/aarch64/lower.isle line 283.
                                    return Some(v265);
                                }
                            }
                            _ => {}
                        }
                    }
                    let v281 = C::lane_fits_in_32(ctx, v232);
                    if let Some(v282) = v281 {
                        let v283 = C::not_vec32x2(ctx, v282);
                        if let Some(v284) = v283 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v286 = &constructor_vector_size(ctx, v282);
                            let v287 = constructor_vec_lanes(ctx, &VecLanesOp::Uminv, v241, v286);
                            let v288 =
                                constructor_mov_from_vec(ctx, v287, 0x0, &ScalarSize::Size64);
                            let v289 = C::u8_into_imm12(ctx, 0x0);
                            let v290 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v288, v289);
                            let v291 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                            let v292 = constructor_with_flags(ctx, v290, v291);
                            let v293 = C::output(ctx, v292);
                            // Rule at src/isa/aarch64/lower.isle line 306.
                            return Some(v293);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v232 = C::value_type(ctx, v231);
                    match v232 {
                        I8X16 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1677 =
                                constructor_sshr_vec_imm(ctx, v241, 0x7, &VectorSize::Size8x16);
                            let v1679 =
                                constructor_constant_f128(ctx, 0x80402010080402018040201008040201);
                            let v1680 =
                                constructor_and_vec(ctx, v1677, v1679, &VectorSize::Size8x16);
                            let v1682 = constructor_vec_extract(ctx, v1680, v1680, 0x8);
                            let v1683 = constructor_zip1(ctx, v1680, v1682, &VectorSize::Size8x16);
                            let v1684 = constructor_addv(ctx, v1683, &VectorSize::Size16x8);
                            let v1685 =
                                constructor_mov_from_vec(ctx, v1684, 0x0, &ScalarSize::Size16);
                            let v1686 = constructor_output_reg(ctx, v1685);
                            // Rule at src/isa/aarch64/lower.isle line 2523.
                            return Some(v1686);
                        }
                        I16X8 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1688 =
                                constructor_sshr_vec_imm(ctx, v241, 0xF, &VectorSize::Size16x8);
                            let v1690 =
                                constructor_constant_f128(ctx, 0x800040002000100008000400020001);
                            let v1691 =
                                constructor_and_vec(ctx, v1688, v1690, &VectorSize::Size16x8);
                            let v1692 = constructor_addv(ctx, v1691, &VectorSize::Size16x8);
                            let v1693 =
                                constructor_mov_from_vec(ctx, v1692, 0x0, &ScalarSize::Size16);
                            let v1694 = constructor_output_reg(ctx, v1693);
                            // Rule at src/isa/aarch64/lower.isle line 2547.
                            return Some(v1694);
                        }
                        I32X4 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1696 =
                                constructor_sshr_vec_imm(ctx, v241, 0x1F, &VectorSize::Size32x4);
                            let v1698 = constructor_constant_f128(ctx, 0x8000000040000000200000001);
                            let v1699 =
                                constructor_and_vec(ctx, v1696, v1698, &VectorSize::Size32x4);
                            let v1700 = constructor_addv(ctx, v1699, &VectorSize::Size32x4);
                            let v1701 =
                                constructor_mov_from_vec(ctx, v1700, 0x0, &ScalarSize::Size32);
                            let v1702 = constructor_output_reg(ctx, v1701);
                            // Rule at src/isa/aarch64/lower.isle line 2560.
                            return Some(v1702);
                        }
                        I64X2 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1703 =
                                constructor_mov_from_vec(ctx, v241, 0x1, &ScalarSize::Size64);
                            let v1704 = C::put_in_reg(ctx, v231);
                            let v1705 =
                                constructor_mov_from_vec(ctx, v1704, 0x0, &ScalarSize::Size64);
                            let v770 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1706 = constructor_lsr_imm(ctx, I64, v1703, v770);
                            let v1021 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1707 = constructor_lsr_imm(ctx, I64, v1705, v1021);
                            let v1708 = C::lshl_from_u64(ctx, I64, 0x1);
                            let v1709 = v1708?;
                            let v1710 = constructor_add_shift(ctx, I64, v1707, v1706, v1709);
                            let v1711 = constructor_output_reg(ctx, v1710);
                            // Rule at src/isa/aarch64/lower.isle line 2573.
                            return Some(v1711);
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v590 = constructor_value_regs_zero(ctx);
                            let v591 = C::put_in_regs(ctx, v231);
                            let v592 = constructor_sub_i128(ctx, v590, v591);
                            let v593 = C::output(ctx, v592);
                            // Rule at src/isa/aarch64/lower.isle line 751.
                            return Some(v593);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v586 = C::zero_reg(ctx);
                            let v587 = C::put_in_reg(ctx, v231);
                            let v588 = constructor_sub(ctx, v28, v586, v587);
                            let v589 = constructor_output_reg(ctx, v588);
                            // Rule at src/isa/aarch64/lower.isle line 747.
                            return Some(v589);
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v594 = &constructor_vector_size(ctx, v576);
                            let v595 = constructor_neg(ctx, v241, v594);
                            let v596 = constructor_output_reg(ctx, v595);
                            // Rule at src/isa/aarch64/lower.isle line 755.
                            return Some(v596);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v316 = constructor_abs(ctx, &OperandSize::Size64, v241);
                            let v317 = constructor_output_reg(ctx, v316);
                            // Rule at src/isa/aarch64/lower.isle line 345.
                            return Some(v317);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v320 = constructor_put_in_reg_sext32(ctx, v231);
                            let v321 = constructor_abs(ctx, &OperandSize::Size32, v320);
                            let v322 = constructor_output_reg(ctx, v321);
                            // Rule at src/isa/aarch64/lower.isle line 348.
                            return Some(v322);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v314 = constructor_vec_abs(ctx, v241, v313);
                            let v315 = constructor_output_reg(ctx, v314);
                            // Rule at src/isa/aarch64/lower.isle line 342.
                            return Some(v315);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v727 = C::def_inst(ctx, v231);
                        if let Some(v728) = v727 {
                            let v729 = &C::inst_data(ctx, v728);
                            if let &InstructionData::Binary {
                                opcode: ref v781,
                                args: ref v782,
                            } = v729
                            {
                                match v781 {
                                    &Opcode::Bxor => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v783 = C::unpack_value_array_2(ctx, v782);
                                            let v808 = constructor_i128_alu_bitop(
                                                ctx,
                                                &ALUOp::EorNot,
                                                I64,
                                                v783.0,
                                                v783.1,
                                            );
                                            let v809 = C::output(ctx, v808);
                                            // Rule at src/isa/aarch64/lower.isle line 1223.
                                            return Some(v809);
                                        }
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v783 = C::unpack_value_array_2(ctx, v782);
                                            let v806 = constructor_alu_rs_imm_logic(
                                                ctx,
                                                &ALUOp::EorNot,
                                                v28,
                                                v783.0,
                                                v783.1,
                                            );
                                            let v807 = constructor_output_reg(ctx, v806);
                                            // Rule at src/isa/aarch64/lower.isle line 1221.
                                            return Some(v807);
                                        }
                                    }
                                    &Opcode::Ishl => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v783 = C::unpack_value_array_2(ctx, v782);
                                            let v786 = C::def_inst(ctx, v783.1);
                                            if let Some(v787) = v786 {
                                                let v788 = &C::inst_data(ctx, v787);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v789,
                                                    imm: v790,
                                                } = v788
                                                {
                                                    if let &Opcode::Iconst = v789 {
                                                        let v791 =
                                                            C::lshl_from_imm64(ctx, v28, v790);
                                                        if let Some(v792) = v791 {
                                                            let v586 = C::zero_reg(ctx);
                                                            let v793 = C::put_in_reg(ctx, v783.0);
                                                            let v794 = constructor_orr_not_shift(
                                                                ctx, v28, v586, v793, v792,
                                                            );
                                                            let v795 =
                                                                constructor_output_reg(ctx, v794);
                                                            // Rule at src/isa/aarch64/lower.isle line 1202.
                                                            return Some(v795);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v233 = C::put_in_regs(ctx, v231);
                            let v234 = C::value_regs_get(ctx, v233, 0x0);
                            let v796 = C::value_regs_get(ctx, v233, 0x1);
                            let v797 = C::zero_reg(ctx);
                            let v798 = constructor_orr_not(ctx, I64, v797, v234);
                            let v799 = C::zero_reg(ctx);
                            let v800 = constructor_orr_not(ctx, I64, v799, v796);
                            let v801 = C::value_regs(ctx, v798, v800);
                            let v802 = C::output(ctx, v801);
                            // Rule at src/isa/aarch64/lower.isle line 1208.
                            return Some(v802);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v586 = C::zero_reg(ctx);
                            let v587 = C::put_in_reg(ctx, v231);
                            let v779 = constructor_orr_not(ctx, v28, v586, v587);
                            let v780 = constructor_output_reg(ctx, v779);
                            // Rule at src/isa/aarch64/lower.isle line 1197.
                            return Some(v780);
                        }
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v594 = &constructor_vector_size(ctx, v576);
                            let v803 = constructor_not(ctx, v241, v594);
                            let v804 = constructor_output_reg(ctx, v803);
                            // Rule at src/isa/aarch64/lower.isle line 1217.
                            return Some(v804);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v973 = constructor_rbit(ctx, I32, v241);
                                let v975 = C::imm_shift_from_u8(ctx, 0x18);
                                let v976 = constructor_lsr_imm(ctx, I32, v973, v975);
                                let v977 = constructor_output_reg(ctx, v976);
                                // Rule at src/isa/aarch64/lower.isle line 1652.
                                return Some(v977);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v973 = constructor_rbit(ctx, I32, v241);
                                let v979 = C::imm_shift_from_u8(ctx, 0x10);
                                let v980 = constructor_lsr_imm(ctx, I32, v973, v979);
                                let v981 = constructor_output_reg(ctx, v980);
                                // Rule at src/isa/aarch64/lower.isle line 1658.
                                return Some(v981);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v982 = constructor_rbit(ctx, I64, v234);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v983 = constructor_rbit(ctx, I64, v236);
                                let v984 = C::value_regs(ctx, v983, v982);
                                let v985 = C::output(ctx, v984);
                                // Rule at src/isa/aarch64/lower.isle line 1661.
                                return Some(v985);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v986 = constructor_rbit(ctx, v3, v241);
                        let v987 = constructor_output_reg(ctx, v986);
                        // Rule at src/isa/aarch64/lower.isle line 1667.
                        return Some(v987);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                let v988 = constructor_a64_clz(ctx, I32, v252);
                                let v989 = C::u8_into_imm12(ctx, 0x18);
                                let v990 = constructor_sub_imm(ctx, I32, v988, v989);
                                let v991 = constructor_output_reg(ctx, v990);
                                // Rule at src/isa/aarch64/lower.isle line 1673.
                                return Some(v991);
                            }
                            I16 => {
                                let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                let v988 = constructor_a64_clz(ctx, I32, v252);
                                let v992 = C::u8_into_imm12(ctx, 0x10);
                                let v993 = constructor_sub_imm(ctx, I32, v988, v992);
                                let v994 = constructor_output_reg(ctx, v993);
                                // Rule at src/isa/aarch64/lower.isle line 1676.
                                return Some(v994);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v995 = constructor_lower_clz128(ctx, v233);
                                let v996 = C::output(ctx, v995);
                                // Rule at src/isa/aarch64/lower.isle line 1679.
                                return Some(v996);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v997 = constructor_a64_clz(ctx, v3, v241);
                        let v998 = constructor_output_reg(ctx, v997);
                        // Rule at src/isa/aarch64/lower.isle line 1682.
                        return Some(v998);
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                let v1013 = constructor_a64_cls(ctx, I32, v320);
                                let v989 = C::u8_into_imm12(ctx, 0x18);
                                let v1014 = constructor_sub_imm(ctx, I32, v1013, v989);
                                let v1015 = constructor_output_reg(ctx, v1014);
                                // Rule at src/isa/aarch64/lower.isle line 1720.
                                return Some(v1015);
                            }
                            I16 => {
                                let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                let v1013 = constructor_a64_cls(ctx, I32, v320);
                                let v992 = C::u8_into_imm12(ctx, 0x10);
                                let v1016 = constructor_sub_imm(ctx, I32, v1013, v992);
                                let v1017 = constructor_output_reg(ctx, v1016);
                                // Rule at src/isa/aarch64/lower.isle line 1723.
                                return Some(v1017);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v796 = C::value_regs_get(ctx, v233, 0x1);
                                let v1018 = constructor_a64_cls(ctx, I64, v234);
                                let v1019 = constructor_a64_cls(ctx, I64, v796);
                                let v1020 = constructor_eon(ctx, I64, v796, v234);
                                let v1021 = C::imm_shift_from_u8(ctx, 0x3F);
                                let v1022 = constructor_lsr_imm(ctx, I64, v1020, v1021);
                                let v1023 = constructor_madd(ctx, I64, v1018, v1022, v1022);
                                let v1024 = C::u8_into_imm12(ctx, 0x3F);
                                let v1025 = &constructor_cmp64_imm(ctx, v1019, v1024);
                                let v1026 = C::zero_reg(ctx);
                                let v1027 = &constructor_csel(ctx, &Cond::Eq, v1023, v1026);
                                let v1028 = constructor_with_flags_reg(ctx, v1025, v1027);
                                let v1029 = constructor_add(ctx, I64, v1028, v1019);
                                let v1030 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1031 = C::value_regs(ctx, v1029, v1030);
                                let v1032 = C::output(ctx, v1031);
                                // Rule at src/isa/aarch64/lower.isle line 1735.
                                return Some(v1032);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1033 = constructor_a64_cls(ctx, v3, v241);
                        let v1034 = constructor_output_reg(ctx, v1033);
                        // Rule at src/isa/aarch64/lower.isle line 1749.
                        return Some(v1034);
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v973 = constructor_rbit(ctx, I32, v241);
                                let v1000 = C::u64_into_imm_logic(ctx, I32, 0x800000);
                                let v1001 = constructor_orr_imm(ctx, I32, v973, v1000);
                                let v1002 = constructor_a64_clz(ctx, I32, v1001);
                                let v1003 = constructor_output_reg(ctx, v1002);
                                // Rule at src/isa/aarch64/lower.isle line 1703.
                                return Some(v1003);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v973 = constructor_rbit(ctx, I32, v241);
                                let v1005 = C::u64_into_imm_logic(ctx, I32, 0x8000);
                                let v1006 = constructor_orr_imm(ctx, I32, v973, v1005);
                                let v1007 = constructor_a64_clz(ctx, I32, v1006);
                                let v1008 = constructor_output_reg(ctx, v1007);
                                // Rule at src/isa/aarch64/lower.isle line 1706.
                                return Some(v1008);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v982 = constructor_rbit(ctx, I64, v234);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v983 = constructor_rbit(ctx, I64, v236);
                                let v984 = C::value_regs(ctx, v983, v982);
                                let v1009 = constructor_lower_clz128(ctx, v984);
                                let v1010 = C::output(ctx, v1009);
                                // Rule at src/isa/aarch64/lower.isle line 1709.
                                return Some(v1010);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v986 = constructor_rbit(ctx, v3, v241);
                        let v1011 = constructor_a64_clz(ctx, v3, v986);
                        let v1012 = constructor_output_reg(ctx, v1011);
                        // Rule at src/isa/aarch64/lower.isle line 1715.
                        return Some(v1012);
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1036 = constructor_a64_rev16(ctx, I16, v241);
                                let v1037 = constructor_output_reg(ctx, v1036);
                                // Rule at src/isa/aarch64/lower.isle line 1754.
                                return Some(v1037);
                            }
                            I32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1038 = constructor_a64_rev32(ctx, I32, v241);
                                let v1039 = constructor_output_reg(ctx, v1038);
                                // Rule at src/isa/aarch64/lower.isle line 1757.
                                return Some(v1039);
                            }
                            I64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1040 = constructor_a64_rev64(ctx, I64, v241);
                                let v1041 = constructor_output_reg(ctx, v1040);
                                // Rule at src/isa/aarch64/lower.isle line 1760.
                                return Some(v1041);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v1042 = C::value_regs_get(ctx, v233, 0x1);
                                let v1043 = constructor_a64_rev64(ctx, I64, v1042);
                                let v1044 = C::put_in_regs(ctx, v231);
                                let v1045 = C::value_regs_get(ctx, v1044, 0x0);
                                let v1046 = constructor_a64_rev64(ctx, I64, v1045);
                                let v1047 = C::value_regs(ctx, v1043, v1046);
                                let v1048 = C::output(ctx, v1047);
                                // Rule at src/isa/aarch64/lower.isle line 1763.
                                return Some(v1048);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1051 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1053 = constructor_vec_cnt(ctx, v1051, &VectorSize::Size8x8);
                                let v1055 =
                                    constructor_mov_from_vec(ctx, v1053, 0x0, &ScalarSize::Size8);
                                let v1056 = constructor_output_reg(ctx, v1055);
                                // Rule at src/isa/aarch64/lower.isle line 1793.
                                return Some(v1056);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1051 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1053 = constructor_vec_cnt(ctx, v1051, &VectorSize::Size8x8);
                                let v1057 =
                                    constructor_addp(ctx, v1053, v1053, &VectorSize::Size8x8);
                                let v1058 =
                                    constructor_mov_from_vec(ctx, v1057, 0x0, &ScalarSize::Size8);
                                let v1059 = constructor_output_reg(ctx, v1058);
                                // Rule at src/isa/aarch64/lower.isle line 1799.
                                return Some(v1059);
                            }
                            I32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1051 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1053 = constructor_vec_cnt(ctx, v1051, &VectorSize::Size8x8);
                                let v1060 = constructor_addv(ctx, v1053, &VectorSize::Size8x8);
                                let v1061 =
                                    constructor_mov_from_vec(ctx, v1060, 0x0, &ScalarSize::Size8);
                                let v1062 = constructor_output_reg(ctx, v1061);
                                // Rule at src/isa/aarch64/lower.isle line 1805.
                                return Some(v1062);
                            }
                            I64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v248 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size64);
                                let v1063 = constructor_vec_cnt(ctx, v248, &VectorSize::Size8x8);
                                let v1064 = constructor_addv(ctx, v1063, &VectorSize::Size8x8);
                                let v1065 =
                                    constructor_mov_from_vec(ctx, v1064, 0x0, &ScalarSize::Size8);
                                let v1066 = constructor_output_reg(ctx, v1065);
                                // Rule at src/isa/aarch64/lower.isle line 1811.
                                return Some(v1066);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v1067 = constructor_mov_to_fpu(ctx, v234, &ScalarSize::Size64);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v1068 = constructor_mov_to_vec(
                                    ctx,
                                    v1067,
                                    v236,
                                    0x1,
                                    &VectorSize::Size64x2,
                                );
                                let v1069 = constructor_vec_cnt(ctx, v1068, &VectorSize::Size8x16);
                                let v1070 = constructor_addv(ctx, v1069, &VectorSize::Size8x16);
                                let v1071 =
                                    constructor_mov_from_vec(ctx, v1070, 0x0, &ScalarSize::Size8);
                                let v1072 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1073 = C::value_regs(ctx, v1071, v1072);
                                let v1074 = C::output(ctx, v1073);
                                // Rule at src/isa/aarch64/lower.isle line 1817.
                                return Some(v1074);
                            }
                            I8X16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1075 = constructor_vec_cnt(ctx, v241, &VectorSize::Size8x16);
                                let v1076 = constructor_output_reg(ctx, v1075);
                                // Rule at src/isa/aarch64/lower.isle line 1825.
                                return Some(v1076);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v405 = &constructor_scalar_size(ctx, v349);
                            let v406 = constructor_fpu_rr(ctx, &FPUOp1::Sqrt, v241, v405);
                            let v407 = constructor_output_reg(ctx, v406);
                            // Rule at src/isa/aarch64/lower.isle line 441.
                            return Some(v407);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v402 = constructor_vec_misc(ctx, &VecMisc2::Fsqrt, v241, v313);
                            let v403 = constructor_output_reg(ctx, v402);
                            // Rule at src/isa/aarch64/lower.isle line 438.
                            return Some(v403);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v405 = &constructor_scalar_size(ctx, v349);
                            let v412 = constructor_fpu_rr(ctx, &FPUOp1::Neg, v241, v405);
                            let v413 = constructor_output_reg(ctx, v412);
                            // Rule at src/isa/aarch64/lower.isle line 449.
                            return Some(v413);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v409 = constructor_vec_misc(ctx, &VecMisc2::Fneg, v241, v313);
                            let v410 = constructor_output_reg(ctx, v409);
                            // Rule at src/isa/aarch64/lower.isle line 446.
                            return Some(v410);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v405 = &constructor_scalar_size(ctx, v349);
                            let v418 = constructor_fpu_rr(ctx, &FPUOp1::Abs, v241, v405);
                            let v419 = constructor_output_reg(ctx, v418);
                            // Rule at src/isa/aarch64/lower.isle line 457.
                            return Some(v419);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v415 = constructor_vec_misc(ctx, &VecMisc2::Fabs, v241, v313);
                            let v416 = constructor_output_reg(ctx, v415);
                            // Rule at src/isa/aarch64/lower.isle line 454.
                            return Some(v416);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v430 = constructor_fpu_round(ctx, &FpuRoundMode::Plus32, v241);
                                let v431 = constructor_output_reg(ctx, v430);
                                // Rule at src/isa/aarch64/lower.isle line 475.
                                return Some(v431);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v433 = constructor_fpu_round(ctx, &FpuRoundMode::Plus64, v241);
                                let v434 = constructor_output_reg(ctx, v433);
                                // Rule at src/isa/aarch64/lower.isle line 478.
                                return Some(v434);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v427 = constructor_vec_misc(ctx, &VecMisc2::Frintp, v241, v313);
                            let v428 = constructor_output_reg(ctx, v427);
                            // Rule at src/isa/aarch64/lower.isle line 472.
                            return Some(v428);
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v439 = constructor_fpu_round(ctx, &FpuRoundMode::Minus32, v241);
                                let v440 = constructor_output_reg(ctx, v439);
                                // Rule at src/isa/aarch64/lower.isle line 486.
                                return Some(v440);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v442 = constructor_fpu_round(ctx, &FpuRoundMode::Minus64, v241);
                                let v443 = constructor_output_reg(ctx, v442);
                                // Rule at src/isa/aarch64/lower.isle line 489.
                                return Some(v443);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v436 = constructor_vec_misc(ctx, &VecMisc2::Frintm, v241, v313);
                            let v437 = constructor_output_reg(ctx, v436);
                            // Rule at src/isa/aarch64/lower.isle line 483.
                            return Some(v437);
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v448 = constructor_fpu_round(ctx, &FpuRoundMode::Zero32, v241);
                                let v449 = constructor_output_reg(ctx, v448);
                                // Rule at src/isa/aarch64/lower.isle line 497.
                                return Some(v449);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v451 = constructor_fpu_round(ctx, &FpuRoundMode::Zero64, v241);
                                let v452 = constructor_output_reg(ctx, v451);
                                // Rule at src/isa/aarch64/lower.isle line 500.
                                return Some(v452);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v445 = constructor_vec_misc(ctx, &VecMisc2::Frintz, v241, v313);
                            let v446 = constructor_output_reg(ctx, v445);
                            // Rule at src/isa/aarch64/lower.isle line 494.
                            return Some(v446);
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v457 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest32, v241);
                                let v458 = constructor_output_reg(ctx, v457);
                                // Rule at src/isa/aarch64/lower.isle line 508.
                                return Some(v458);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v460 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest64, v241);
                                let v461 = constructor_output_reg(ctx, v460);
                                // Rule at src/isa/aarch64/lower.isle line 511.
                                return Some(v461);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v454 = constructor_vec_misc(ctx, &VecMisc2::Frintn, v241, v313);
                            let v455 = constructor_output_reg(ctx, v454);
                            // Rule at src/isa/aarch64/lower.isle line 505.
                            return Some(v455);
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v232 = C::value_type(ctx, v231);
                    let v1451 = &constructor_operand_size(ctx, v232);
                    let v587 = C::put_in_reg(ctx, v231);
                    let v1452 = C::u8_into_imm12(ctx, 0x0);
                    let v1453 = &constructor_cmp_imm(ctx, v1451, v587, v1452);
                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1454 = constructor_with_flags(ctx, v1453, v263);
                    let v1455 = C::output(ctx, v1454);
                    // Rule at src/isa/aarch64/lower.isle line 2221.
                    return Some(v1455);
                }
                &Opcode::IsInvalid => {
                    let v232 = C::value_type(ctx, v231);
                    let v1451 = &constructor_operand_size(ctx, v232);
                    let v587 = C::put_in_reg(ctx, v231);
                    let v1456 = C::u8_into_imm12(ctx, 0x1);
                    let v1457 = &constructor_cmn_imm(ctx, v1451, v587, v1456);
                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1458 = constructor_with_flags(ctx, v1457, v263);
                    let v1459 = C::output(ctx, v1458);
                    // Rule at src/isa/aarch64/lower.isle line 2227.
                    return Some(v1459);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32X4 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v243 = constructor_fpu_extend(ctx, v241, &ScalarSize::Size32);
                                let v244 = constructor_output_reg(ctx, v243);
                                // Rule at src/isa/aarch64/lower.isle line 260.
                                return Some(v244);
                            }
                            F64X2 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v246 = constructor_fpu_extend(ctx, v241, &ScalarSize::Size64);
                                let v247 = constructor_output_reg(ctx, v246);
                                // Rule at src/isa/aarch64/lower.isle line 263.
                                return Some(v247);
                            }
                            _ => {}
                        }
                    }
                    let v232 = C::value_type(ctx, v231);
                    if v232 == I64 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v248 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size64);
                        let v249 = constructor_output_reg(ctx, v248);
                        // Rule at src/isa/aarch64/lower.isle line 266.
                        return Some(v249);
                    }
                    let v250 = C::int_fits_in_32(ctx, v232);
                    if let Some(v251) = v250 {
                        let v252 = constructor_put_in_reg_zext32(ctx, v231);
                        let v253 = constructor_mov_to_fpu(ctx, v252, &ScalarSize::Size32);
                        let v254 = constructor_output_reg(ctx, v253);
                        // Rule at src/isa/aarch64/lower.isle line 269.
                        return Some(v254);
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v233 = C::put_in_regs(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v232 = C::value_type(ctx, v231);
                        let v1049 = constructor_lower_bmask(ctx, v3, v232, v233);
                        let v1050 = C::output(ctx, v1049);
                        // Rule at src/isa/aarch64/lower.isle line 1771.
                        return Some(v1050);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1077 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1078) = v1077 {
                            let v233 = C::put_in_regs(ctx, v231);
                            let v234 = C::value_regs_get(ctx, v233, 0x0);
                            let v1090 = constructor_output_reg(ctx, v234);
                            // Rule at src/isa/aarch64/lower.isle line 1844.
                            return Some(v1090);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v1431 = &constructor_lane_size(ctx, v3);
                        let v1432 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, false, v1431);
                        let v1433 = constructor_output_reg(ctx, v1432);
                        // Rule at src/isa/aarch64/lower.isle line 2186.
                        return Some(v1433);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1434 = &constructor_lane_size(ctx, v576);
                            let v1435 =
                                constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, true, v1434);
                            let v1436 = constructor_output_reg(ctx, v1435);
                            // Rule at src/isa/aarch64/lower.isle line 2191.
                            return Some(v1436);
                        }
                        let v1245 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1246) = v1245 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1438 = constructor_fpu_move_from_vec(
                                ctx,
                                v241,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1439 = &constructor_lane_size(ctx, v3);
                            let v1440 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Sxtl,
                                v1438,
                                false,
                                v1439,
                            );
                            let v1441 = constructor_output_reg(ctx, v1440);
                            // Rule at src/isa/aarch64/lower.isle line 2194.
                            return Some(v1441);
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1431 = &constructor_lane_size(ctx, v3);
                        let v1874 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, true, v1431);
                        let v1875 = constructor_output_reg(ctx, v1874);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 104.
                        return Some(v1875);
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v1431 = &constructor_lane_size(ctx, v3);
                        let v1443 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, false, v1431);
                        let v1444 = constructor_output_reg(ctx, v1443);
                        // Rule at src/isa/aarch64/lower.isle line 2201.
                        return Some(v1444);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::ty_vec128(ctx, v3);
                        if let Some(v576) = v575 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1434 = &constructor_lane_size(ctx, v576);
                            let v1445 =
                                constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, true, v1434);
                            let v1446 = constructor_output_reg(ctx, v1445);
                            // Rule at src/isa/aarch64/lower.isle line 2206.
                            return Some(v1446);
                        }
                        let v1245 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1246) = v1245 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1438 = constructor_fpu_move_from_vec(
                                ctx,
                                v241,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1439 = &constructor_lane_size(ctx, v3);
                            let v1447 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Uxtl,
                                v1438,
                                false,
                                v1439,
                            );
                            let v1448 = constructor_output_reg(ctx, v1447);
                            // Rule at src/isa/aarch64/lower.isle line 2209.
                            return Some(v1448);
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1431 = &constructor_lane_size(ctx, v3);
                        let v1876 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, true, v1431);
                        let v1877 = constructor_output_reg(ctx, v1876);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 109.
                        return Some(v1877);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v727 = C::def_inst(ctx, v231);
                        if let Some(v728) = v727 {
                            let v729 = &C::inst_data(ctx, v728);
                            match v729 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v730,
                                    arg: v731,
                                    imm: v732,
                                } => {
                                    if let &Opcode::Extractlane = v730 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v735 = C::put_in_reg(ctx, v731);
                                            let v733 = C::value_type(ctx, v731);
                                            let v736 = &constructor_lane_size(ctx, v733);
                                            let v734 = C::u8_from_uimm8(ctx, v732);
                                            let v737 =
                                                constructor_mov_from_vec(ctx, v735, v734, v736);
                                            let v738 = constructor_output_reg(ctx, v737);
                                            // Rule at src/isa/aarch64/lower.isle line 1118.
                                            return Some(v738);
                                        }
                                        if v3 == I128 {
                                            let v735 = C::put_in_reg(ctx, v731);
                                            let v733 = C::value_type(ctx, v731);
                                            let v736 = &constructor_lane_size(ctx, v733);
                                            let v734 = C::u8_from_uimm8(ctx, v732);
                                            let v737 =
                                                constructor_mov_from_vec(ctx, v735, v734, v736);
                                            let v751 =
                                                constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                            let v752 = C::value_regs(ctx, v737, v751);
                                            let v753 = C::output(ctx, v752);
                                            // Rule at src/isa/aarch64/lower.isle line 1137.
                                            return Some(v753);
                                        }
                                    }
                                }
                                &InstructionData::LoadNoOffset {
                                    opcode: ref v739,
                                    arg: v740,
                                    flags: v741,
                                } => {
                                    if let &Opcode::AtomicLoad = v739 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v742 = C::is_sinkable_inst(ctx, v231);
                                            if let Some(v743) = v742 {
                                                let v744 = constructor_sink_atomic_load(ctx, v743);
                                                let v232 = C::value_type(ctx, v231);
                                                let v745 =
                                                    constructor_load_acquire(ctx, v232, v741, v744);
                                                let v746 = constructor_output_reg(ctx, v745);
                                                // Rule at src/isa/aarch64/lower.isle line 1125.
                                                return Some(v746);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v747 = constructor_put_in_reg_zext64(ctx, v231);
                            let v748 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                            let v749 = C::value_regs(ctx, v747, v748);
                            let v750 = C::output(ctx, v749);
                            // Rule at src/isa/aarch64/lower.isle line 1132.
                            return Some(v750);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v232 = C::value_type(ctx, v231);
                            let v723 = C::ty_bits(ctx, v232);
                            let v724 = C::ty_bits(ctx, v28);
                            let v725 = constructor_extend(ctx, v241, false, v723, v724);
                            let v726 = constructor_output_reg(ctx, v725);
                            // Rule at src/isa/aarch64/lower.isle line 1113.
                            return Some(v726);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v727 = C::def_inst(ctx, v231);
                            if let Some(v728) = v727 {
                                let v729 = &C::inst_data(ctx, v728);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v730,
                                    arg: v731,
                                    imm: v732,
                                } = v729
                                {
                                    if let &Opcode::Extractlane = v730 {
                                        let v733 = C::value_type(ctx, v731);
                                        let v766 = C::not_i64x2(ctx, v733);
                                        if let Some(v767) = v766 {
                                            let v735 = C::put_in_reg(ctx, v731);
                                            let v756 = &constructor_vector_size(ctx, v733);
                                            let v768 = &constructor_size_from_ty(ctx, I64);
                                            let v734 = C::u8_from_uimm8(ctx, v732);
                                            let v769 = constructor_mov_from_vec_signed(
                                                ctx, v735, v734, v756, v768,
                                            );
                                            let v770 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v771 = constructor_asr_imm(ctx, I64, v769, v770);
                                            let v772 = C::value_regs(ctx, v769, v771);
                                            let v773 = C::output(ctx, v772);
                                            // Rule at src/isa/aarch64/lower.isle line 1170.
                                            return Some(v773);
                                        }
                                        if v733 == I64X2 {
                                            let v735 = C::put_in_reg(ctx, v731);
                                            let v734 = C::u8_from_uimm8(ctx, v732);
                                            let v774 = constructor_mov_from_vec(
                                                ctx,
                                                v735,
                                                v734,
                                                &ScalarSize::Size64,
                                            );
                                            let v775 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v776 = constructor_asr_imm(ctx, I64, v774, v775);
                                            let v777 = C::value_regs(ctx, v774, v776);
                                            let v778 = C::output(ctx, v777);
                                            // Rule at src/isa/aarch64/lower.isle line 1181.
                                            return Some(v778);
                                        }
                                    }
                                }
                            }
                            let v760 = constructor_put_in_reg_sext64(ctx, v231);
                            let v762 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v763 = constructor_asr_imm(ctx, I64, v760, v762);
                            let v764 = C::value_regs(ctx, v760, v763);
                            let v765 = C::output(ctx, v764);
                            // Rule at src/isa/aarch64/lower.isle line 1160.
                            return Some(v765);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v727 = C::def_inst(ctx, v231);
                            if let Some(v728) = v727 {
                                let v729 = &C::inst_data(ctx, v728);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v730,
                                    arg: v731,
                                    imm: v732,
                                } = v729
                                {
                                    if let &Opcode::Extractlane = v730 {
                                        let v735 = C::put_in_reg(ctx, v731);
                                        let v733 = C::value_type(ctx, v731);
                                        let v756 = &constructor_vector_size(ctx, v733);
                                        let v757 = &constructor_size_from_ty(ctx, v28);
                                        let v734 = C::u8_from_uimm8(ctx, v732);
                                        let v758 = constructor_mov_from_vec_signed(
                                            ctx, v735, v734, v756, v757,
                                        );
                                        let v759 = constructor_output_reg(ctx, v758);
                                        // Rule at src/isa/aarch64/lower.isle line 1151.
                                        return Some(v759);
                                    }
                                }
                            }
                            let v241 = C::put_in_reg(ctx, v231);
                            let v232 = C::value_type(ctx, v231);
                            let v723 = C::ty_bits(ctx, v232);
                            let v724 = C::ty_bits(ctx, v28);
                            let v754 = constructor_extend(ctx, v241, true, v723, v724);
                            let v755 = constructor_output_reg(ctx, v754);
                            // Rule at src/isa/aarch64/lower.isle line 1146.
                            return Some(v755);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v421 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt32To64,
                                v241,
                                &ScalarSize::Size32,
                            );
                            let v422 = constructor_output_reg(ctx, v421);
                            // Rule at src/isa/aarch64/lower.isle line 462.
                            return Some(v422);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v424 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt64To32,
                                v241,
                                &ScalarSize::Size64,
                            );
                            let v425 = constructor_output_reg(ctx, v424);
                            // Rule at src/isa/aarch64/lower.isle line 467.
                            return Some(v425);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1399 = constructor_fcvtn(ctx, v241, &ScalarSize::Size32);
                    let v1400 = constructor_output_reg(ctx, v1399);
                    // Rule at src/isa/aarch64/lower.isle line 2135.
                    return Some(v1400);
                }
                &Opcode::FvpromoteLow => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1805 = constructor_vec_rr_long(ctx, &VecRRLongOp::Fcvtl32, v241, false);
                    let v1806 = constructor_output_reg(ctx, v1805);
                    // Rule at src/isa/aarch64/lower.isle line 2844.
                    return Some(v1806);
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v485 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v241,
                                        false,
                                        F32,
                                        I64,
                                    );
                                    let v486 = constructor_output_reg(ctx, v485);
                                    // Rule at src/isa/aarch64/lower.isle line 583.
                                    return Some(v486);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v482 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v241,
                                        false,
                                        F32,
                                        v319,
                                    );
                                    let v483 = constructor_output_reg(ctx, v482);
                                    // Rule at src/isa/aarch64/lower.isle line 580.
                                    return Some(v483);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v492 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v241,
                                        false,
                                        F64,
                                        I64,
                                    );
                                    let v493 = constructor_output_reg(ctx, v492);
                                    // Rule at src/isa/aarch64/lower.isle line 589.
                                    return Some(v493);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v489 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v241,
                                        false,
                                        F64,
                                        v319,
                                    );
                                    let v490 = constructor_output_reg(ctx, v489);
                                    // Rule at src/isa/aarch64/lower.isle line 586.
                                    return Some(v490);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v498 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v241,
                                        true,
                                        F32,
                                        I64,
                                    );
                                    let v499 = constructor_output_reg(ctx, v498);
                                    // Rule at src/isa/aarch64/lower.isle line 597.
                                    return Some(v499);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v495 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v241,
                                        true,
                                        F32,
                                        v319,
                                    );
                                    let v496 = constructor_output_reg(ctx, v495);
                                    // Rule at src/isa/aarch64/lower.isle line 594.
                                    return Some(v496);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v504 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v241,
                                        true,
                                        F64,
                                        I64,
                                    );
                                    let v505 = constructor_output_reg(ctx, v504);
                                    // Rule at src/isa/aarch64/lower.isle line 603.
                                    return Some(v505);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v501 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v241,
                                        true,
                                        F64,
                                        v319,
                                    );
                                    let v502 = constructor_output_reg(ctx, v501);
                                    // Rule at src/isa/aarch64/lower.isle line 600.
                                    return Some(v502);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v543 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v241,
                                        false,
                                        I64,
                                    );
                                    let v544 = constructor_output_reg(ctx, v543);
                                    // Rule at src/isa/aarch64/lower.isle line 657.
                                    return Some(v544);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v541 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v241,
                                        false,
                                        v319,
                                    );
                                    let v542 = constructor_output_reg(ctx, v541);
                                    // Rule at src/isa/aarch64/lower.isle line 654.
                                    return Some(v542);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v547 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v241,
                                        false,
                                        I64,
                                    );
                                    let v548 = constructor_output_reg(ctx, v547);
                                    // Rule at src/isa/aarch64/lower.isle line 663.
                                    return Some(v548);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v545 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v241,
                                        false,
                                        v319,
                                    );
                                    let v546 = constructor_output_reg(ctx, v545);
                                    // Rule at src/isa/aarch64/lower.isle line 660.
                                    return Some(v546);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v539 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v241,
                                                v313,
                                            );
                                            let v540 = constructor_output_reg(ctx, v539);
                                            // Rule at src/isa/aarch64/lower.isle line 648.
                                            return Some(v540);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v539 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v241,
                                                v313,
                                            );
                                            let v540 = constructor_output_reg(ctx, v539);
                                            // Rule at src/isa/aarch64/lower.isle line 651.
                                            return Some(v540);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v554 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v241,
                                        true,
                                        I64,
                                    );
                                    let v555 = constructor_output_reg(ctx, v554);
                                    // Rule at src/isa/aarch64/lower.isle line 677.
                                    return Some(v555);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v552 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v241,
                                        true,
                                        v319,
                                    );
                                    let v553 = constructor_output_reg(ctx, v552);
                                    // Rule at src/isa/aarch64/lower.isle line 674.
                                    return Some(v553);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v558 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v241,
                                        true,
                                        I64,
                                    );
                                    let v559 = constructor_output_reg(ctx, v558);
                                    // Rule at src/isa/aarch64/lower.isle line 683.
                                    return Some(v559);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v556 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v241,
                                        true,
                                        v319,
                                    );
                                    let v557 = constructor_output_reg(ctx, v556);
                                    // Rule at src/isa/aarch64/lower.isle line 680.
                                    return Some(v557);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v550 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v241,
                                                v313,
                                            );
                                            let v551 = constructor_output_reg(ctx, v550);
                                            // Rule at src/isa/aarch64/lower.isle line 668.
                                            return Some(v551);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v550 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v241,
                                                v313,
                                            );
                                            let v551 = constructor_output_reg(ctx, v550);
                                            // Rule at src/isa/aarch64/lower.isle line 671.
                                            return Some(v551);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v518 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF32, v241);
                                    let v519 = constructor_output_reg(ctx, v518);
                                    // Rule at src/isa/aarch64/lower.isle line 620.
                                    return Some(v519);
                                }
                                let v509 = C::fits_in_32(ctx, v232);
                                if let Some(v510) = v509 {
                                    let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                    let v512 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF32, v252);
                                    let v513 = constructor_output_reg(ctx, v512);
                                    // Rule at src/isa/aarch64/lower.isle line 614.
                                    return Some(v513);
                                }
                            }
                            F64 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v521 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF64, v241);
                                    let v522 = constructor_output_reg(ctx, v521);
                                    // Rule at src/isa/aarch64/lower.isle line 623.
                                    return Some(v522);
                                }
                                let v509 = C::fits_in_32(ctx, v232);
                                if let Some(v510) = v509 {
                                    let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                    let v515 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF64, v252);
                                    let v516 = constructor_output_reg(ctx, v515);
                                    // Rule at src/isa/aarch64/lower.isle line 617.
                                    return Some(v516);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v507 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v241,
                                                v313,
                                            );
                                            let v508 = constructor_output_reg(ctx, v507);
                                            // Rule at src/isa/aarch64/lower.isle line 608.
                                            return Some(v508);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v507 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v241,
                                                v313,
                                            );
                                            let v508 = constructor_output_reg(ctx, v507);
                                            // Rule at src/isa/aarch64/lower.isle line 611.
                                            return Some(v508);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v533 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF32, v241);
                                    let v534 = constructor_output_reg(ctx, v533);
                                    // Rule at src/isa/aarch64/lower.isle line 640.
                                    return Some(v534);
                                }
                                let v509 = C::fits_in_32(ctx, v232);
                                if let Some(v510) = v509 {
                                    let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                    let v527 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF32, v320);
                                    let v528 = constructor_output_reg(ctx, v527);
                                    // Rule at src/isa/aarch64/lower.isle line 634.
                                    return Some(v528);
                                }
                            }
                            F64 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v536 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF64, v241);
                                    let v537 = constructor_output_reg(ctx, v536);
                                    // Rule at src/isa/aarch64/lower.isle line 643.
                                    return Some(v537);
                                }
                                let v509 = C::fits_in_32(ctx, v232);
                                if let Some(v510) = v509 {
                                    let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                    let v530 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF64, v320);
                                    let v531 = constructor_output_reg(ctx, v530);
                                    // Rule at src/isa/aarch64/lower.isle line 637.
                                    return Some(v531);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v524 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v241,
                                                v313,
                                            );
                                            let v525 = constructor_output_reg(ctx, v524);
                                            // Rule at src/isa/aarch64/lower.isle line 628.
                                            return Some(v525);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v524 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v241,
                                                v313,
                                            );
                                            let v525 = constructor_output_reg(ctx, v524);
                                            // Rule at src/isa/aarch64/lower.isle line 631.
                                            return Some(v525);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v232 = C::value_type(ctx, v231);
                    if v232 == I128 {
                        let v233 = C::put_in_regs(ctx, v231);
                        let v234 = C::value_regs_get(ctx, v233, 0x0);
                        let v235 = C::value_reg(ctx, v234);
                        let v236 = C::value_regs_get(ctx, v233, 0x1);
                        let v237 = C::value_reg(ctx, v236);
                        let v238 = C::output_pair(ctx, v235, v237);
                        // Rule at src/isa/aarch64/lower.isle line 246.
                        return Some(v238);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v1237,
            constant_handle: v1238,
        } => {
            if let &Opcode::Vconst = v1237 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1243 = C::u64_from_constant(ctx, v1238);
                    if let Some(v1244) = v1243 {
                        let v3 = C::value_type(ctx, v2);
                        let v1245 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1246) = v1245 {
                            let v1247 = constructor_constant_f64(ctx, v1244);
                            let v1248 = constructor_output_reg(ctx, v1247);
                            // Rule at src/isa/aarch64/lower.isle line 2009.
                            return Some(v1248);
                        }
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v575 = C::ty_vec128(ctx, v3);
                    if let Some(v576) = v575 {
                        let v1239 = C::u128_from_constant(ctx, v1238);
                        if let Some(v1240) = v1239 {
                            let v1241 = constructor_constant_f128(ctx, v1240);
                            let v1242 = constructor_output_reg(ctx, v1241);
                            // Rule at src/isa/aarch64/lower.isle line 2006.
                            return Some(v1242);
                        }
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1472,
            global_value: v1473,
        } => {
            match v1472 {
                &Opcode::SymbolValue => {
                    let v1474 = C::symbol_value_data(ctx, v1473);
                    if let Some(v1475) = v1474 {
                        let v1479 = C::box_external_name(ctx, v1475.0);
                        let v1480 = constructor_load_ext_name(ctx, v1479, v1475.2);
                        let v1481 = constructor_output_reg(ctx, v1480);
                        // Rule at src/isa/aarch64/lower.isle line 2243.
                        return Some(v1481);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1474 = C::symbol_value_data(ctx, v1473);
                        if let Some(v1475) = v1474 {
                            let v3 = C::value_type(ctx, v2);
                            let v1799 = &C::tls_model(ctx, v3);
                            match v1799 {
                                &TlsModel::ElfGd => {
                                    let v1800 = constructor_elf_tls_get_addr(ctx, v1475.0);
                                    let v1801 = constructor_output_reg(ctx, v1800);
                                    // Rule at src/isa/aarch64/lower.isle line 2836.
                                    return Some(v1801);
                                }
                                &TlsModel::Macho => {
                                    let v1802 = constructor_macho_tls_get_addr(ctx, v1475.0);
                                    let v1803 = constructor_output_reg(ctx, v1802);
                                    // Rule at src/isa/aarch64/lower.isle line 2839.
                                    return Some(v1803);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v15,
            imm: v16,
        } => {
            if let &Opcode::F32const = v15 {
                let v17 = C::u32_from_ieee32(ctx, v16);
                let v18 = constructor_constant_f32(ctx, v17);
                let v19 = constructor_output_reg(ctx, v18);
                // Rule at src/isa/aarch64/lower.isle line 29.
                return Some(v19);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v20,
            imm: v21,
        } => {
            if let &Opcode::F64const = v20 {
                let v22 = C::u64_from_ieee64(ctx, v21);
                let v23 = constructor_constant_f64(ctx, v22);
                let v24 = constructor_output_reg(ctx, v23);
                // Rule at src/isa/aarch64/lower.isle line 34.
                return Some(v24);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v9 = constructor_imm(ctx, v3, &ImmExtend::Zero, v7);
                    let v10 = constructor_output_reg(ctx, v9);
                    // Rule at src/isa/aarch64/lower.isle line 19.
                    return Some(v10);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v82,
            arg: v83,
            table: v84,
        } => {
            if let &Opcode::BrTable = v82 {
                let v85 = C::targets_jt_size(ctx, arg1);
                let v86 = C::targets_jt_space(ctx, arg1);
                let v87 = &constructor_emit_island(ctx, v86);
                let v88 = constructor_side_effect(ctx, v87);
                let v89 = constructor_put_in_reg_zext32(ctx, v83);
                let v90 = C::u32_as_u64(ctx, v85);
                let v91 = constructor_br_table_impl(ctx, v90, v89, arg1);
                // Rule at src/isa/aarch64/lower.isle line 2902.
                return Some(v91);
            }
        }
        &InstructionData::Brif {
            opcode: ref v2,
            arg: v3,
            blocks: ref v4,
        } => {
            if let &Opcode::Brif = v2 {
                let v5 = C::maybe_uextend(ctx, v3);
                if let Some(v6) = v5 {
                    let v7 = C::def_inst(ctx, v6);
                    if let Some(v8) = v7 {
                        let v9 = &C::inst_data(ctx, v8);
                        match v9 {
                            &InstructionData::FloatCompare {
                                opcode: ref v33,
                                args: ref v34,
                                cond: ref v35,
                            } => {
                                if let &Opcode::Fcmp = v33 {
                                    let v36 = C::unpack_value_array_2(ctx, v34);
                                    let v39 = C::value_type(ctx, v36.0);
                                    let v40 = C::ty_scalar_float(ctx, v39);
                                    if let Some(v41) = v40 {
                                        let v42 = &C::fp_cond_code(ctx, v35);
                                        let v43 = C::branch_target(ctx, arg1, 0x0);
                                        let v44 = C::branch_target(ctx, arg1, 0x1);
                                        let v45 = &constructor_scalar_size(ctx, v41);
                                        let v46 = C::put_in_reg(ctx, v36.0);
                                        let v47 = C::put_in_reg(ctx, v36.1);
                                        let v48 = &constructor_fpu_cmp(ctx, v45, v46, v47);
                                        let v49 = C::cond_br_cond(ctx, v42);
                                        let v50 = &constructor_cond_br(ctx, v43, v44, v49);
                                        let v51 =
                                            &constructor_with_flags_side_effect(ctx, v48, v50);
                                        let v52 = constructor_emit_side_effect(ctx, v51);
                                        // Rule at src/isa/aarch64/lower.isle line 2862.
                                        return Some(v52);
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v10,
                                args: ref v11,
                                cond: ref v12,
                            } => {
                                if let &Opcode::Icmp = v10 {
                                    let v13 = C::unpack_value_array_2(ctx, v11);
                                    let v16 = C::value_type(ctx, v13.0);
                                    let v21 = &constructor_lower_icmp_into_flags(
                                        ctx, v12, v13.0, v13.1, v16,
                                    );
                                    let v22 = &constructor_flags_and_cc_cc(ctx, v21);
                                    let v23 = &C::cond_code(ctx, v22);
                                    let v25 = C::branch_target(ctx, arg1, 0x0);
                                    let v27 = C::branch_target(ctx, arg1, 0x1);
                                    let v28 = &constructor_flags_and_cc_flags(ctx, v21);
                                    let v29 = C::cond_br_cond(ctx, v23);
                                    let v30 = &constructor_cond_br(ctx, v25, v27, v29);
                                    let v31 = &constructor_with_flags_side_effect(ctx, v28, v30);
                                    let v32 = constructor_emit_side_effect(ctx, v31);
                                    // Rule at src/isa/aarch64/lower.isle line 2850.
                                    return Some(v32);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v53 = C::value_type(ctx, v3);
                if v53 == I128 {
                    let v54 = &constructor_flags_to_producesflags(ctx, v3);
                    let v55 = C::put_in_regs(ctx, v3);
                    let v57 = C::value_regs_get(ctx, v55, 0x0);
                    let v59 = C::value_regs_get(ctx, v55, 0x1);
                    let v61 = constructor_orr(ctx, I64, v57, v59);
                    let v62 = C::branch_target(ctx, arg1, 0x0);
                    let v63 = C::branch_target(ctx, arg1, 0x1);
                    let v64 = C::cond_br_not_zero(ctx, v61);
                    let v65 = &constructor_cond_br(ctx, v62, v63, v64);
                    let v66 = &constructor_with_flags_side_effect(ctx, v54, v65);
                    let v67 = constructor_emit_side_effect(ctx, v66);
                    // Rule at src/isa/aarch64/lower.isle line 2872.
                    return Some(v67);
                }
                let v68 = C::ty_int_ref_scalar_64(ctx, v53);
                if let Some(v69) = v68 {
                    let v54 = &constructor_flags_to_producesflags(ctx, v3);
                    let v70 = constructor_put_in_reg_zext64(ctx, v3);
                    let v71 = C::branch_target(ctx, arg1, 0x0);
                    let v72 = C::branch_target(ctx, arg1, 0x1);
                    let v73 = C::cond_br_not_zero(ctx, v70);
                    let v74 = &constructor_cond_br(ctx, v71, v72, v73);
                    let v75 = &constructor_with_flags_side_effect(ctx, v54, v74);
                    let v76 = constructor_emit_side_effect(ctx, v75);
                    // Rule at src/isa/aarch64/lower.isle line 2883.
                    return Some(v76);
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v77,
            destination: v78,
        } => {
            if let &Opcode::Jump = v77 {
                let v79 = C::branch_target(ctx, arg1, 0x0);
                let v80 = &constructor_aarch64_jump(ctx, v79);
                let v81 = constructor_emit_side_effect(ctx, v80);
                // Rule at src/isa/aarch64/lower.isle line 2895.
                return Some(v81);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_fmla.
pub fn constructor_lower_fmla<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Value,
    arg2: Value,
    arg3: Value,
    arg4: &VectorSize,
) -> Reg {
    let v18 = C::def_inst(ctx, arg2);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v87 = constructor_lower_fmla(ctx, v85, arg1, v22, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 566.
                return v87;
            }
        }
    }
    let v9 = C::def_inst(ctx, arg1);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Fneg = v12 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v86 = constructor_lower_fmla(ctx, v85, v13, arg2, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 564.
                return v86;
            }
        }
    }
    match arg4 {
        &VectorSize::Size32x4 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v60 = C::shuffle32_from_imm(ctx, v56);
                                    if let Some(v61) = v60 {
                                        let v66 = C::u8_as_u64(ctx, v61.0);
                                        let v67 = C::u64_lt(ctx, v66, 0x4);
                                        if v67 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v61.0 == v61.1 {
                                                    if v61.0 == v61.2 {
                                                        if v61.0 == v61.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v6 = C::put_in_reg(ctx, arg1);
                                                            let v68 = C::put_in_reg(ctx, v57.0);
                                                            let v69 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v6, v68, arg4, v61.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 548.
                                                            return v69;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v37 = C::shuffle32_from_imm(ctx, v33);
                                    if let Some(v38) = v37 {
                                        let v43 = C::u8_as_u64(ctx, v38.0);
                                        let v45 = C::u64_lt(ctx, v43, 0x4);
                                        if v45 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v38.0 == v38.1 {
                                                    if v38.0 == v38.2 {
                                                        if v38.0 == v38.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v14 = C::put_in_reg(ctx, arg2);
                                                            let v46 = C::put_in_reg(ctx, v34.0);
                                                            let v47 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v14, v46, arg4,
                                                                v38.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 545.
                                                            return v47;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        &VectorSize::Size64x2 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v78 = C::shuffle64_from_imm(ctx, v56);
                                    if let Some(v79) = v78 {
                                        let v82 = C::u8_as_u64(ctx, v79.0);
                                        let v83 = C::u64_lt(ctx, v82, 0x2);
                                        if v83 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v79.0 == v79.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v6 = C::put_in_reg(ctx, arg1);
                                                    let v68 = C::put_in_reg(ctx, v57.0);
                                                    let v84 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v6, v68, arg4, v79.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 554.
                                                    return v84;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v70 = C::shuffle64_from_imm(ctx, v33);
                                    if let Some(v71) = v70 {
                                        let v74 = C::u8_as_u64(ctx, v71.0);
                                        let v76 = C::u64_lt(ctx, v74, 0x2);
                                        if v76 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v71.0 == v71.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v14 = C::put_in_reg(ctx, arg2);
                                                    let v46 = C::put_in_reg(ctx, v34.0);
                                                    let v77 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v14, v46, arg4, v71.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 551.
                                                    return v77;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Splat = v21 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v6 = C::put_in_reg(ctx, arg1);
                let v23 = C::put_in_reg(ctx, v22);
                let v24 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v23, arg4, 0x0);
                // Rule at src/isa/aarch64/lower.isle line 535.
                return v24;
            }
        }
    }
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Splat = v12 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v14 = C::put_in_reg(ctx, arg2);
                let v15 = C::put_in_reg(ctx, v13);
                let v17 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v15, arg4, 0x0);
                // Rule at src/isa/aarch64/lower.isle line 533.
                return v17;
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = C::put_in_reg(ctx, arg1);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_vec_rrr_mod(ctx, arg0, v5, v6, v7, arg4);
    // Rule at src/isa/aarch64/lower.isle line 528.
    return v8;
}

// Generated as internal constructor for term neg_fmla.
pub fn constructor_neg_fmla<C: Context>(ctx: &mut C, arg0: &VecALUModOp) -> VecALUModOp {
    match arg0 {
        &VecALUModOp::Fmla => {
            // Rule at src/isa/aarch64/lower.isle line 570.
            return VecALUModOp::Fmls;
        }
        &VecALUModOp::Fmls => {
            // Rule at src/isa/aarch64/lower.isle line 571.
            return VecALUModOp::Fmla;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg_fmla", "src/isa/aarch64/lower.isle line 569"
    )
}

// Generated as internal constructor for term put_nonzero_in_reg_zext64.
pub fn constructor_put_nonzero_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Zero, v10);
                    // Rule at src/isa/aarch64/lower.isle line 978.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_zext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 973.
    return v2;
}

// Generated as internal constructor for term put_nonzero_in_reg_sext64.
pub fn constructor_put_nonzero_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Sign, v10);
                    // Rule at src/isa/aarch64/lower.isle line 1021.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_sext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 1016.
    return v2;
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    let v14 = C::fits_in_16(ctx, arg0);
    if let Some(v15) = v14 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v16 = C::ty_bits(ctx, v15);
        let v18 = constructor_extend(ctx, v7, arg2, v16, 0x20);
        let v19 = C::put_in_reg(ctx, arg4);
        let v20 = constructor_extend(ctx, v19, arg2, v16, 0x20);
        let v21 = &constructor_operand_size(ctx, v15);
        let v22 = &constructor_cmp(ctx, v21, v18, v20);
        let v23 = &constructor_csel(ctx, arg1, v18, v20);
        let v24 = constructor_with_flags_reg(ctx, v22, v23);
        let v25 = C::value_reg(ctx, v24);
        // Rule at src/isa/aarch64/lower.isle line 1068.
        return v25;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_operand_size(ctx, v2);
        let v10 = &constructor_cmp(ctx, v9, v7, v8);
        let v11 = &constructor_csel(ctx, arg1, v7, v8);
        let v12 = constructor_with_flags_reg(ctx, v10, v11);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/lower.isle line 1060.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/aarch64/lower.isle line 1059"
    )
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsl(ctx, I64, v3, arg1);
    let v8 = constructor_lsl(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsr_imm(ctx, I64, v3, v13);
    let v15 = constructor_lsr(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v8, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = C::zero_reg(ctx);
    let v22 = &constructor_csel(ctx, &Cond::Ne, v21, v7);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v7, v16);
    let v24 = &constructor_consumes_flags_concat(ctx, v22, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1320.
    return v25;
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Reg {
    let v16 = C::def_inst(ctx, arg3);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::UnaryImm {
            opcode: ref v19,
            imm: v20,
        } = v18
        {
            if let &Opcode::Iconst = v19 {
                let v21 = C::imm_shift_from_imm64(ctx, arg1, v20);
                if let Some(v22) = v21 {
                    let v23 = constructor_alu_rr_imm_shift(ctx, arg0, arg1, arg2, v22);
                    // Rule at src/isa/aarch64/lower.isle line 1383.
                    return v23;
                }
            }
        }
    }
    match arg1 {
        I32 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v13 = constructor_alu_rrr(ctx, arg0, I32, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1374.
            return v13;
        }
        I64 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v15 = constructor_alu_rrr(ctx, arg0, I64, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1375.
            return v15;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_regs(ctx, arg3);
        let v8 = C::value_regs_get(ctx, v6, 0x0);
        let v10 = C::shift_mask(ctx, v3);
        let v11 = constructor_and_imm(ctx, I32, v8, v10);
        let v12 = constructor_alu_rrr(ctx, arg0, I32, arg2, v11);
        // Rule at src/isa/aarch64/lower.isle line 1365.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_shift", "src/isa/aarch64/lower.isle line 1354"
    )
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_lsr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v7, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = &constructor_csel(ctx, &Cond::Ne, v8, v16);
    let v22 = C::zero_reg(ctx);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v22, v8);
    let v24 = &constructor_consumes_flags_concat(ctx, v21, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1427.
    return v25;
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_asr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v17 = C::imm_shift_from_u8(ctx, 0x3F);
    let v18 = constructor_asr_imm(ctx, I64, v5, v17);
    let v19 = constructor_orr(ctx, I64, v7, v15);
    let v21 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v22 = &constructor_tst_imm(ctx, I64, arg1, v21);
    let v24 = &constructor_csel(ctx, &Cond::Ne, v8, v19);
    let v25 = &constructor_csel(ctx, &Cond::Ne, v18, v8);
    let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
    let v27 = constructor_with_flags(ctx, v22, v26);
    // Rule at src/isa/aarch64/lower.isle line 1486.
    return v27;
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::rotr_mask(ctx, arg0);
    let v5 = constructor_and_imm(ctx, I32, arg2, v4);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_into_imm12(ctx, v6);
    let v8 = constructor_sub_imm(ctx, I32, v5, v7);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_sub(ctx, I32, v9, v8);
    let v11 = constructor_lsr(ctx, I32, arg1, v5);
    let v12 = constructor_lsl(ctx, I32, arg1, v10);
    let v13 = constructor_orr(ctx, I32, v12, v11);
    // Rule at src/isa/aarch64/lower.isle line 1605.
    return v13;
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_lsr_imm(ctx, I32, arg1, arg2);
    let v5 = C::rotr_opposite_amount(ctx, arg0, arg2);
    let v6 = constructor_lsl_imm(ctx, I32, arg1, v5);
    let v7 = constructor_orr(ctx, I32, v6, v4);
    // Rule at src/isa/aarch64/lower.isle line 1626.
    return v7;
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1);
    let v4 = constructor_a64_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_a64_clz(ctx, I64, v6);
    let v9 = C::imm_shift_from_u8(ctx, 0x6);
    let v10 = constructor_lsr_imm(ctx, I64, v4, v9);
    let v11 = constructor_madd(ctx, I64, v7, v10, v4);
    let v14 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v15 = C::value_regs(ctx, v11, v14);
    // Rule at src/isa/aarch64/lower.isle line 1691.
    return v15;
}

// Generated as internal constructor for term put_in_reg_ext32.
pub fn constructor_put_in_reg_ext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &ArgumentExtension,
) -> Reg {
    match arg1 {
        &ArgumentExtension::Uext => {
            let v3 = constructor_put_in_reg_zext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2596.
            return v3;
        }
        &ArgumentExtension::Sext => {
            let v2 = constructor_put_in_reg_sext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2594.
            return v2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_ext32", "src/isa/aarch64/lower.isle line 2593"
    )
}

// Generated as internal constructor for term overflow_op_small.
pub fn constructor_overflow_op_small<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ArgumentExtension,
    arg4: &ALUOp,
) -> InstOutput {
    let v5 = &constructor_lower_extend_op(ctx, arg0, arg3);
    let v6 = constructor_put_in_reg_ext32(ctx, arg1, arg3);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_alu_rrr_extend(ctx, arg4, arg0, v6, v7, v5);
    let v10 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v8, v8, v5);
    let v12 = &constructor_cset(ctx, &Cond::Ne);
    let v13 = constructor_with_flags_reg(ctx, v10, v12);
    let v14 = C::value_reg(ctx, v8);
    let v15 = C::value_reg(ctx, v13);
    let v16 = C::output_pair(ctx, v14, v15);
    // Rule at src/isa/aarch64/lower.isle line 2602.
    return v16;
}

// Generated as internal constructor for term overflow_op_normal.
pub fn constructor_overflow_op_normal<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::put_in_reg(ctx, arg2);
    let v7 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v5, v6, arg3);
    let v8 = &constructor_cset_paired(ctx, arg4);
    let v9 = constructor_with_flags(ctx, v7, v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    let v12 = C::value_reg(ctx, v11);
    let v14 = C::value_regs_get(ctx, v9, 0x1);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::output_pair(ctx, v12, v15);
    // Rule at src/isa/aarch64/lower.isle line 2631.
    return v16;
}

// Generated as internal constructor for term overflow_op_128.
pub fn constructor_overflow_op_128<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: &ALUOp,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg0);
    let v7 = C::value_regs_get(ctx, v5, 0x0);
    let v9 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::put_in_regs(ctx, arg1);
    let v11 = C::value_regs_get(ctx, v10, 0x0);
    let v12 = C::value_regs_get(ctx, v10, 0x1);
    let v14 = &constructor_alu_rrr_with_flags_paired(ctx, I64, v7, v11, arg2);
    let v15 = &constructor_alu_rrr_with_flags_chained(ctx, I64, v9, v12, arg3);
    let v16 = &constructor_cset_paired(ctx, arg4);
    let v17 = &constructor_with_flags_chained(ctx, v14, v15, v16);
    let v18 = constructor_multi_reg_to_pair_and_single(ctx, v17);
    // Rule at src/isa/aarch64/lower.isle line 2642.
    return v18;
}
