// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/inst_vector.isle
// - src/isa/riscv64/lower.isle
// - /Users/igorilyk/shad-rust/target/debug/build/cranelift-codegen-ab7a9ab04739ec40/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn u32_to_offset32(&mut self, arg0: u32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_v(&mut self) -> bool;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn imm(&mut self, arg0: Type, arg1: u64) -> Reg;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn neg_imm12(&mut self, arg0: Imm12) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i8(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_default_frm(&mut self) -> OptionFloatRoundingMode;
    fn pack_float_rounding_mode(&mut self, arg0: &FRM) -> OptionFloatRoundingMode;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_amode(&mut self, arg0: Reg, arg1: Offset32, arg2: Type) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn offset32_imm(&mut self, arg0: i32) -> Offset32;
    fn default_memflags(&mut self) -> MemFlags;
    fn offset32_add(&mut self, arg0: Offset32, arg1: i64) -> Offset32;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn gen_select_reg(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg, arg3: Reg, arg4: Reg)
        -> Reg;
    fn load_u64_constant(&mut self, arg0: u64) -> Reg;
    fn vec_writable_clone(&mut self, arg0: &VecWritableReg) -> VecWritableReg;
    fn vec_writable_to_regs(&mut self, arg0: &VecWritableReg) -> ValueRegs;
    fn alloc_vec_writable(&mut self, arg0: Type) -> VecWritableReg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_convert_2_float_op(&mut self, arg0: Type, arg1: bool, arg2: Type) -> FpuOPRR;
    fn label_to_br_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn vec_label_get(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn lower_br_icmp(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: ValueRegs,
        arg3: &VecMachLabel,
        arg4: Type,
    ) -> Unit;
    fn int_zero_reg(&mut self, arg0: Type) -> ValueRegs;
    fn lower_cond_br(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: &VecMachLabel,
        arg3: Type,
    ) -> Unit;
    fn intcc_to_extend_op(&mut self, arg0: &IntCC) -> ExtendOp;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &VecMachLabel) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn shift_int_to_most_significant(&mut self, arg0: XReg, arg1: Type) -> XReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn zero_reg(&mut self) -> Reg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn vstate_mf2(&mut self, arg0: VState) -> VState;
    fn min_vec_reg_size(&mut self) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 309.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 351.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 370.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 378.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadConst32 {
        rd: WritableReg,
        imm: u32,
    },
    LoadConst64 {
        rd: WritableReg,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
        stack_bytes_to_pop: u32,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    AdjustSp {
        amount: i64,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    TrapIf {
        test: Reg,
        trap_code: TrapCode,
    },
    TrapIfC {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    VirtualSPOffsetAdj {
        amount: i64,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    FenceI,
    ECall,
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: VecWritableReg,
        ty: Type,
        condition: Reg,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecBranchTarget,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    IntSelect {
        op: IntSelectOP,
        dst: VecWritableReg,
        x: ValueRegs,
        y: ValueRegs,
        ty: Type,
    },
    Icmp {
        cc: IntCC,
        rd: WritableReg,
        a: ValueRegs,
        b: ValueRegs,
        ty: Type,
    },
    SelectReg {
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        condition: IntegerCompare,
    },
    FcvtToInt {
        is_sat: bool,
        rd: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        is_signed: bool,
        in_type: Type,
        out_type: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    FloatRound {
        op: FloatRoundOP,
        rd: WritableReg,
        int_tmp: WritableReg,
        f_tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    FloatSelect {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    FloatSelectPseudo {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Rev8 {
        rs: Reg,
        step: WritableReg,
        tmp: WritableReg,
        rd: WritableReg,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRRImm5 {
        op: VecAluOpRRRImm5,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
}

/// Internal type FloatSelectOP: defined at src/isa/riscv64/inst.isle line 398.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatSelectOP {
    Max,
    Min,
}

/// Internal type FloatRoundOP: defined at src/isa/riscv64/inst.isle line 403.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatRoundOP {
    Nearest,
    Ceil,
    Floor,
    Trunc,
}

/// Internal type IntSelectOP: defined at src/isa/riscv64/inst.isle line 410.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntSelectOP {
    Smax,
    Umax,
    Smin,
    Umin,
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 417.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 442.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 455.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 478.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 518.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 530.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 539.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 619.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 652.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 695.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 711.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src/isa/riscv64/inst.isle line 1912.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type CmpResult: defined at src/isa/riscv64/inst.isle line 2854.
#[derive(Clone, Debug)]
pub enum CmpResult {
    Result { result: XReg, invert: bool },
}

/// Internal type VecElementWidth: defined at src/isa/riscv64/inst_vector.isle line 2.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src/isa/riscv64/inst_vector.isle line 15.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src/isa/riscv64/inst_vector.isle line 28.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src/isa/riscv64/inst_vector.isle line 38.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src/isa/riscv64/inst_vector.isle line 50.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static { size: UImm5 },
}

/// Internal type VecOpCategory: defined at src/isa/riscv64/inst_vector.isle line 64.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src/isa/riscv64/inst_vector.isle line 79.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled { reg: Reg },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src/isa/riscv64/inst_vector.isle line 91.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VwaddVV,
    VwaddWV,
    VwadduVV,
    VwadduWV,
    VsubVV,
    VwsubVV,
    VwsubWV,
    VwsubuVV,
    VwsubuWV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsmulVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfminVV,
    VfmaxVV,
    VfsgnjVV,
    VfsgnjnVV,
    VfsgnjxVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VrgatherVV,
    VcompressVM,
    VmseqVV,
    VmsneVV,
    VmsltuVV,
    VmsltVV,
    VmsleuVV,
    VmsleVV,
    VmfeqVV,
    VmfneVV,
    VmfltVV,
    VmfleVV,
    VmandMM,
    VmorMM,
    VmnandMM,
    VmnorMM,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VwaddVX,
    VwaddWX,
    VwadduVX,
    VwadduWX,
    VsubVX,
    VrsubVX,
    VwsubVX,
    VwsubWX,
    VwsubuVX,
    VwsubuWX,
    VssubVX,
    VssubuVX,
    VmulVX,
    VmulhVX,
    VmulhuVX,
    VsmulVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfsgnjVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VrgatherVX,
    VmseqVX,
    VmsneVX,
    VmsltuVX,
    VmsltVX,
    VmsleuVX,
    VmsleVX,
    VmsgtuVX,
    VmsgtVX,
    VmfeqVF,
    VmfneVF,
    VmfltVF,
    VmfleVF,
    VmfgtVF,
    VmfgeVF,
}

/// Internal type VecAluOpRRRImm5: defined at src/isa/riscv64/inst_vector.isle line 211.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRImm5 {
    VslideupVI,
}

/// Internal type VecAluOpRRImm5: defined at src/isa/riscv64/inst_vector.isle line 216.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VssrlVI,
    VslidedownVI,
    VmergeVIM,
    VrgatherVI,
    VmvrV,
    VnclipWI,
    VnclipuWI,
    VmseqVI,
    VmsneVI,
    VmsleuVI,
    VmsleVI,
    VmsgtuVI,
    VmsgtVI,
}

/// Internal type VecAluOpRImm5: defined at src/isa/riscv64/inst_vector.isle line 246.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src/isa/riscv64/inst_vector.isle line 253.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
    VsextVF2,
    VsextVF4,
    VsextVF8,
    VzextVF2,
    VzextVF4,
    VzextVF8,
}

/// Internal type VecAMode: defined at src/isa/riscv64/inst_vector.isle line 277.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride { base: AMode },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 65.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 69.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 138.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 149.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 160.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 159"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 165.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 164"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 170.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 169"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 319.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 321.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 324.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 318"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 332.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 337.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 339.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 341.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 336"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 366.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 365"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 396.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 397.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 395"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 402.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 404.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 401"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 417.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 411.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 410"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 448.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 454.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 466.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 482.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 489.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 502.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 442.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 434.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 432"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 520.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 527.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 538.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 543.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 548.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 553.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 558.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 536"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 567.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 575.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 584.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 592.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 601.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 661.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 669.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 678.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 686.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 695.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 614.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 622.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 631.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 639.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 648.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 708.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 716.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 725.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 733.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 742.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 754.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 762.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 779.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 771.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 787.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 796.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 564"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 996.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 778.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 783.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableXReg) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 798.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(ctx: &mut C, arg0: XReg) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 808.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 813.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(ctx: &mut C) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 818.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(ctx: &mut C, arg0: Value) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 839.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(ctx: &mut C, arg0: FReg) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 844.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(ctx: &mut C, arg0: WritableFReg) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 859.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(ctx: &mut C, arg0: FReg) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 869.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 874.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(ctx: &mut C) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 879.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(ctx: &mut C, arg0: Value) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 901.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(ctx: &mut C, arg0: VReg) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 906.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableVReg) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 921.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(ctx: &mut C, arg0: VReg) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 931.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 936.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(ctx: &mut C) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 941.
    return v2;
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FloatRoundOP,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg2);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_freg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v7 = C::writable_freg_to_writable_reg(ctx, v5);
    let v8 = MInst::FloatRound {
        op: arg0.clone(),
        rd: v3,
        int_tmp: v6,
        f_tmp: v7,
        rs: arg1,
        ty: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 972.
    return v10;
}

// Generated as internal constructor for term gen_float_select_pseudo.
pub fn constructor_gen_float_select_pseudo<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = MInst::FloatSelectPseudo {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 982.
    return v9;
}

// Generated as internal constructor for term gen_float_select.
pub fn constructor_gen_float_select<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = MInst::FloatSelect {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 991.
    return v9;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1006.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1012.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1018.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v2, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1024.
    return v5;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1030.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1036.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1042.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1048.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1054.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1060.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1066.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1072.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1078.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1084.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, -0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1090.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1096.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1102.
    return v5;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1108.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_sltu(ctx, v2, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1114.
    return v3;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1120.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x1);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1126.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1136.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1142.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x0);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1148.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1154.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1160.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1166.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1172.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1178.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1184.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1190.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1200.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1206.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1212.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1218.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1224.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1230.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1236.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1247.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1253.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1259.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1265.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1271.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1280.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1281.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fadd", "src/isa/riscv64/inst.isle line 1279"
    )
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1285.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1286.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsub", "src/isa/riscv64/inst.isle line 1284"
    )
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1290.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1291.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmul", "src/isa/riscv64/inst.isle line 1289"
    )
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1295.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1296.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fdiv", "src/isa/riscv64/inst.isle line 1294"
    )
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F32, v4);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 1300.
            return v6;
        }
        F64 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v9 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, v4);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1301.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsqrt", "src/isa/riscv64/inst.isle line 1299"
    )
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddS, F32, v6, v7, v8);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1305.
            return v10;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v13 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddD, F64, v6, v7, v8);
            let v14 = C::freg_new(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 1306.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmadd", "src/isa/riscv64/inst.isle line 1304"
    )
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXW, I32, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1310.
    return v5;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXD, I64, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1314.
    return v5;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvWX, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1318.
    return v5;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvDX, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1322.
    return v5;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1326.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1330.
    return v5;
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1336.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1337.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnj", "src/isa/riscv64/inst.isle line 1335"
    )
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1343.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1344.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjn", "src/isa/riscv64/inst.isle line 1342"
    )
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1349.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1355.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1356.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjx", "src/isa/riscv64/inst.isle line 1354"
    )
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1361.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1365.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1366.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_feq", "src/isa/riscv64/inst.isle line 1364"
    )
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1370.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1371.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_flt", "src/isa/riscv64/inst.isle line 1369"
    )
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1375.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1376.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fle", "src/isa/riscv64/inst.isle line 1374"
    )
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1381.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1386.
    return v3;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1394.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_adduw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1401.
    return v3;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1407.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1416.
    return v6;
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1422.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1427.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1432.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1437.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1442.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1447.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1452.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1457.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1462.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1467.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1472.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1477.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1482.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1487.
    return v6;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1492.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1500.
    return v4;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1505.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1513.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1518.
    return v6;
}

// Generated as internal constructor for term shift_mask.
pub fn constructor_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/isa/riscv64/inst.isle line 1526.
    return v5;
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 1536.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = C::imm12_const(ctx, arg0);
    let v4 = constructor_rv_addi(ctx, v2, v3);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1544.
    return v5;
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(ctx: &mut C, arg0: u64) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1576.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term u64_to_uimm5.
pub fn constructor_u64_to_uimm5<C: Context>(ctx: &mut C, arg0: u64) -> Option<UImm5> {
    let v1 = C::uimm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1617.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term canonical_nan_u64.
pub fn constructor_canonical_nan_u64<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 1626.
            return 0x7FC00000;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 1627.
            return 0x7FF8000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "canonical_nan_u64", "src/isa/riscv64/inst.isle line 1625"
    )
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: &FpuOPRR, arg1: Type, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg1);
    let v4 = C::gen_default_frm(ctx);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: v4,
        rd: v3,
        rs: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1634.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1641.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = C::gen_default_frm(ctx);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: v5,
        rd: v4,
        rs1: arg2,
        rs2: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1652.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = C::gen_default_frm(ctx);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: v6,
        rd: v5,
        rs1: arg2,
        rs2: arg3,
        rs3: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1660.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1668.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 1676.
    return v7;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1682.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 1683.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 1681"
    )
}

// Generated as internal constructor for term gen_bnot.
pub fn constructor_gen_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    let v1 = C::ty_scalar_float(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::freg_new(ctx, v5);
        let v7 = constructor_move_f_to_x(ctx, v6, v2);
        let v8 = constructor_rv_not(ctx, v7);
        let v9 = constructor_float_int_of_same_size(ctx, v2);
        let v10 = constructor_move_x_to_f(ctx, v8, v9);
        let v11 = C::freg_to_reg(ctx, v10);
        let v12 = C::value_reg(ctx, v11);
        // Rule at src/isa/riscv64/inst.isle line 1687.
        return v12;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v16 = C::value_regs_get(ctx, arg1, 0x1);
        let v17 = C::xreg_new(ctx, v16);
        let v18 = constructor_rv_not(ctx, v17);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v20 = C::xreg_to_reg(ctx, v18);
        let v21 = C::value_regs(ctx, v19, v20);
        // Rule at src/isa/riscv64/inst.isle line 1694.
        return v21;
    }
    let v22 = C::ty_int_ref_scalar_64_extract(ctx, arg0);
    if let Some(v23) = v22 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v24 = C::value_reg(ctx, v19);
        // Rule at src/isa/riscv64/inst.isle line 1699.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bnot", "src/isa/riscv64/inst.isle line 1686"
    )
}

// Generated as internal constructor for term gen_and.
pub fn constructor_gen_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_and(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 1704.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 1709.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_and", "src/isa/riscv64/inst.isle line 1703"
    )
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: u64) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src/isa/riscv64/inst.isle line 1714.
        return v4;
    }
    let v6 = C::imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src/isa/riscv64/inst.isle line 1717.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 1722.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 1727.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_or", "src/isa/riscv64/inst.isle line 1721"
    )
}

// Generated as internal constructor for term gen_bswap.
pub fn constructor_gen_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v19 = C::has_zbb(ctx);
    if v19 == true {
        if arg0 == I64 {
            let v26 = constructor_rv_rev8(ctx, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1759.
            return v26;
        }
        let v17 = C::int_fits_in_32(ctx, arg0);
        if let Some(v18) = v17 {
            let v21 = C::ty_bits(ctx, v18);
            let v22 = C::u8_as_u64(ctx, v21);
            let v23 = C::u64_sub(ctx, 0x40, v22);
            let v24 = constructor_u64_to_imm12(ctx, v23);
            if let Some(v25) = v24 {
                let v26 = constructor_rv_rev8(ctx, arg1);
                let v27 = constructor_rv_srli(ctx, v26, v25);
                // Rule at src/isa/riscv64/inst.isle line 1753.
                return v27;
            }
        }
    }
    let v2 = C::ty_int_ref_16_to_64(ctx, arg0);
    if let Some(v3) = v2 {
        let v4 = C::ty_half_width(ctx, v3);
        if let Some(v5) = v4 {
            let v6 = C::ty_bits(ctx, v5);
            let v7 = C::u8_as_u64(ctx, v6);
            let v8 = constructor_u64_to_imm12(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = constructor_gen_bswap(ctx, v5, arg1);
                let v11 = constructor_rv_slli(ctx, v10, v9);
                let v12 = constructor_rv_srli(ctx, arg1, v9);
                let v13 = constructor_gen_bswap(ctx, v5, v12);
                let v15 = constructor_zext(ctx, v13, v5, I64);
                let v16 = constructor_rv_or(ctx, v11, v15);
                // Rule at src/isa/riscv64/inst.isle line 1737.
                return v16;
            }
        }
    }
    if arg0 == I8 {
        // Rule at src/isa/riscv64/inst.isle line 1735.
        return arg1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bswap", "src/isa/riscv64/inst.isle line 1732"
    )
}

// Generated as internal constructor for term lower_bit_reverse.
pub fn constructor_lower_bit_reverse<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    match arg1 {
        I8 => {
            let v3 = constructor_gen_brev8(ctx, arg0, I8);
            // Rule at src/isa/riscv64/inst.isle line 1768.
            return v3;
        }
        I16 => {
            let v5 = constructor_gen_brev8(ctx, arg0, I16);
            let v6 = C::xreg_new(ctx, v5);
            let v7 = constructor_gen_rev8(ctx, v6);
            let v9 = C::imm12_const(ctx, 0x30);
            let v10 = constructor_rv_srli(ctx, v7, v9);
            let v11 = C::xreg_to_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1772.
            return v11;
        }
        I32 => {
            let v13 = constructor_gen_brev8(ctx, arg0, I32);
            let v14 = C::xreg_new(ctx, v13);
            let v15 = constructor_gen_rev8(ctx, v14);
            let v17 = C::imm12_const(ctx, 0x20);
            let v18 = constructor_rv_srli(ctx, v15, v17);
            let v19 = C::xreg_to_reg(ctx, v18);
            // Rule at src/isa/riscv64/inst.isle line 1780.
            return v19;
        }
        I64 => {
            let v20 = C::xreg_new(ctx, arg0);
            let v21 = constructor_gen_rev8(ctx, v20);
            let v22 = C::xreg_to_reg(ctx, v21);
            let v24 = constructor_gen_brev8(ctx, v22, I64);
            // Rule at src/isa/riscv64/inst.isle line 1788.
            return v24;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bit_reverse", "src/isa/riscv64/inst.isle line 1765"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src/isa/riscv64/inst.isle line 1803.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src/isa/riscv64/inst.isle line 1807.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 1798.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v4 = constructor_gen_cltz(ctx, false, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1795.
    return v5;
}

// Generated as internal constructor for term lower_ctz_128.
pub fn constructor_lower_ctz_128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::xreg_to_reg(ctx, v6);
    let v9 = constructor_lower_ctz(ctx, I64, v8);
    let v10 = C::xreg_new(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, v3);
    let v12 = constructor_lower_ctz(ctx, I64, v11);
    let v13 = C::xreg_new(ctx, v12);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_new(ctx, v15);
    let v18 = C::zero_reg(ctx);
    let v17 = C::xreg_to_reg(ctx, v10);
    let v19 = C::gen_select_reg(ctx, &IntCC::Equal, v3, v16, v17, v18);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = constructor_rv_add(ctx, v13, v20);
    let v22 = C::xreg_to_reg(ctx, v21);
    let v23 = C::value_reg(ctx, v22);
    let v26 = constructor_extend(ctx, v23, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1814.
    return v26;
}

// Generated as internal constructor for term lower_clz.
pub fn constructor_lower_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v6 = C::has_zbb(ctx);
    if v6 == true {
        match arg0 {
            I32 => {
                let v15 = constructor_rv_clzw(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1837.
                return v15;
            }
            I64 => {
                let v16 = constructor_rv_clz(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1841.
                return v16;
            }
            _ => {}
        }
        let v4 = C::fits_in_16(ctx, arg0);
        if let Some(v5) = v4 {
            let v8 = constructor_zext(ctx, arg1, v5, I64);
            let v9 = constructor_rv_clz(ctx, v8);
            let v10 = C::ty_bits(ctx, v5);
            let v11 = C::u8_as_i32(ctx, v10);
            let v13 = C::imm12_const_add(ctx, v11, -0x40);
            let v14 = constructor_rv_addi(ctx, v9, v13);
            // Rule at src/isa/riscv64/inst.isle line 1829.
            return v14;
        }
    }
    let v3 = constructor_gen_cltz(ctx, true, arg1, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1826.
    return v3;
}

// Generated as internal constructor for term lower_clz_i128.
pub fn constructor_lower_clz_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = constructor_lower_clz(ctx, I64, v6);
    let v9 = constructor_lower_clz(ctx, I64, v3);
    let v11 = C::zero_reg(ctx);
    let v12 = C::xreg_new(ctx, v11);
    let v14 = C::zero_reg(ctx);
    let v13 = C::xreg_to_reg(ctx, v9);
    let v15 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v12, v13, v14);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_add(ctx, v8, v16);
    let v18 = C::xreg_to_reg(ctx, v17);
    let v19 = C::value_reg(ctx, v18);
    let v22 = constructor_extend(ctx, v19, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1849.
    return v22;
}

// Generated as internal constructor for term lower_cls.
pub fn constructor_lower_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v3 = constructor_sext(ctx, arg1, arg0, I64);
    let v5 = C::zero_reg(ctx);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_not(ctx, v3);
    let v8 = C::xreg_to_reg(ctx, v7);
    let v9 = C::xreg_to_reg(ctx, v3);
    let v10 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v3, v6, v8, v9);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = constructor_lower_clz(ctx, arg0, v11);
    let v14 = C::imm12_const(ctx, -0x1);
    let v15 = constructor_rv_addi(ctx, v12, v14);
    // Rule at src/isa/riscv64/inst.isle line 1862.
    return v15;
}

// Generated as internal constructor for term lower_cls_i128.
pub fn constructor_lower_cls_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::zero_reg(ctx);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_not(ctx, v3);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v12 = C::xreg_to_reg(ctx, v3);
    let v13 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v6, v9, v11, v12);
    let v14 = C::xreg_new(ctx, v13);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_not(ctx, v6);
    let v18 = C::xreg_to_reg(ctx, v17);
    let v19 = C::xreg_to_reg(ctx, v6);
    let v20 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v6, v16, v18, v19);
    let v21 = C::xreg_new(ctx, v20);
    let v22 = C::xreg_to_reg(ctx, v14);
    let v23 = C::xreg_to_reg(ctx, v21);
    let v24 = C::value_regs(ctx, v22, v23);
    let v25 = constructor_lower_clz_i128(ctx, v24);
    let v26 = C::value_regs_get(ctx, v25, 0x0);
    let v27 = C::xreg_new(ctx, v26);
    let v29 = C::imm12_const(ctx, -0x1);
    let v30 = constructor_rv_addi(ctx, v27, v29);
    let v31 = C::xreg_to_reg(ctx, v30);
    let v32 = C::value_reg(ctx, v31);
    let v36 = constructor_extend(ctx, v32, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1872.
    return v36;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: XReg, arg2: Type) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1884.
    return v12;
}

// Generated as internal constructor for term ext_int_if_need.
pub fn constructor_ext_int_if_need<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: ValueRegs,
    arg2: Type,
) -> ValueRegs {
    match arg2 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 1900.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 1901.
            return arg1;
        }
        _ => {}
    }
    match arg0 {
        true => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v9 = constructor_extend(ctx, arg1, &ExtendOp::Signed, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 1895.
                    return v9;
                }
            }
        }
        false => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v11 = constructor_extend(ctx, arg1, &ExtendOp::Zero, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 1897.
                    return v11;
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ext_int_if_need", "src/isa/riscv64/inst.isle line 1893"
    )
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type, arg2: Type) -> XReg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, &ExtendOp::Zero, arg1, v4);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 1906.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext", "src/isa/riscv64/inst.isle line 1905"
    )
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type, arg2: Type) -> XReg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, &ExtendOp::Signed, arg1, v4);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 1910.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext", "src/isa/riscv64/inst.isle line 1909"
    )
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: &ExtendOp,
    arg2: Type,
    arg3: Type,
) -> ValueRegs {
    if arg2 == arg3 {
        // Rule at src/isa/riscv64/inst.isle line 2004.
        return arg0;
    }
    match arg1 {
        &ExtendOp::Zero => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v50 = C::has_zba(ctx);
                        if v50 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v51 = constructor_rv_zextw(ctx, v10);
                            let v52 = C::xreg_to_reg(ctx, v51);
                            let v53 = C::value_reg(ctx, v52);
                            // Rule at src/isa/riscv64/inst.isle line 1982.
                            return v53;
                        }
                    }
                }
                I128 => {
                    let v54 = C::fits_in_64(ctx, arg2);
                    if let Some(v55) = v54 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v64 = constructor_zext(ctx, v10, v55, I64);
                        let v66 = C::load_u64_constant(ctx, 0x0);
                        let v67 = C::xreg_new(ctx, v66);
                        let v68 = C::xreg_to_reg(ctx, v64);
                        let v69 = C::xreg_to_reg(ctx, v67);
                        let v70 = C::value_regs(ctx, v68, v69);
                        // Rule at src/isa/riscv64/inst.isle line 1997.
                        return v70;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v24 = C::imm12_const(ctx, 0xFF);
                        let v25 = constructor_rv_andi(ctx, v10, v24);
                        let v26 = C::xreg_to_reg(ctx, v25);
                        let v27 = C::value_reg(ctx, v26);
                        // Rule at src/isa/riscv64/inst.isle line 1936.
                        return v27;
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v47 = constructor_rv_zexth(ctx, v10);
                            let v48 = C::xreg_to_reg(ctx, v47);
                            let v49 = C::value_reg(ctx, v48);
                            // Rule at src/isa/riscv64/inst.isle line 1976.
                            return v49;
                        }
                        let v31 = C::has_zbkb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v32 = C::zero_reg(ctx);
                            let v33 = C::xreg_new(ctx, v32);
                            let v34 = constructor_rv_packw(ctx, v10, v33);
                            let v35 = C::xreg_to_reg(ctx, v34);
                            let v36 = C::value_reg(ctx, v35);
                            // Rule at src/isa/riscv64/inst.isle line 1951.
                            return v36;
                        }
                    }
                }
                I32 => {
                    if arg3 == I64 {
                        let v31 = C::has_zbkb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v32 = C::zero_reg(ctx);
                            let v33 = C::xreg_new(ctx, v32);
                            let v37 = constructor_rv_pack(ctx, v10, v33);
                            let v38 = C::xreg_to_reg(ctx, v37);
                            let v39 = C::value_reg(ctx, v38);
                            // Rule at src/isa/riscv64/inst.isle line 1957.
                            return v39;
                        }
                    }
                }
                _ => {}
            }
        }
        &ExtendOp::Signed => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v28 = constructor_rv_sextw(ctx, v10);
                        let v29 = C::xreg_to_reg(ctx, v28);
                        let v30 = C::value_reg(ctx, v29);
                        // Rule at src/isa/riscv64/inst.isle line 1942.
                        return v30;
                    }
                }
                I128 => {
                    let v54 = C::fits_in_64(ctx, arg2);
                    if let Some(v55) = v54 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v57 = constructor_sext(ctx, v10, v55, I64);
                        let v59 = C::imm12_const(ctx, 0x3F);
                        let v60 = constructor_rv_srai(ctx, v57, v59);
                        let v61 = C::xreg_to_reg(ctx, v57);
                        let v62 = C::xreg_to_reg(ctx, v60);
                        let v63 = C::value_regs(ctx, v61, v62);
                        // Rule at src/isa/riscv64/inst.isle line 1989.
                        return v63;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v41 = constructor_rv_sextb(ctx, v10);
                            let v42 = C::xreg_to_reg(ctx, v41);
                            let v43 = C::value_reg(ctx, v42);
                            // Rule at src/isa/riscv64/inst.isle line 1964.
                            return v43;
                        }
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v44 = constructor_rv_sexth(ctx, v10);
                            let v45 = C::xreg_to_reg(ctx, v44);
                            let v46 = C::value_reg(ctx, v45);
                            // Rule at src/isa/riscv64/inst.isle line 1970.
                            return v46;
                        }
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v3 = C::fits_in_32(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::fits_in_64(ctx, arg3);
        if let Some(v7) = v6 {
            let v9 = C::value_regs_get(ctx, arg0, 0x0);
            let v10 = C::xreg_new(ctx, v9);
            let v12 = C::ty_bits(ctx, v4);
            let v13 = C::u8_as_u64(ctx, v12);
            let v14 = C::u64_sub(ctx, 0x40, v13);
            let v15 = C::imm_from_bits(ctx, v14);
            let v16 = constructor_rv_slli(ctx, v10, v15);
            let v17 = &constructor_extend_shift_op(ctx, arg1);
            let v18 = C::xreg_to_reg(ctx, v16);
            let v19 = constructor_alu_rr_imm12(ctx, v17, v18, v15);
            let v20 = C::xreg_new(ctx, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            let v22 = C::value_reg(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 1927.
            return v22;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/riscv64/inst.isle line 1918"
    )
}

// Generated as internal constructor for term extend_shift_op.
pub fn constructor_extend_shift_op<C: Context>(ctx: &mut C, arg0: &ExtendOp) -> AluOPRRI {
    match arg0 {
        &ExtendOp::Zero => {
            // Rule at src/isa/riscv64/inst.isle line 1922.
            return AluOPRRI::Srli;
        }
        &ExtendOp::Signed => {
            // Rule at src/isa/riscv64/inst.isle line 1923.
            return AluOPRRI::Srai;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend_shift_op", "src/isa/riscv64/inst.isle line 1921"
    )
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1);
    let v10 = C::value_regs_get(ctx, arg2, 0x1);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src/isa/riscv64/inst.isle line 2010.
    return v15;
}

// Generated as internal constructor for term lower_umlhi.
pub fn constructor_lower_umlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulhu(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2019.
        return v3;
    }
    let v5 = constructor_zext(ctx, arg1, arg0, I64);
    let v6 = constructor_zext(ctx, arg2, arg0, I64);
    let v7 = constructor_rv_mul(ctx, v5, v6);
    let v8 = C::ty_bits(ctx, arg0);
    let v9 = C::u8_as_i32(ctx, v8);
    let v10 = C::imm12_const(ctx, v9);
    let v11 = constructor_rv_srli(ctx, v7, v10);
    // Rule at src/isa/riscv64/inst.isle line 2022.
    return v11;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2028.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src/isa/riscv64/inst.isle line 2033.
    return v8;
}

// Generated as internal constructor for term lower_rotl.
pub fn constructor_lower_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rolw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2051.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotl_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2057.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_rol(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2041.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotl_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2047.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotl_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2061.
    return v10;
}

// Generated as internal constructor for term lower_rotl_shift.
pub fn constructor_lower_rotl_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v8 = C::xreg_new(ctx, v5);
    let v9 = constructor_rv_sll(ctx, arg1, v8);
    let v11 = C::xreg_new(ctx, v7);
    let v12 = constructor_rv_srl(ctx, arg1, v11);
    let v15 = C::xreg_new(ctx, v5);
    let v16 = C::zero_reg(ctx);
    let v17 = C::xreg_new(ctx, v16);
    let v18 = C::zero_reg(ctx);
    let v13 = C::xreg_to_reg(ctx, v12);
    let v19 = C::gen_select_reg(ctx, &IntCC::Equal, v15, v17, v18, v13);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v20 = C::xreg_new(ctx, v10);
    let v21 = C::xreg_new(ctx, v19);
    let v22 = constructor_rv_or(ctx, v20, v21);
    // Rule at src/isa/riscv64/inst.isle line 2070.
    return v22;
}

// Generated as internal constructor for term lower_rotr.
pub fn constructor_lower_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rorw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2100.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotr_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2106.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_ror(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2091.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotr_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2096.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotr_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2110.
    return v10;
}

// Generated as internal constructor for term lower_rotr_shift.
pub fn constructor_lower_rotr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_srl(ctx, arg1, v6);
    let v11 = constructor_rv_sll(ctx, arg1, v9);
    let v13 = C::zero_reg(ctx);
    let v14 = C::xreg_new(ctx, v13);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_to_reg(ctx, v11);
    let v17 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v14, v15, v16);
    let v18 = C::xreg_new(ctx, v17);
    let v19 = constructor_rv_or(ctx, v10, v18);
    // Rule at src/isa/riscv64/inst.isle line 2118.
    return v19;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        true => {
            let v12 = C::xreg_new(ctx, arg0);
            let v17 = C::u64_as_i32(ctx, arg1);
            let v18 = C::imm12_const(ctx, v17);
            let v19 = constructor_rv_bseti(ctx, v12, v18);
            let v20 = C::xreg_to_reg(ctx, v19);
            // Rule at src/isa/riscv64/inst.isle line 2146.
            return v20;
        }
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xC);
            match v4 {
                true => {
                    let v12 = C::xreg_new(ctx, arg0);
                    let v6 = C::u64_shl(ctx, 0x1, arg1);
                    let v13 = C::u64_as_i32(ctx, v6);
                    let v14 = C::imm12_const(ctx, v13);
                    let v15 = constructor_rv_ori(ctx, v12, v14);
                    let v16 = C::xreg_to_reg(ctx, v15);
                    // Rule at src/isa/riscv64/inst.isle line 2141.
                    return v16;
                }
                false => {
                    let v6 = C::u64_shl(ctx, 0x1, arg1);
                    let v7 = C::load_u64_constant(ctx, v6);
                    let v8 = C::xreg_new(ctx, v7);
                    let v9 = C::xreg_new(ctx, arg0);
                    let v10 = constructor_rv_or(ctx, v9, v8);
                    let v11 = C::xreg_to_reg(ctx, v10);
                    // Rule at src/isa/riscv64/inst.isle line 2135.
                    return v11;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src/isa/riscv64/inst.isle line 2134"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v8 = MInst::Popcnt {
        sum: v5,
        step: v6,
        tmp: v7,
        rs: arg0,
        ty: arg1,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2153.
    return v10;
}

// Generated as internal constructor for term lower_popcnt.
pub fn constructor_lower_popcnt<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        true => {
            let v4 = constructor_zext(ctx, arg0, arg1, I64);
            let v5 = constructor_rv_cpop(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2162.
            return v5;
        }
        false => {
            let v6 = C::xreg_to_reg(ctx, arg0);
            let v7 = constructor_gen_popcnt(ctx, v6, arg1);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2166.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_popcnt", "src/isa/riscv64/inst.isle line 2161"
    )
}

// Generated as internal constructor for term lower_popcnt_i128.
pub fn constructor_lower_popcnt_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = constructor_lower_popcnt(ctx, v3, I64);
    let v7 = C::value_regs_get(ctx, arg0, 0x1);
    let v8 = C::xreg_new(ctx, v7);
    let v9 = constructor_lower_popcnt(ctx, v8, I64);
    let v10 = constructor_rv_add(ctx, v5, v9);
    let v13 = C::load_u64_constant(ctx, 0x0);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v14 = C::value_regs(ctx, v11, v13);
    // Rule at src/isa/riscv64/inst.isle line 2172.
    return v14;
}

// Generated as internal constructor for term lower_i128_rotl.
pub fn constructor_lower_i128_rotl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_sll(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_srl(ctx, v16, v11);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = C::zero_reg(ctx);
    let v22 = C::xreg_to_reg(ctx, v17);
    let v23 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v20, v21, v22);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_or(ctx, v14, v24);
    let v26 = C::value_regs_get(ctx, arg0, 0x1);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_sll(ctx, v27, v8);
    let v29 = C::value_regs_get(ctx, arg0, 0x0);
    let v30 = C::xreg_new(ctx, v29);
    let v31 = constructor_rv_srl(ctx, v30, v11);
    let v32 = C::zero_reg(ctx);
    let v33 = C::xreg_new(ctx, v32);
    let v34 = C::zero_reg(ctx);
    let v35 = C::xreg_to_reg(ctx, v31);
    let v36 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v33, v34, v35);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = constructor_rv_or(ctx, v28, v37);
    let v40 = C::load_u64_constant(ctx, 0x40);
    let v41 = C::xreg_new(ctx, v40);
    let v42 = C::value_regs_get(ctx, arg1, 0x0);
    let v43 = C::xreg_new(ctx, v42);
    let v45 = C::imm12_const(ctx, 0x7F);
    let v46 = constructor_rv_andi(ctx, v43, v45);
    let v48 = C::xreg_to_reg(ctx, v38);
    let v49 = C::xreg_to_reg(ctx, v25);
    let v50 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v48, v49);
    let v51 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v49, v48);
    let v52 = C::value_regs(ctx, v50, v51);
    // Rule at src/isa/riscv64/inst.isle line 2184.
    return v52;
}

// Generated as internal constructor for term lower_i128_rotr.
pub fn constructor_lower_i128_rotr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_srl(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_sll(ctx, v16, v11);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = C::zero_reg(ctx);
    let v22 = C::xreg_to_reg(ctx, v17);
    let v23 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v20, v21, v22);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_or(ctx, v14, v24);
    let v26 = C::value_regs_get(ctx, arg0, 0x1);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_srl(ctx, v27, v8);
    let v29 = C::value_regs_get(ctx, arg0, 0x0);
    let v30 = C::xreg_new(ctx, v29);
    let v31 = constructor_rv_sll(ctx, v30, v11);
    let v32 = C::zero_reg(ctx);
    let v33 = C::xreg_new(ctx, v32);
    let v34 = C::zero_reg(ctx);
    let v35 = C::xreg_to_reg(ctx, v31);
    let v36 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v33, v34, v35);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = constructor_rv_or(ctx, v28, v37);
    let v40 = C::load_u64_constant(ctx, 0x40);
    let v41 = C::xreg_new(ctx, v40);
    let v42 = C::value_regs_get(ctx, arg1, 0x0);
    let v43 = C::xreg_new(ctx, v42);
    let v45 = C::imm12_const(ctx, 0x7F);
    let v46 = constructor_rv_andi(ctx, v43, v45);
    let v48 = C::xreg_to_reg(ctx, v38);
    let v49 = C::xreg_to_reg(ctx, v25);
    let v50 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v48, v49);
    let v51 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v46, v41, v49, v48);
    let v52 = C::value_regs(ctx, v50, v51);
    // Rule at src/isa/riscv64/inst.isle line 2213.
    return v52;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &LoadOP,
    arg3: MemFlags,
    arg4: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v7 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = MInst::Load {
        rd: v5,
        op: arg2.clone(),
        flags: arg3,
        from: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2253.
    return v10;
}

// Generated as internal constructor for term gen_load_128.
pub fn constructor_gen_load_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
) -> ValueRegs {
    let v5 = constructor_gen_load(ctx, arg0, arg1, &LoadOP::Ld, arg2, I64);
    let v7 = C::offset32_add(ctx, arg1, 0x8);
    let v8 = constructor_gen_load(ctx, arg0, v7, &LoadOP::Ld, arg2, I64);
    let v9 = C::value_regs(ctx, v5, v8);
    // Rule at src/isa/riscv64/inst.isle line 2261.
    return v9;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &StoreOP,
    arg3: MemFlags,
    arg4: Reg,
) -> InstOutput {
    let v6 = C::gen_amode(ctx, arg0, arg1, I64);
    let v7 = MInst::Store {
        to: v6,
        op: arg2.clone(),
        flags: arg3,
        src: arg4,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst.isle line 2276.
    return v9;
}

// Generated as internal constructor for term gen_store_128.
pub fn constructor_gen_store_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
    arg3: ValueRegs,
) -> InstOutput {
    let v5 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = C::value_regs_get(ctx, arg3, 0x0);
    let v11 = C::offset32_add(ctx, arg1, 0x8);
    let v12 = C::gen_amode(ctx, arg0, v11, I64);
    let v14 = C::value_regs_get(ctx, arg3, 0x1);
    let v9 = MInst::Store {
        to: v5,
        op: StoreOP::Sd,
        flags: arg2,
        src: v8,
    };
    let v15 = MInst::Store {
        to: v12,
        op: StoreOP::Sd,
        flags: arg2,
        src: v14,
    };
    let v16 = SideEffectNoResult::Inst2 {
        inst1: v9,
        inst2: v15,
    };
    let v17 = constructor_side_effect(ctx, &v16);
    // Rule at src/isa/riscv64/inst.isle line 2282.
    return v17;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2295.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2304.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2311.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2319.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2327.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2335.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2343.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2352.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2360.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2368.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2307.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2315.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2323.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2331.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2339.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2348.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2356.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2364.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2372.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 2302"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2381.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2390.
    return v5;
}

// Generated as internal constructor for term gen_select.
pub fn constructor_gen_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::Select {
        dst: v4.clone(),
        ty: arg0,
        condition: arg1,
        x: arg2,
        y: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2401.
    return v8;
}

// Generated as internal constructor for term gen_int_select.
pub fn constructor_gen_int_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntSelectOP,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::IntSelect {
        op: arg1.clone(),
        dst: v5.clone(),
        x: arg2,
        y: arg3,
        ty: arg0,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2430.
    return v8;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 2440.
    return v3;
}

// Generated as internal constructor for term int_load_op.
pub fn constructor_int_load_op<C: Context>(ctx: &mut C, arg0: bool, arg1: u8) -> LoadOP {
    match arg1 {
        0x8 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2456.
                    return LoadOP::Lb;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2452.
                    return LoadOP::Lbu;
                }
                _ => {}
            }
        }
        0x10 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2463.
                    return LoadOP::Lh;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2460.
                    return LoadOP::Lhu;
                }
                _ => {}
            }
        }
        0x20 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2469.
                    return LoadOP::Lw;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2466.
                    return LoadOP::Lwu;
                }
                _ => {}
            }
        }
        0x40 => {
            // Rule at src/isa/riscv64/inst.isle line 2473.
            return LoadOP::Ld;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_load_op", "src/isa/riscv64/inst.isle line 2450"
    )
}

// Generated as internal constructor for term gen_fcvt_int.
pub fn constructor_gen_fcvt_int<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: FReg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> XReg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v6 = constructor_temp_writable_freg(ctx);
    let v7 = C::writable_freg_to_writable_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg1);
    let v9 = MInst::FcvtToInt {
        is_sat: arg0,
        rd: v5,
        tmp: v7,
        rs: v8,
        is_signed: arg2,
        in_type: arg3,
        out_type: arg4,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v5);
    let v12 = C::xreg_new(ctx, v11);
    // Rule at src/isa/riscv64/inst.isle line 2486.
    return v12;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_float_int_of_same_size(ctx, arg3);
    let v11 = constructor_move_x_to_f(ctx, v9, v10);
    // Rule at src/isa/riscv64/inst.isle line 2499.
    return v11;
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> Reg {
    let v4 = &C::signed_cond_code(ctx, arg0);
    if let Some(v5) = v4 {
        let v7 = constructor_ext_int_if_need(ctx, true, arg1, arg3);
        let v8 = constructor_ext_int_if_need(ctx, true, arg2, arg3);
        let v9 = constructor_gen_icmp(ctx, arg0, v7, v8, arg3);
        let v10 = C::xreg_to_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 2508.
        return v10;
    }
    let v12 = constructor_ext_int_if_need(ctx, false, arg1, arg3);
    let v13 = constructor_ext_int_if_need(ctx, false, arg2, arg3);
    let v14 = constructor_gen_icmp(ctx, arg0, v12, v13, arg3);
    let v15 = C::xreg_to_reg(ctx, v14);
    // Rule at src/isa/riscv64/inst.isle line 2511.
    return v15;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src/isa/riscv64/inst.isle line 2517.
    return v20;
}

// Generated as internal constructor for term lower_uadd_overflow.
pub fn constructor_lower_uadd_overflow<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
    arg2: Type,
) -> ValueRegs {
    if arg2 == I64 {
        let v3 = constructor_rv_add(ctx, arg0, arg1);
        let v5 = C::xreg_to_reg(ctx, v3);
        let v6 = C::value_reg(ctx, v5);
        let v7 = C::xreg_to_reg(ctx, arg0);
        let v8 = C::value_reg(ctx, v7);
        let v10 = constructor_gen_icmp(ctx, &IntCC::UnsignedLessThan, v6, v8, I64);
        let v11 = C::xreg_to_reg(ctx, v10);
        let v12 = C::value_regs(ctx, v5, v11);
        // Rule at src/isa/riscv64/inst.isle line 2533.
        return v12;
    }
    let v13 = C::fits_in_32(ctx, arg2);
    if let Some(v14) = v13 {
        let v15 = constructor_zext(ctx, arg0, v14, I64);
        let v16 = constructor_zext(ctx, arg1, v14, I64);
        let v17 = constructor_rv_add(ctx, v15, v16);
        let v18 = C::ty_bits(ctx, v14);
        let v19 = C::u8_as_i32(ctx, v18);
        let v20 = C::imm12_const(ctx, v19);
        let v21 = constructor_rv_srli(ctx, v17, v20);
        let v22 = C::xreg_to_reg(ctx, v17);
        let v23 = C::xreg_to_reg(ctx, v21);
        let v24 = C::value_regs(ctx, v22, v23);
        // Rule at src/isa/riscv64/inst.isle line 2540.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uadd_overflow", "src/isa/riscv64/inst.isle line 2531"
    )
}

// Generated as internal constructor for term gen_jump.
pub fn constructor_gen_jump<C: Context>(ctx: &mut C, arg0: MachLabel) -> MInst {
    let v1 = C::label_to_br_target(ctx, arg0);
    let v2 = MInst::Jal { dest: v1 };
    // Rule at src/isa/riscv64/inst.isle line 2552.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v70,
            arg: v71,
            table: v72,
        } => {
            if let &Opcode::BrTable = v70 {
                let v73 = C::put_in_reg(ctx, v71);
                let v74 = C::lower_br_table(ctx, v73, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2642.
                return Some(v74);
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v13 = C::value_type(ctx, v11);
                if v13 == I128 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = C::zero_reg(ctx);
                    let v24 = C::value_regs(ctx, v22, v23);
                    let v25 = C::put_in_regs(ctx, v11);
                    let v27 = constructor_gen_icmp(ctx, &IntCC::NotEqual, v25, v24, I128);
                    let v28 = C::xreg_to_reg(ctx, v27);
                    let v29 = C::value_reg(ctx, v28);
                    let v31 = C::lower_cond_br(ctx, &IntCC::NotEqual, v29, arg1, I64);
                    // Rule at src/isa/riscv64/inst.isle line 2611.
                    return Some(v31);
                }
                let v32 = C::maybe_uextend(ctx, v11);
                if let Some(v33) = v32 {
                    let v34 = C::def_inst(ctx, v33);
                    if let Some(v35) = v34 {
                        let v36 = &C::inst_data(ctx, v35);
                        match v36 {
                            &InstructionData::FloatCompare {
                                opcode: ref v47,
                                args: ref v48,
                                cond: ref v49,
                            } => {
                                if let &Opcode::Fcmp = v47 {
                                    let v54 = C::floatcc_unordered(ctx, v49);
                                    match v54 {
                                        true => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v55 = C::label_to_br_target(ctx, v6);
                                            let v57 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v58 = C::label_to_br_target(ctx, v57);
                                            let v59 = &C::floatcc_inverse(ctx, v49);
                                            let v50 = C::unpack_value_array_2(ctx, v48);
                                            let v60 = constructor_put_in_freg(ctx, v50.0);
                                            let v61 = constructor_put_in_freg(ctx, v50.1);
                                            let v53 = C::value_type(ctx, v50.0);
                                            let v62 =
                                                &constructor_emit_fcmp(ctx, v59, v53, v60, v61);
                                            let v63 = &constructor_cond_br(ctx, v62, v58, v55);
                                            let v64 = constructor_emit_side_effect(ctx, v63);
                                            // Rule at src/isa/riscv64/inst.isle line 2623.
                                            return Some(v64);
                                        }
                                        false => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v55 = C::label_to_br_target(ctx, v6);
                                            let v57 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v58 = C::label_to_br_target(ctx, v57);
                                            let v50 = C::unpack_value_array_2(ctx, v48);
                                            let v65 = constructor_put_in_freg(ctx, v50.0);
                                            let v66 = constructor_put_in_freg(ctx, v50.1);
                                            let v53 = C::value_type(ctx, v50.0);
                                            let v67 =
                                                &constructor_emit_fcmp(ctx, v49, v53, v65, v66);
                                            let v68 = &constructor_cond_br(ctx, v67, v55, v58);
                                            let v69 = constructor_emit_side_effect(ctx, v68);
                                            // Rule at src/isa/riscv64/inst.isle line 2630.
                                            return Some(v69);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v37,
                                args: ref v38,
                                cond: ref v39,
                            } => {
                                if let &Opcode::Icmp = v37 {
                                    let v40 = C::unpack_value_array_2(ctx, v38);
                                    let v44 = C::put_in_regs(ctx, v40.0);
                                    let v45 = C::put_in_regs(ctx, v40.1);
                                    let v43 = C::value_type(ctx, v40.0);
                                    let v46 = C::lower_br_icmp(ctx, v39, v44, v45, arg1, v43);
                                    // Rule at src/isa/riscv64/inst.isle line 2618.
                                    return Some(v46);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v18 = C::put_in_regs(ctx, v11);
                let v20 = constructor_normalize_cmp_value(ctx, v13, v18, &ExtendOp::Zero);
                let v21 = C::lower_cond_br(ctx, &IntCC::NotEqual, v20, arg1, v13);
                // Rule at src/isa/riscv64/inst.isle line 2607.
                return Some(v21);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_label_get(ctx, arg1, 0x0);
                let v7 = &constructor_gen_jump(ctx, v6);
                let v8 = SideEffectNoResult::Inst { inst: v7.clone() };
                let v9 = constructor_emit_side_effect(ctx, &v8);
                // Rule at src/isa/riscv64/inst.isle line 2559.
                return Some(v9);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term normalize_cmp_value.
pub fn constructor_normalize_cmp_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: &ExtendOp,
) -> ValueRegs {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_extend(ctx, arg1, arg2, v2, I64);
        // Rule at src/isa/riscv64/inst.isle line 2582.
        return v6;
    }
    match arg0 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 2585.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 2586.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "normalize_cmp_value", "src/isa/riscv64/inst.isle line 2580"
    )
}

// Generated as internal constructor for term normalize_fcvt_from_int.
pub fn constructor_normalize_fcvt_from_int<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Type,
    arg2: &ExtendOp,
) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, arg2, v3, I64);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 2589.
        return v11;
    }
    // Rule at src/isa/riscv64/inst.isle line 2591.
    return arg0;
}

// Generated as internal constructor for term truthy_to_reg.
pub fn constructor_truthy_to_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> XReg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::xreg_new(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 2598.
        return v6;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::xreg_new(ctx, v5);
        let v8 = C::value_regs_get(ctx, arg1, 0x1);
        let v9 = C::xreg_new(ctx, v8);
        let v10 = constructor_rv_or(ctx, v6, v9);
        // Rule at src/isa/riscv64/inst.isle line 2600.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "truthy_to_reg", "src/isa/riscv64/inst.isle line 2597"
    )
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type, arg2: Type) -> Reg {
    match arg1 {
        I32 => {
            if arg2 == F32 {
                let v8 = C::xreg_new(ctx, arg0);
                let v9 = constructor_rv_fmvwx(ctx, v8);
                let v10 = C::freg_to_reg(ctx, v9);
                // Rule at src/isa/riscv64/inst.isle line 2654.
                return v10;
            }
        }
        I64 => {
            if arg2 == F64 {
                let v8 = C::xreg_new(ctx, arg0);
                let v11 = constructor_rv_fmvdx(ctx, v8);
                let v12 = C::freg_to_reg(ctx, v11);
                // Rule at src/isa/riscv64/inst.isle line 2655.
                return v12;
            }
        }
        F32 => {
            if arg2 == I32 {
                let v3 = C::freg_new(ctx, arg0);
                let v4 = constructor_rv_fmvxw(ctx, v3);
                let v5 = C::xreg_to_reg(ctx, v4);
                // Rule at src/isa/riscv64/inst.isle line 2652.
                return v5;
            }
        }
        F64 => {
            if arg2 == I64 {
                let v3 = C::freg_new(ctx, arg0);
                let v6 = constructor_rv_fmvxd(ctx, v3);
                let v7 = C::xreg_to_reg(ctx, v6);
                // Rule at src/isa/riscv64/inst.isle line 2653.
                return v7;
            }
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2656.
    return arg0;
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(ctx: &mut C, arg0: FReg, arg1: Type) -> XReg {
    match arg1 {
        F32 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, F32, I32);
            let v6 = C::xreg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2659.
            return v6;
        }
        F64 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, F64, I64);
            let v10 = C::xreg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2660.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_f_to_x", "src/isa/riscv64/inst.isle line 2658"
    )
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> FReg {
    match arg1 {
        I32 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, I32, F32);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2663.
            return v6;
        }
        I64 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, I64, F64);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2664.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_x_to_f", "src/isa/riscv64/inst.isle line 2662"
    )
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 2667.
            return I32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 2668.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_of_same_size", "src/isa/riscv64/inst.isle line 2666"
    )
}

// Generated as internal constructor for term gen_rev8.
pub fn constructor_gen_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::has_zbb(ctx);
    match v1 {
        true => {
            let v2 = constructor_rv_rev8(ctx, arg0);
            // Rule at src/isa/riscv64/inst.isle line 2672.
            return v2;
        }
        false => {
            let v3 = constructor_temp_writable_xreg(ctx);
            let v4 = constructor_temp_writable_xreg(ctx);
            let v5 = constructor_temp_writable_xreg(ctx);
            let v6 = C::xreg_to_reg(ctx, arg0);
            let v7 = C::writable_xreg_to_writable_reg(ctx, v5);
            let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
            let v9 = C::writable_xreg_to_writable_reg(ctx, v3);
            let v10 = MInst::Rev8 {
                rs: v6,
                step: v7,
                tmp: v8,
                rd: v9,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            let v13 = C::xreg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2678.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_rev8", "src/isa/riscv64/inst.isle line 2671"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2689.
            return v5;
        }
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2694.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2688"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2711.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2707.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2706"
    )
}

// Generated as internal constructor for term max.
pub fn constructor_max<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::has_zbb(ctx);
            match v7 {
                true => {
                    let v8 = constructor_rv_max(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2717.
                    return v8;
                }
                false => {
                    let v10 = C::xreg_to_reg(ctx, arg1);
                    let v11 = C::xreg_to_reg(ctx, arg2);
                    let v12 =
                        C::gen_select_reg(ctx, &IntCC::SignedGreaterThan, arg1, arg2, v10, v11);
                    let v13 = C::xreg_new(ctx, v12);
                    // Rule at src/isa/riscv64/inst.isle line 2721.
                    return v13;
                }
                _ => {}
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max", "src/isa/riscv64/inst.isle line 2716"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = MInst::TrapIf {
        test: v2,
        trap_code: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2728.
    return v5;
}

// Generated as internal constructor for term gen_trapifc.
pub fn constructor_gen_trapifc<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIfC {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src/isa/riscv64/inst.isle line 2733.
    return v8;
}

// Generated as internal constructor for term gen_div_overflow.
pub fn constructor_gen_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
    arg2: Type,
) -> InstOutput {
    let v4 = constructor_load_imm12(ctx, -0x1);
    let v5 = C::xreg_new(ctx, v4);
    let v7 = constructor_load_imm12(ctx, 0x1);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::imm12_const(ctx, 0x3F);
    let v11 = constructor_rv_slli(ctx, v8, v10);
    let v12 = C::shift_int_to_most_significant(ctx, arg0, arg2);
    let v14 = C::xreg_to_reg(ctx, v5);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::xreg_to_reg(ctx, arg1);
    let v17 = C::value_reg(ctx, v16);
    let v18 = constructor_gen_icmp(ctx, &IntCC::Equal, v15, v17, arg2);
    let v19 = C::xreg_to_reg(ctx, v11);
    let v20 = C::value_reg(ctx, v19);
    let v21 = C::xreg_to_reg(ctx, v12);
    let v22 = C::value_reg(ctx, v21);
    let v23 = constructor_gen_icmp(ctx, &IntCC::Equal, v20, v22, arg2);
    let v24 = constructor_rv_and(ctx, v18, v23);
    let v26 = constructor_gen_trapif(ctx, v24, &TrapCode::IntegerOverflow);
    // Rule at src/isa/riscv64/inst.isle line 2742.
    return v26;
}

// Generated as internal constructor for term gen_div_by_zero.
pub fn constructor_gen_div_by_zero<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = constructor_gen_trapifc(
        ctx,
        &IntCC::Equal,
        v3,
        arg0,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src/isa/riscv64/inst.isle line 2754.
    return v5;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg, arg2: XReg) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2768.
    return v4;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        if arg1 == I128 {
            let v30 = constructor_lower_bmask(ctx, I64, I128, arg2);
            let v31 = C::value_regs_get(ctx, v30, 0x0);
            let v32 = C::value_regs_get(ctx, v30, 0x0);
            let v33 = C::value_regs(ctx, v31, v32);
            // Rule at src/isa/riscv64/inst.isle line 2809.
            return v33;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v25 = constructor_lower_bmask(ctx, I64, v5, arg2);
            let v26 = C::value_regs_get(ctx, v25, 0x0);
            let v27 = C::value_regs_get(ctx, v25, 0x0);
            let v28 = C::value_regs(ctx, v26, v27);
            // Rule at src/isa/riscv64/inst.isle line 2800.
            return v28;
        }
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v15 = C::value_regs_get(ctx, arg2, 0x0);
            let v16 = C::xreg_new(ctx, v15);
            let v18 = C::value_regs_get(ctx, arg2, 0x1);
            let v19 = C::xreg_new(ctx, v18);
            let v20 = constructor_rv_or(ctx, v16, v19);
            let v22 = C::xreg_to_reg(ctx, v20);
            let v23 = C::value_reg(ctx, v22);
            let v24 = constructor_lower_bmask(ctx, v2, I64, v23);
            // Rule at src/isa/riscv64/inst.isle line 2790.
            return v24;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_normalize_cmp_value(ctx, v5, arg2, &ExtendOp::Zero);
            let v9 = constructor_truthy_to_reg(ctx, v5, v8);
            let v10 = constructor_rv_snez(ctx, v9);
            let v11 = constructor_rv_neg(ctx, v10);
            let v12 = C::xreg_to_reg(ctx, v11);
            let v13 = C::value_reg(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2781.
            return v13;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 2775"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 2820.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = C::imm(ctx, I64, 0x0);
    let v3 = C::imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 2836.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm_from_bits(ctx, 0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2846.
    return v3;
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2849.
    return v2;
}

// Generated as internal constructor for term ordered.
pub fn constructor_ordered<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_is_not_nan(ctx, arg0, arg1);
    let v4 = constructor_is_not_nan(ctx, arg0, arg2);
    let v5 = constructor_rv_and(ctx, v3, v4);
    // Rule at src/isa/riscv64/inst.isle line 2852.
    return v5;
}

// Generated as internal constructor for term cmp_result.
pub fn constructor_cmp_result<C: Context>(ctx: &mut C, arg0: XReg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: false,
    };
    // Rule at src/isa/riscv64/inst.isle line 2862.
    return v2;
}

// Generated as internal constructor for term cmp_result_invert.
pub fn constructor_cmp_result_invert<C: Context>(ctx: &mut C, arg0: XReg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: true,
    };
    // Rule at src/isa/riscv64/inst.isle line 2867.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
    arg1: BranchTarget,
    arg2: BranchTarget,
) -> SideEffectNoResult {
    let v3 = constructor_cmp_integer_compare(ctx, arg0);
    let v4 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: v3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/riscv64/inst.isle line 2871.
    return v5;
}

// Generated as internal constructor for term cmp_integer_compare.
pub fn constructor_cmp_integer_compare<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
) -> IntegerCompare {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::xreg_new(ctx, v4);
                let v8 = C::int_compare(ctx, &IntCC::Equal, v1, v5);
                // Rule at src/isa/riscv64/inst.isle line 2887.
                return v8;
            }
            false => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::xreg_new(ctx, v4);
                let v6 = C::int_compare(ctx, &IntCC::NotEqual, v1, v5);
                // Rule at src/isa/riscv64/inst.isle line 2883.
                return v6;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_integer_compare", "src/isa/riscv64/inst.isle line 2880"
    )
}

// Generated as internal constructor for term cmp_value.
pub fn constructor_cmp_value<C: Context>(ctx: &mut C, arg0: &CmpResult) -> XReg {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v3 = constructor_not(ctx, v1);
                // Rule at src/isa/riscv64/inst.isle line 2893.
                return v3;
            }
            false => {
                // Rule at src/isa/riscv64/inst.isle line 2892.
                return v1;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_value", "src/isa/riscv64/inst.isle line 2891"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> CmpResult {
    match arg0 {
        &FloatCC::Equal => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v8 = &constructor_cmp_result(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2911.
            return v8.clone();
        }
        &FloatCC::GreaterThan => {
            let v21 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v22 = &constructor_cmp_result(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 2942.
            return v22.clone();
        }
        &FloatCC::GreaterThanOrEqual => {
            let v23 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v24 = &constructor_cmp_result(ctx, v23);
            // Rule at src/isa/riscv64/inst.isle line 2947.
            return v24.clone();
        }
        &FloatCC::LessThan => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v18 = &constructor_cmp_result(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2932.
            return v18.clone();
        }
        &FloatCC::LessThanOrEqual => {
            let v19 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v20 = &constructor_cmp_result(ctx, v19);
            // Rule at src/isa/riscv64/inst.isle line 2937.
            return v20.clone();
        }
        &FloatCC::NotEqual => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v9 = &constructor_cmp_result_invert(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2917.
            return v9.clone();
        }
        &FloatCC::Ordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v5 = &constructor_cmp_result(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2900.
            return v5.clone();
        }
        &FloatCC::OrderedNotEqual => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v12 = constructor_rv_or(ctx, v10, v11);
            let v13 = &constructor_cmp_result(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2922.
            return v13.clone();
        }
        &FloatCC::Unordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v6 = &constructor_cmp_result_invert(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2906.
            return v6.clone();
        }
        &FloatCC::UnorderedOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v14 = constructor_not(ctx, v4);
            let v15 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_or(ctx, v14, v15);
            let v17 = &constructor_cmp_result(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 2927.
            return v17.clone();
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v30 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v31 = constructor_rv_and(ctx, v4, v30);
            let v32 = &constructor_cmp_result_invert(ctx, v31);
            // Rule at src/isa/riscv64/inst.isle line 2965.
            return v32.clone();
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v33 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v34 = constructor_rv_and(ctx, v4, v33);
            let v35 = &constructor_cmp_result_invert(ctx, v34);
            // Rule at src/isa/riscv64/inst.isle line 2971.
            return v35.clone();
        }
        &FloatCC::UnorderedOrLessThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v25 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v26 = constructor_rv_and(ctx, v4, v25);
            let v27 = &constructor_cmp_result_invert(ctx, v26);
            // Rule at src/isa/riscv64/inst.isle line 2953.
            return v27.clone();
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v28 = constructor_rv_and(ctx, v4, v11);
            let v29 = &constructor_cmp_result_invert(ctx, v28);
            // Rule at src/isa/riscv64/inst.isle line 2959.
            return v29.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/riscv64/inst.isle line 2896"
    )
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(ctx: &mut C, arg0: VReg) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled { reg: v1 };
    // Rule at src/isa/riscv64/inst_vector.isle line 85.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(ctx: &mut C) -> VecOpMasking {
    // Rule at src/isa/riscv64/inst_vector.isle line 88.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(ctx: &mut C, arg0: Type) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 303.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 306.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 309.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 315.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 312.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 318.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "element_width_from_type", "src/isa/riscv64/inst_vector.isle line 302"
    )
}

// Generated as internal constructor for term vec_alu_rrr_imm5.
pub fn constructor_vec_alu_rrr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: Imm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRImm5 {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        imm: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 341.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_uimm5.
pub fn constructor_vec_alu_rrr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: UImm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = C::uimm5_bitcast_to_imm5(ctx, arg3);
    let v7 = constructor_vec_alu_rrr_imm5(ctx, arg0, arg1, arg2, v6, arg4, arg5);
    // Rule at src/isa/riscv64/inst_vector.isle line 349.
    return v7;
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 354.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 361.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 369.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 375.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 382.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 389.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 396.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 402.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 407.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 412.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 417.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 422.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 427.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 432.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 437.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 442.
    return v7;
}

// Generated as internal constructor for term rv_vwadd_vv.
pub fn constructor_rv_vwadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 449.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_vx.
pub fn constructor_rv_vwadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 456.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wv.
pub fn constructor_rv_vwadd_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 463.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wx.
pub fn constructor_rv_vwadd_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 470.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vv.
pub fn constructor_rv_vwaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 477.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vx.
pub fn constructor_rv_vwaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 484.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wv.
pub fn constructor_rv_vwaddu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 491.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wx.
pub fn constructor_rv_vwaddu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 498.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 503.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 508.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 513.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vv.
pub fn constructor_rv_vwsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 520.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vx.
pub fn constructor_rv_vwsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 527.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wv.
pub fn constructor_rv_vwsub_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 534.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wx.
pub fn constructor_rv_vwsub_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 541.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vv.
pub fn constructor_rv_vwsubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 548.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vx.
pub fn constructor_rv_vwsubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 555.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wv.
pub fn constructor_rv_vwsubu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 562.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wx.
pub fn constructor_rv_vwsubu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 569.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 574.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 579.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 584.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 589.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v5, arg1, arg2);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 594.
    return v7;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 599.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 604.
    return v8;
}

// Generated as internal constructor for term rv_vmul_vx.
pub fn constructor_rv_vmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 609.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 614.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vx.
pub fn constructor_rv_vmulh_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 619.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 624.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vx.
pub fn constructor_rv_vmulhu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 629.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vv.
pub fn constructor_rv_vsmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 637.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vx.
pub fn constructor_rv_vsmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 645.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 650.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 655.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 660.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 665.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 670.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 675.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 680.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 685.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 690.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 695.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 700.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 705.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 710.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 715.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 720.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 725.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 730.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 735.
    return v7;
}

// Generated as internal constructor for term rv_vssrl_vi.
pub fn constructor_rv_vssrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VssrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 744.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::imm5_from_i8(ctx, -0x1);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 750.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_vnot_v", "src/isa/riscv64/inst_vector.isle line 749"
    )
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 756.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 761.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 766.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 771.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 776.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 781.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 786.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 791.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 796.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 801.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 806.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 811.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 816.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 821.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 826.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 831.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 836.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 841.
    return v8;
}

// Generated as internal constructor for term rv_vfmin_vv.
pub fn constructor_rv_vfmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 846.
    return v8;
}

// Generated as internal constructor for term rv_vfmax_vv.
pub fn constructor_rv_vfmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 851.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vv.
pub fn constructor_rv_vfsgnj_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 857.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vf.
pub fn constructor_rv_vfsgnj_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 862.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 868.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 874.
    return v3;
}

// Generated as internal constructor for term rv_vfsgnjx_vv.
pub fn constructor_rv_vfsgnjx_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 880.
    return v8;
}

// Generated as internal constructor for term rv_vfabs_v.
pub fn constructor_rv_vfabs_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjx_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 886.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 891.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 898.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 904.
    return v7;
}

// Generated as internal constructor for term rv_vslideup_vvi.
pub fn constructor_rv_vslideup_vvi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = constructor_vec_alu_rrr_uimm5(
        ctx,
        &VecAluOpRRRImm5::VslideupVI,
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
    );
    // Rule at src/isa/riscv64/inst_vector.isle line 912.
    return v6;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 919.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 926.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 933.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 940.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 947.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 954.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(ctx: &mut C, arg0: Imm5, arg1: VState) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 961.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 971.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 980.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 989.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 998.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1006.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1013.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vv.
pub fn constructor_rv_vrgather_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1020.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vx.
pub fn constructor_rv_vrgather_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1027.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vi.
pub fn constructor_rv_vrgather_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VrgatherVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1032.
    return v7;
}

// Generated as internal constructor for term rv_vcompress_vm.
pub fn constructor_rv_vcompress_vm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VcompressVM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1043.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vv.
pub fn constructor_rv_vmseq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1048.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vx.
pub fn constructor_rv_vmseq_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1053.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vi.
pub fn constructor_rv_vmseq_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmseqVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1058.
    return v7;
}

// Generated as internal constructor for term rv_vmsne_vv.
pub fn constructor_rv_vmsne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1063.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vx.
pub fn constructor_rv_vmsne_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1068.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vi.
pub fn constructor_rv_vmsne_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsneVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1073.
    return v7;
}

// Generated as internal constructor for term rv_vmsltu_vv.
pub fn constructor_rv_vmsltu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1078.
    return v8;
}

// Generated as internal constructor for term rv_vmsltu_vx.
pub fn constructor_rv_vmsltu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1083.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vv.
pub fn constructor_rv_vmslt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1088.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1093.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vv.
pub fn constructor_rv_vmsleu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1098.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vx.
pub fn constructor_rv_vmsleu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1103.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vi.
pub fn constructor_rv_vmsleu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1108.
    return v7;
}

// Generated as internal constructor for term rv_vmsle_vv.
pub fn constructor_rv_vmsle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1113.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vx.
pub fn constructor_rv_vmsle_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1118.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vi.
pub fn constructor_rv_vmsle_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1123.
    return v7;
}

// Generated as internal constructor for term rv_vmsgtu_vv.
pub fn constructor_rv_vmsgtu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsltu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1129.
    return v4;
}

// Generated as internal constructor for term rv_vmsgtu_vx.
pub fn constructor_rv_vmsgtu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1133.
    return v8;
}

// Generated as internal constructor for term rv_vmsgtu_vi.
pub fn constructor_rv_vmsgtu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1138.
    return v7;
}

// Generated as internal constructor for term rv_vmsgt_vv.
pub fn constructor_rv_vmsgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmslt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1144.
    return v4;
}

// Generated as internal constructor for term rv_vmsgt_vx.
pub fn constructor_rv_vmsgt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1148.
    return v8;
}

// Generated as internal constructor for term rv_vmsgt_vi.
pub fn constructor_rv_vmsgt_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1153.
    return v7;
}

// Generated as internal constructor for term rv_vmsgeu_vv.
pub fn constructor_rv_vmsgeu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsleu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1159.
    return v4;
}

// Generated as internal constructor for term rv_vmsge_vv.
pub fn constructor_rv_vmsge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1164.
    return v4;
}

// Generated as internal constructor for term rv_vmfeq_vv.
pub fn constructor_rv_vmfeq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1168.
    return v8;
}

// Generated as internal constructor for term rv_vmfeq_vf.
pub fn constructor_rv_vmfeq_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1173.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vv.
pub fn constructor_rv_vmfne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1178.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vf.
pub fn constructor_rv_vmfne_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1183.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vv.
pub fn constructor_rv_vmflt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1188.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vf.
pub fn constructor_rv_vmflt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1193.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vv.
pub fn constructor_rv_vmfle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1198.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vf.
pub fn constructor_rv_vmfle_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1203.
    return v8;
}

// Generated as internal constructor for term rv_vmfgt_vv.
pub fn constructor_rv_vmfgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmflt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1209.
    return v4;
}

// Generated as internal constructor for term rv_vmfgt_vf.
pub fn constructor_rv_vmfgt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgtVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1213.
    return v8;
}

// Generated as internal constructor for term rv_vmfge_vv.
pub fn constructor_rv_vmfge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmfle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1219.
    return v4;
}

// Generated as internal constructor for term rv_vmfge_vf.
pub fn constructor_rv_vmfge_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgeVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1223.
    return v8;
}

// Generated as internal constructor for term rv_vzext_vf2.
pub fn constructor_rv_vzext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1229.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf4.
pub fn constructor_rv_vzext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1235.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf8.
pub fn constructor_rv_vzext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1241.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf2.
pub fn constructor_rv_vsext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1247.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf4.
pub fn constructor_rv_vsext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1253.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf8.
pub fn constructor_rv_vsext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1259.
    return v6;
}

// Generated as internal constructor for term rv_vnclip_wi.
pub fn constructor_rv_vnclip_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1266.
    return v7;
}

// Generated as internal constructor for term rv_vnclipu_wi.
pub fn constructor_rv_vnclipu_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipuWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1273.
    return v7;
}

// Generated as internal constructor for term rv_vmand_mm.
pub fn constructor_rv_vmand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1280.
    return v8;
}

// Generated as internal constructor for term rv_vmor_mm.
pub fn constructor_rv_vmor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1287.
    return v8;
}

// Generated as internal constructor for term rv_vmnand_mm.
pub fn constructor_rv_vmnand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1294.
    return v8;
}

// Generated as internal constructor for term rv_vmnot_m.
pub fn constructor_rv_vmnot_m<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> VReg {
    let v2 = constructor_rv_vmnand_mm(ctx, arg0, arg0, arg1);
    // Rule at src/isa/riscv64/inst_vector.isle line 1302.
    return v2;
}

// Generated as internal constructor for term rv_vmnor_mm.
pub fn constructor_rv_vmnor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1308.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src/isa/riscv64/inst_vector.isle line 1316.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src/isa/riscv64/inst_vector.isle line 1321.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0);
            // Rule at src/isa/riscv64/inst_vector.isle line 1328.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = C::imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0);
        // Rule at src/isa/riscv64/inst_vector.isle line 1332.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_extractlane", "src/isa/riscv64/inst_vector.isle line 1313"
    )
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(ctx: &mut C, arg0: u64) -> VReg {
    let v1 = C::imm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::vstate_from_type(ctx, I64X2);
        let v5 = constructor_rv_vmv_vi(ctx, v2, v4);
        // Rule at src/isa/riscv64/inst_vector.isle line 1342.
        return v5;
    }
    let v7 = C::imm(ctx, I64, arg0);
    let v8 = C::xreg_new(ctx, v7);
    let v4 = C::vstate_from_type(ctx, I64X2);
    let v9 = constructor_rv_vmv_sx(ctx, v8, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1347.
    return v9;
}

// Generated as internal constructor for term gen_constant.
pub fn constructor_gen_constant<C: Context>(ctx: &mut C, arg0: Type, arg1: VCodeConstant) -> VReg {
    let v3 = C::gen_const_amode(ctx, arg1);
    let v2 = &constructor_element_width_from_type(ctx, arg0);
    let v4 = VecAMode::UnitStride { base: v3 };
    let v5 = C::mem_flags_trusted(ctx);
    let v6 = &constructor_unmasked(ctx);
    let v7 = C::vstate_from_type(ctx, arg0);
    let v8 = constructor_vec_load(ctx, v2, &v4, v5, v6, v7);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1358.
    return v9;
}

// Generated as internal constructor for term gen_slidedown_half.
pub fn constructor_gen_slidedown_half<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_lane_count(ctx, v2);
        let v6 = C::u64_udiv(ctx, v4, 0x2);
        if let Some(v7) = v6 {
            let v8 = C::uimm5_from_u64(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = &constructor_unmasked(ctx);
                let v11 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vslidedown_vi(ctx, arg1, v9, v10, v11);
                // Rule at src/isa/riscv64/inst_vector.isle line 1371.
                return v12;
            }
            let v14 = C::imm(ctx, I64, v7);
            let v15 = C::xreg_new(ctx, v14);
            let v10 = &constructor_unmasked(ctx);
            let v11 = C::vstate_from_type(ctx, v2);
            let v16 = constructor_rv_vslidedown_vx(ctx, arg1, v15, v10, v11);
            // Rule at src/isa/riscv64/inst_vector.isle line 1376.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_slidedown_half", "src/isa/riscv64/inst_vector.isle line 1368"
    )
}

// Generated as internal constructor for term gen_expand_mask.
pub fn constructor_gen_expand_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v3 = C::imm5_from_i8(ctx, 0x0);
    if let Some(v4) = v3 {
        let v6 = C::imm5_from_i8(ctx, -0x1);
        if let Some(v7) = v6 {
            let v8 = C::vstate_from_type(ctx, arg0);
            let v9 = constructor_rv_vmv_vi(ctx, v4, v8);
            let v10 = constructor_rv_vmerge_vim(ctx, v9, v7, arg1, v8);
            // Rule at src/isa/riscv64/inst_vector.isle line 1384.
            return v10;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_expand_mask", "src/isa/riscv64/inst_vector.isle line 1383"
    )
}

// Generated as internal constructor for term gen_icmp_mask.
pub fn constructor_gen_icmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &IntCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v35 = C::def_inst(ctx, v22);
                            if let Some(v36) = v35 {
                                let v37 = &C::inst_data(ctx, v36);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v38,
                                    imm: v39,
                                } = v37
                                {
                                    if let &Opcode::Iconst = v38 {
                                        let v40 = C::u64_from_imm64(ctx, v39);
                                        let v41 = C::imm5_from_u64(ctx, v40);
                                        if let Some(v42) = v41 {
                                            let v23 = constructor_put_in_vreg(ctx, arg3);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v43 =
                                                constructor_rv_vmseq_vi(ctx, v23, v42, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1408.
                                            return v43;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::def_inst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = &C::inst_data(ctx, v27);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v29,
                                    imm: v30,
                                } = v28
                                {
                                    if let &Opcode::Iconst = v29 {
                                        let v31 = C::u64_from_imm64(ctx, v30);
                                        let v32 = C::imm5_from_u64(ctx, v31);
                                        if let Some(v33) = v32 {
                                            let v6 = constructor_put_in_vreg(ctx, arg2);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v34 = constructor_rv_vmseq_vi(ctx, v6, v33, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1405.
                                            return v34;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmseq_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1402.
                            return v25;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmseq_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1399.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmseq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1396.
                return v10;
            }
            &IntCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v35 = C::def_inst(ctx, v22);
                            if let Some(v36) = v35 {
                                let v37 = &C::inst_data(ctx, v36);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v38,
                                    imm: v39,
                                } = v37
                                {
                                    if let &Opcode::Iconst = v38 {
                                        let v40 = C::u64_from_imm64(ctx, v39);
                                        let v41 = C::imm5_from_u64(ctx, v40);
                                        if let Some(v42) = v41 {
                                            let v23 = constructor_put_in_vreg(ctx, arg3);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v48 =
                                                constructor_rv_vmsne_vi(ctx, v23, v42, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1425.
                                            return v48;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::def_inst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = &C::inst_data(ctx, v27);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v29,
                                    imm: v30,
                                } = v28
                                {
                                    if let &Opcode::Iconst = v29 {
                                        let v31 = C::u64_from_imm64(ctx, v30);
                                        let v32 = C::imm5_from_u64(ctx, v31);
                                        if let Some(v33) = v32 {
                                            let v6 = constructor_put_in_vreg(ctx, arg2);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v47 = constructor_rv_vmsne_vi(ctx, v6, v33, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1422.
                                            return v47;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v46 = constructor_rv_vmsne_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1419.
                            return v46;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v45 = constructor_rv_vmsne_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1416.
                            return v45;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmsne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1413.
                return v44;
            }
            &IntCC::SignedGreaterThan => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::def_inst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = &C::inst_data(ctx, v27);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v29,
                                    imm: v30,
                                } = v28
                                {
                                    if let &Opcode::Iconst = v29 {
                                        let v31 = C::u64_from_imm64(ctx, v30);
                                        let v32 = C::imm5_from_u64(ctx, v31);
                                        if let Some(v33) = v32 {
                                            let v6 = constructor_put_in_vreg(ctx, arg2);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v70 = constructor_rv_vmsgt_vi(ctx, v6, v33, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1503.
                                            return v70;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v69 = constructor_rv_vmslt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1500.
                            return v69;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v68 = constructor_rv_vmsgt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1497.
                            return v68;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v67 = constructor_rv_vmsgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1494.
                return v67;
            }
            &IntCC::SignedGreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v35 = C::def_inst(ctx, v22);
                            if let Some(v36) = v35 {
                                let v37 = &C::inst_data(ctx, v36);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v38,
                                    imm: v39,
                                } = v37
                                {
                                    if let &Opcode::Iconst = v38 {
                                        let v40 = C::u64_from_imm64(ctx, v39);
                                        let v41 = C::imm5_from_u64(ctx, v40);
                                        if let Some(v42) = v41 {
                                            let v23 = constructor_put_in_vreg(ctx, arg3);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v76 =
                                                constructor_rv_vmsle_vi(ctx, v23, v42, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1525.
                                            return v76;
                                        }
                                    }
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v75 = constructor_rv_vmsle_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1522.
                            return v75;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v74 = constructor_rv_vmsge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1519.
                return v74;
            }
            &IntCC::SignedLessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v35 = C::def_inst(ctx, v22);
                            if let Some(v36) = v35 {
                                let v37 = &C::inst_data(ctx, v36);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v38,
                                    imm: v39,
                                } = v37
                                {
                                    if let &Opcode::Iconst = v38 {
                                        let v40 = C::u64_from_imm64(ctx, v39);
                                        let v41 = C::imm5_from_u64(ctx, v40);
                                        if let Some(v42) = v41 {
                                            let v23 = constructor_put_in_vreg(ctx, arg3);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v56 =
                                                constructor_rv_vmsgt_vi(ctx, v23, v42, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1453.
                                            return v56;
                                        }
                                    }
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v55 = constructor_rv_vmsgt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1450.
                            return v55;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v54 = constructor_rv_vmslt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1447.
                            return v54;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmslt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1444.
                return v53;
            }
            &IntCC::SignedLessThanOrEqual => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::def_inst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = &C::inst_data(ctx, v27);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v29,
                                    imm: v30,
                                } = v28
                                {
                                    if let &Opcode::Iconst = v29 {
                                        let v31 = C::u64_from_imm64(ctx, v30);
                                        let v32 = C::imm5_from_u64(ctx, v31);
                                        if let Some(v33) = v32 {
                                            let v6 = constructor_put_in_vreg(ctx, arg2);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v62 = constructor_rv_vmsle_vi(ctx, v6, v33, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1475.
                                            return v62;
                                        }
                                    }
                                }
                            }
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v61 = constructor_rv_vmsle_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1472.
                            return v61;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmsle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1469.
                return v60;
            }
            &IntCC::UnsignedGreaterThan => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::def_inst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = &C::inst_data(ctx, v27);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v29,
                                    imm: v30,
                                } = v28
                                {
                                    if let &Opcode::Iconst = v29 {
                                        let v31 = C::u64_from_imm64(ctx, v30);
                                        let v32 = C::imm5_from_u64(ctx, v31);
                                        if let Some(v33) = v32 {
                                            let v6 = constructor_put_in_vreg(ctx, arg2);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v66 =
                                                constructor_rv_vmsgtu_vi(ctx, v6, v33, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1489.
                                            return v66;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v65 = constructor_rv_vmsltu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1486.
                            return v65;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v64 = constructor_rv_vmsgtu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1483.
                            return v64;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmsgtu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1480.
                return v63;
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v35 = C::def_inst(ctx, v22);
                            if let Some(v36) = v35 {
                                let v37 = &C::inst_data(ctx, v36);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v38,
                                    imm: v39,
                                } = v37
                                {
                                    if let &Opcode::Iconst = v38 {
                                        let v40 = C::u64_from_imm64(ctx, v39);
                                        let v41 = C::imm5_from_u64(ctx, v40);
                                        if let Some(v42) = v41 {
                                            let v23 = constructor_put_in_vreg(ctx, arg3);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v73 =
                                                constructor_rv_vmsleu_vi(ctx, v23, v42, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1514.
                                            return v73;
                                        }
                                    }
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v72 = constructor_rv_vmsleu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1511.
                            return v72;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v71 = constructor_rv_vmsgeu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1508.
                return v71;
            }
            &IntCC::UnsignedLessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v35 = C::def_inst(ctx, v22);
                            if let Some(v36) = v35 {
                                let v37 = &C::inst_data(ctx, v36);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v38,
                                    imm: v39,
                                } = v37
                                {
                                    if let &Opcode::Iconst = v38 {
                                        let v40 = C::u64_from_imm64(ctx, v39);
                                        let v41 = C::imm5_from_u64(ctx, v40);
                                        if let Some(v42) = v41 {
                                            let v23 = constructor_put_in_vreg(ctx, arg3);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v52 =
                                                constructor_rv_vmsgtu_vi(ctx, v23, v42, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1439.
                                            return v52;
                                        }
                                    }
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v51 = constructor_rv_vmsgtu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1436.
                            return v51;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v50 = constructor_rv_vmsltu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1433.
                            return v50;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v49 = constructor_rv_vmsltu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1430.
                return v49;
            }
            &IntCC::UnsignedLessThanOrEqual => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::def_inst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = &C::inst_data(ctx, v27);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v29,
                                    imm: v30,
                                } = v28
                                {
                                    if let &Opcode::Iconst = v29 {
                                        let v31 = C::u64_from_imm64(ctx, v30);
                                        let v32 = C::imm5_from_u64(ctx, v31);
                                        if let Some(v33) = v32 {
                                            let v6 = constructor_put_in_vreg(ctx, arg2);
                                            let v8 = &constructor_unmasked(ctx);
                                            let v9 = C::vstate_from_type(ctx, v2);
                                            let v59 =
                                                constructor_rv_vmsleu_vi(ctx, v6, v33, v8, v9);
                                            // Rule at src/isa/riscv64/inst_vector.isle line 1464.
                                            return v59;
                                        }
                                    }
                                }
                            }
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v58 = constructor_rv_vmsleu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1461.
                            return v58;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmsleu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1458.
                return v57;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_icmp_mask", "src/isa/riscv64/inst_vector.isle line 1392"
    )
}

// Generated as internal constructor for term gen_fcmp_mask.
pub fn constructor_gen_fcmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &FloatCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmfeq_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1541.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmfeq_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1538.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmfeq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1535.
                return v10;
            }
            &FloatCC::GreaterThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmflt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1586.
                            return v37;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v36 = constructor_rv_vmfgt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1583.
                            return v36;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v35 = constructor_rv_vmfgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1580.
                return v35;
            }
            &FloatCC::GreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v40 = constructor_rv_vmfle_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1597.
                            return v40;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmfge_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1594.
                            return v39;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v38 = constructor_rv_vmfge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1591.
                return v38;
            }
            &FloatCC::LessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v31 = constructor_rv_vmfgt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1564.
                            return v31;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v30 = constructor_rv_vmflt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1561.
                            return v30;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v29 = constructor_rv_vmflt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1558.
                return v29;
            }
            &FloatCC::LessThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmfge_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1575.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmfle_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1572.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmfle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1569.
                return v32;
            }
            &FloatCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v28 = constructor_rv_vmfne_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1553.
                            return v28;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v27 = constructor_rv_vmfne_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1550.
                            return v27;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v26 = constructor_rv_vmfne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1547.
                return v26;
            }
            &FloatCC::Ordered => {
                let v42 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg2, arg2);
                let v43 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmand_mm(ctx, v42, v43, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1602.
                return v44;
            }
            &FloatCC::OrderedNotEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1618.
                return v52;
            }
            &FloatCC::Unordered => {
                let v46 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg2, arg2);
                let v47 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmor_mm(ctx, v46, v47, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1610.
                return v48;
            }
            &FloatCC::UnorderedOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmnor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1626.
                return v53;
            }
            &FloatCC::UnorderedOrGreaterThan => {
                let v55 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v56 = constructor_rv_vmnot_m(ctx, v55, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1634.
                return v56;
            }
            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmnot_m(ctx, v50, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1639.
                return v57;
            }
            &FloatCC::UnorderedOrLessThan => {
                let v59 =
                    constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmnot_m(ctx, v59, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1644.
                return v60;
            }
            &FloatCC::UnorderedOrLessThanOrEqual => {
                let v62 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmnot_m(ctx, v62, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1649.
                return v63;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_fcmp_mask", "src/isa/riscv64/inst_vector.isle line 1531"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1030,
            args: ref v1031,
            flags: v1032,
        } => {
            if let &Opcode::AtomicCas = v1030 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v969 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v970) = v969 {
                        let v1000 = C::temp_writable_reg(ctx, v970);
                        let v1037 = C::temp_writable_reg(ctx, v970);
                        let v1033 = C::unpack_value_array_3(ctx, v1031);
                        let v1038 = constructor_put_in_xreg(ctx, v1033.0);
                        let v1039 = constructor_gen_atomic_offset(ctx, v1038, v970);
                        let v1041 = constructor_put_in_xreg(ctx, v1033.1);
                        let v1042 = constructor_zext(ctx, v1041, v970, I64);
                        let v1044 = constructor_put_in_xreg(ctx, v1033.0);
                        let v1045 = constructor_gen_atomic_p(ctx, v1044, v970);
                        let v1047 = C::put_in_reg(ctx, v1033.2);
                        let v1040 = C::xreg_to_reg(ctx, v1039);
                        let v1043 = C::xreg_to_reg(ctx, v1042);
                        let v1046 = C::xreg_to_reg(ctx, v1045);
                        let v1048 = MInst::AtomicCas {
                            offset: v1040,
                            t0: v1000,
                            dst: v1037,
                            e: v1043,
                            addr: v1046,
                            v: v1047,
                            ty: v970,
                        };
                        let v1049 = C::emit(ctx, &v1048);
                        let v1050 = C::writable_reg_to_reg(ctx, v1037);
                        let v1051 = constructor_output_reg(ctx, v1050);
                        // Rule at src/isa/riscv64/lower.isle line 1111.
                        return Some(v1051);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v971,
            args: ref v972,
            flags: v973,
            op: ref v974,
        } => {
            if let &Opcode::AtomicRmw = v971 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v969 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v970) = v969 {
                        let v984 = C::fits_in_16(ctx, v970);
                        if let Some(v985) = v984 {
                            let v990 = C::is_atomic_rmw_max_etc(ctx, v974);
                            if let Some(v991) = v990 {
                                match v991.1 {
                                    true => {
                                        let v975 = C::unpack_value_array_2(ctx, v972);
                                        let v986 = constructor_put_in_xreg(ctx, v975.0);
                                        let v987 = constructor_put_in_xreg(ctx, v975.1);
                                        let v994 = constructor_sext(ctx, v987, v985, I64);
                                        let v995 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v991.0, v985, v986, v994,
                                        );
                                        let v996 = constructor_output_xreg(ctx, v995);
                                        // Rule at src/isa/riscv64/lower.isle line 1043.
                                        return Some(v996);
                                    }
                                    false => {
                                        let v975 = C::unpack_value_array_2(ctx, v972);
                                        let v986 = constructor_put_in_xreg(ctx, v975.0);
                                        let v987 = constructor_put_in_xreg(ctx, v975.1);
                                        let v997 = constructor_zext(ctx, v987, v985, I64);
                                        let v998 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v991.0, v985, v986, v997,
                                        );
                                        let v999 = constructor_output_xreg(ctx, v998);
                                        // Rule at src/isa/riscv64/lower.isle line 1049.
                                        return Some(v999);
                                    }
                                    _ => {}
                                }
                            }
                            let v975 = C::unpack_value_array_2(ctx, v972);
                            let v986 = constructor_put_in_xreg(ctx, v975.0);
                            let v987 = constructor_put_in_xreg(ctx, v975.1);
                            let v988 = constructor_gen_atomic_rmw_loop(ctx, v974, v985, v986, v987);
                            let v989 = constructor_output_xreg(ctx, v988);
                            // Rule at src/isa/riscv64/lower.isle line 1036.
                            return Some(v989);
                        }
                        match v974 {
                            &AtomicRmwOp::Nand => {
                                let v975 = C::unpack_value_array_2(ctx, v972);
                                let v986 = constructor_put_in_xreg(ctx, v975.0);
                                let v987 = constructor_put_in_xreg(ctx, v975.1);
                                let v1010 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v970,
                                    v986,
                                    v987,
                                );
                                let v1011 = constructor_output_xreg(ctx, v1010);
                                // Rule at src/isa/riscv64/lower.isle line 1076.
                                return Some(v1011);
                            }
                            &AtomicRmwOp::Sub => {
                                let v1000 = C::temp_writable_reg(ctx, v970);
                                let v975 = C::unpack_value_array_2(ctx, v972);
                                let v987 = constructor_put_in_xreg(ctx, v975.1);
                                let v1001 = constructor_rv_neg(ctx, v987);
                                let v1004 =
                                    &constructor_get_atomic_rmw_op(ctx, v970, &AtomicRmwOp::Add);
                                let v1005 = C::put_in_reg(ctx, v975.0);
                                let v1006 = C::atomic_amo(ctx);
                                let v1002 = C::xreg_to_reg(ctx, v1001);
                                let v1007 = constructor_gen_atomic(ctx, v1004, v1005, v1002, v1006);
                                let v1008 = constructor_output_reg(ctx, v1007);
                                // Rule at src/isa/riscv64/lower.isle line 1058.
                                return Some(v1008);
                            }
                            _ => {}
                        }
                        let v978 = &constructor_get_atomic_rmw_op(ctx, v970, v974);
                        let v975 = C::unpack_value_array_2(ctx, v972);
                        let v979 = C::put_in_reg(ctx, v975.0);
                        let v980 = C::put_in_reg(ctx, v975.1);
                        let v981 = C::atomic_amo(ctx);
                        let v982 = constructor_gen_atomic(ctx, v978, v979, v980, v981);
                        let v983 = constructor_output_reg(ctx, v982);
                        // Rule at src/isa/riscv64/lower.isle line 1029.
                        return Some(v983);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v36,
            args: ref v37,
        } => {
            match v36 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v172 = C::def_inst(ctx, v69);
                                        if let Some(v173) = v172 {
                                            let v174 = &C::inst_data(ctx, v173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v189,
                                                imm: v190,
                                            } = v174
                                            {
                                                if let &Opcode::Iconst = v189 {
                                                    let v191 = C::u64_from_imm64(ctx, v190);
                                                    let v1581 = C::uimm5_from_u64(ctx, v191);
                                                    if let Some(v1582) = v1581 {
                                                        let v163 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v1583 = constructor_rv_vrgather_vi(
                                                            ctx, v163, v1582, v165, v166,
                                                        );
                                                        let v1584 =
                                                            constructor_output_vreg(ctx, v1583);
                                                        // Rule at src/isa/riscv64/lower.isle line 1824.
                                                        return Some(v1584);
                                                    }
                                                }
                                            }
                                        }
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1579 =
                                            constructor_rv_vrgather_vx(ctx, v163, v169, v165, v166);
                                        let v1580 = constructor_output_vreg(ctx, v1579);
                                        // Rule at src/isa/riscv64/lower.isle line 1821.
                                        return Some(v1580);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1577 = constructor_rv_vrgather_vv(ctx, v163, v164, v165, v166);
                            let v1578 = constructor_output_vreg(ctx, v1577);
                            // Rule at src/isa/riscv64/lower.isle line 1818.
                            return Some(v1578);
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1219 =
                                            constructor_rv_vmin_vx(ctx, v196, v197, v165, v166);
                                        let v1220 = constructor_output_vreg(ctx, v1219);
                                        // Rule at src/isa/riscv64/lower.isle line 1334.
                                        return Some(v1220);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1217 =
                                            constructor_rv_vmin_vx(ctx, v163, v169, v165, v166);
                                        let v1218 = constructor_output_vreg(ctx, v1217);
                                        // Rule at src/isa/riscv64/lower.isle line 1331.
                                        return Some(v1218);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1215 = constructor_rv_vmin_vv(ctx, v163, v164, v165, v166);
                            let v1216 = constructor_output_vreg(ctx, v1215);
                            // Rule at src/isa/riscv64/lower.isle line 1328.
                            return Some(v1216);
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v1202 = constructor_ext_int_if_need(ctx, true, v138, v364);
                            let v839 = C::put_in_regs(ctx, v38.1);
                            let v1203 = constructor_ext_int_if_need(ctx, true, v839, v364);
                            let v1213 = constructor_gen_int_select(
                                ctx,
                                v364,
                                &IntSelectOP::Smin,
                                v1202,
                                v1203,
                            );
                            let v1214 = C::output(ctx, v1213);
                            // Rule at src/isa/riscv64/lower.isle line 1325.
                            return Some(v1214);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1240 =
                                            constructor_rv_vminu_vx(ctx, v196, v197, v165, v166);
                                        let v1241 = constructor_output_vreg(ctx, v1240);
                                        // Rule at src/isa/riscv64/lower.isle line 1362.
                                        return Some(v1241);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1238 =
                                            constructor_rv_vminu_vx(ctx, v163, v169, v165, v166);
                                        let v1239 = constructor_output_vreg(ctx, v1238);
                                        // Rule at src/isa/riscv64/lower.isle line 1359.
                                        return Some(v1239);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1236 = constructor_rv_vminu_vv(ctx, v163, v164, v165, v166);
                            let v1237 = constructor_output_vreg(ctx, v1236);
                            // Rule at src/isa/riscv64/lower.isle line 1356.
                            return Some(v1237);
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v1223 = constructor_ext_int_if_need(ctx, false, v138, v364);
                            let v839 = C::put_in_regs(ctx, v38.1);
                            let v1224 = constructor_ext_int_if_need(ctx, false, v839, v364);
                            let v1234 = constructor_gen_int_select(
                                ctx,
                                v364,
                                &IntSelectOP::Umin,
                                v1223,
                                v1224,
                            );
                            let v1235 = C::output(ctx, v1234);
                            // Rule at src/isa/riscv64/lower.isle line 1353.
                            return Some(v1235);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1210 =
                                            constructor_rv_vmax_vx(ctx, v196, v197, v165, v166);
                                        let v1211 = constructor_output_vreg(ctx, v1210);
                                        // Rule at src/isa/riscv64/lower.isle line 1320.
                                        return Some(v1211);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1208 =
                                            constructor_rv_vmax_vx(ctx, v163, v169, v165, v166);
                                        let v1209 = constructor_output_vreg(ctx, v1208);
                                        // Rule at src/isa/riscv64/lower.isle line 1317.
                                        return Some(v1209);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1206 = constructor_rv_vmax_vv(ctx, v163, v164, v165, v166);
                            let v1207 = constructor_output_vreg(ctx, v1206);
                            // Rule at src/isa/riscv64/lower.isle line 1314.
                            return Some(v1207);
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v1202 = constructor_ext_int_if_need(ctx, true, v138, v364);
                            let v839 = C::put_in_regs(ctx, v38.1);
                            let v1203 = constructor_ext_int_if_need(ctx, true, v839, v364);
                            let v1204 = constructor_gen_int_select(
                                ctx,
                                v364,
                                &IntSelectOP::Smax,
                                v1202,
                                v1203,
                            );
                            let v1205 = C::output(ctx, v1204);
                            // Rule at src/isa/riscv64/lower.isle line 1311.
                            return Some(v1205);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1231 =
                                            constructor_rv_vmaxu_vx(ctx, v196, v197, v165, v166);
                                        let v1232 = constructor_output_vreg(ctx, v1231);
                                        // Rule at src/isa/riscv64/lower.isle line 1348.
                                        return Some(v1232);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1229 =
                                            constructor_rv_vmaxu_vx(ctx, v163, v169, v165, v166);
                                        let v1230 = constructor_output_vreg(ctx, v1229);
                                        // Rule at src/isa/riscv64/lower.isle line 1345.
                                        return Some(v1230);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1227 = constructor_rv_vmaxu_vv(ctx, v163, v164, v165, v166);
                            let v1228 = constructor_output_vreg(ctx, v1227);
                            // Rule at src/isa/riscv64/lower.isle line 1342.
                            return Some(v1228);
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v1223 = constructor_ext_int_if_need(ctx, false, v138, v364);
                            let v839 = C::put_in_regs(ctx, v38.1);
                            let v1224 = constructor_ext_int_if_need(ctx, false, v839, v364);
                            let v1225 = constructor_gen_int_select(
                                ctx,
                                v364,
                                &IntSelectOP::Umax,
                                v1223,
                                v1224,
                            );
                            let v1226 = C::output(ctx, v1225);
                            // Rule at src/isa/riscv64/lower.isle line 1339.
                            return Some(v1226);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v701 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v702) = v701 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v163 = constructor_put_in_vreg(ctx, v38.0);
                                let v164 = constructor_put_in_vreg(ctx, v38.1);
                                let v165 = &constructor_unmasked(ctx);
                                let v166 = C::vstate_from_type(ctx, v11);
                                let v523 = constructor_rv_vand_vv(ctx, v163, v164, v165, v166);
                                let v1671 = constructor_put_in_vreg(ctx, v38.0);
                                let v1672 = constructor_put_in_vreg(ctx, v38.1);
                                let v1673 = constructor_rv_vxor_vv(ctx, v1671, v1672, v165, v166);
                                let v1674 = constructor_rv_vssrl_vi(ctx, v1673, v702, v165, v166);
                                let v1675 = constructor_rv_vadd_vv(ctx, v523, v1674, v165, v166);
                                let v1676 = constructor_output_vreg(ctx, v1675);
                                // Rule at src/isa/riscv64/lower.isle line 1938.
                                return Some(v1676);
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v200 = C::def_inst(ctx, v77);
                                        if let Some(v201) = v200 {
                                            let v202 = &C::inst_data(ctx, v201);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v212,
                                                imm: v213,
                                            } = v202
                                            {
                                                if let &Opcode::Iconst = v212 {
                                                    let v214 = C::u64_from_imm64(ctx, v213);
                                                    let v215 = C::imm5_from_u64(ctx, v214);
                                                    if let Some(v216) = v215 {
                                                        let v196 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v1533 = constructor_rv_vsaddu_vi(
                                                            ctx, v196, v216, v165, v166,
                                                        );
                                                        let v1534 =
                                                            constructor_output_vreg(ctx, v1533);
                                                        // Rule at src/isa/riscv64/lower.isle line 1732.
                                                        return Some(v1534);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v172 = C::def_inst(ctx, v69);
                                        if let Some(v173) = v172 {
                                            let v174 = &C::inst_data(ctx, v173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v189,
                                                imm: v190,
                                            } = v174
                                            {
                                                if let &Opcode::Iconst = v189 {
                                                    let v191 = C::u64_from_imm64(ctx, v190);
                                                    let v192 = C::imm5_from_u64(ctx, v191);
                                                    if let Some(v193) = v192 {
                                                        let v163 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v1531 = constructor_rv_vsaddu_vi(
                                                            ctx, v163, v193, v165, v166,
                                                        );
                                                        let v1532 =
                                                            constructor_output_vreg(ctx, v1531);
                                                        // Rule at src/isa/riscv64/lower.isle line 1729.
                                                        return Some(v1532);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1529 =
                                            constructor_rv_vsaddu_vx(ctx, v196, v197, v165, v166);
                                        let v1530 = constructor_output_vreg(ctx, v1529);
                                        // Rule at src/isa/riscv64/lower.isle line 1726.
                                        return Some(v1530);
                                    }
                                }
                            }
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1527 =
                                            constructor_rv_vsaddu_vx(ctx, v163, v169, v165, v166);
                                        let v1528 = constructor_output_vreg(ctx, v1527);
                                        // Rule at src/isa/riscv64/lower.isle line 1723.
                                        return Some(v1528);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1525 = constructor_rv_vsaddu_vv(ctx, v163, v164, v165, v166);
                            let v1526 = constructor_output_vreg(ctx, v1525);
                            // Rule at src/isa/riscv64/lower.isle line 1720.
                            return Some(v1526);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v200 = C::def_inst(ctx, v77);
                                        if let Some(v201) = v200 {
                                            let v202 = &C::inst_data(ctx, v201);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v212,
                                                imm: v213,
                                            } = v202
                                            {
                                                if let &Opcode::Iconst = v212 {
                                                    let v214 = C::u64_from_imm64(ctx, v213);
                                                    let v215 = C::imm5_from_u64(ctx, v214);
                                                    if let Some(v216) = v215 {
                                                        let v196 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v1543 = constructor_rv_vsadd_vi(
                                                            ctx, v196, v216, v165, v166,
                                                        );
                                                        let v1544 =
                                                            constructor_output_vreg(ctx, v1543);
                                                        // Rule at src/isa/riscv64/lower.isle line 1749.
                                                        return Some(v1544);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v172 = C::def_inst(ctx, v69);
                                        if let Some(v173) = v172 {
                                            let v174 = &C::inst_data(ctx, v173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v189,
                                                imm: v190,
                                            } = v174
                                            {
                                                if let &Opcode::Iconst = v189 {
                                                    let v191 = C::u64_from_imm64(ctx, v190);
                                                    let v192 = C::imm5_from_u64(ctx, v191);
                                                    if let Some(v193) = v192 {
                                                        let v163 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v1541 = constructor_rv_vsadd_vi(
                                                            ctx, v163, v193, v165, v166,
                                                        );
                                                        let v1542 =
                                                            constructor_output_vreg(ctx, v1541);
                                                        // Rule at src/isa/riscv64/lower.isle line 1746.
                                                        return Some(v1542);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1539 =
                                            constructor_rv_vsadd_vx(ctx, v196, v197, v165, v166);
                                        let v1540 = constructor_output_vreg(ctx, v1539);
                                        // Rule at src/isa/riscv64/lower.isle line 1743.
                                        return Some(v1540);
                                    }
                                }
                            }
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1537 =
                                            constructor_rv_vsadd_vx(ctx, v163, v169, v165, v166);
                                        let v1538 = constructor_output_vreg(ctx, v1537);
                                        // Rule at src/isa/riscv64/lower.isle line 1740.
                                        return Some(v1538);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1535 = constructor_rv_vsadd_vv(ctx, v163, v164, v165, v166);
                            let v1536 = constructor_output_vreg(ctx, v1535);
                            // Rule at src/isa/riscv64/lower.isle line 1737.
                            return Some(v1536);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1547 =
                                            constructor_rv_vssubu_vx(ctx, v163, v169, v165, v166);
                                        let v1548 = constructor_output_vreg(ctx, v1547);
                                        // Rule at src/isa/riscv64/lower.isle line 1757.
                                        return Some(v1548);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1545 = constructor_rv_vssubu_vv(ctx, v163, v164, v165, v166);
                            let v1546 = constructor_output_vreg(ctx, v1545);
                            // Rule at src/isa/riscv64/lower.isle line 1754.
                            return Some(v1546);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1551 =
                                            constructor_rv_vssub_vx(ctx, v163, v169, v165, v166);
                                        let v1552 = constructor_output_vreg(ctx, v1551);
                                        // Rule at src/isa/riscv64/lower.isle line 1765.
                                        return Some(v1552);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1549 = constructor_rv_vssub_vv(ctx, v163, v164, v165, v166);
                            let v1550 = constructor_output_vreg(ctx, v1549);
                            // Rule at src/isa/riscv64/lower.isle line 1762.
                            return Some(v1550);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    match v76 {
                                        &Opcode::Splat => {
                                            let v200 = C::def_inst(ctx, v77);
                                            if let Some(v201) = v200 {
                                                let v202 = &C::inst_data(ctx, v201);
                                                match v202 {
                                                    &InstructionData::Unary {
                                                        opcode: ref v203,
                                                        arg: v204,
                                                    } => {
                                                        match v203 {
                                                            &Opcode::Uextend => {
                                                                let v45 = C::def_inst(ctx, v38.1);
                                                                if let Some(v46) = v45 {
                                                                    let v47 =
                                                                        &C::inst_data(ctx, v46);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v68,
                                                                        arg: v69,
                                                                    } = v47 {
                                                                        match v68 {
                                                                            &Opcode::UwidenLow => {
                                                                                let v70 = C::value_type(ctx, v69);
                                                                                let v240 = C::lane_type(ctx, v70);
                                                                                let v205 = C::value_type(ctx, v204);
                                                                                let v241 = C::ty_equal(ctx, v240, v205);
                                                                                if v241 == true {
                                                                                    let v242 = constructor_put_in_vreg(ctx, v69);
                                                                                    let v207 = constructor_put_in_xreg(ctx, v204);
                                                                                    let v165 = &constructor_unmasked(ctx);
                                                                                    let v220 = C::ty_half_lanes(ctx, v70);
                                                                                    let v221 = v220?;
                                                                                    let v222 = C::vstate_from_type(ctx, v221);
                                                                                    let v223 = C::vstate_mf2(ctx, v222);
                                                                                    let v271 = constructor_rv_vwaddu_vx(ctx, v242, v207, v165, v223);
                                                                                    let v272 = constructor_output_vreg(ctx, v271);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 204.
                                                                                    return Some(v272);
                                                                                }
                                                                            }
                                                                            &Opcode::UwidenHigh => {
                                                                                let v70 = C::value_type(ctx, v69);
                                                                                let v240 = C::lane_type(ctx, v70);
                                                                                let v205 = C::value_type(ctx, v204);
                                                                                let v241 = C::ty_equal(ctx, v240, v205);
                                                                                if v241 == true {
                                                                                    let v242 = constructor_put_in_vreg(ctx, v69);
                                                                                    let v259 = constructor_gen_slidedown_half(ctx, v70, v242);
                                                                                    let v260 = constructor_put_in_xreg(ctx, v204);
                                                                                    let v165 = &constructor_unmasked(ctx);
                                                                                    let v220 = C::ty_half_lanes(ctx, v70);
                                                                                    let v221 = v220?;
                                                                                    let v222 = C::vstate_from_type(ctx, v221);
                                                                                    let v223 = C::vstate_mf2(ctx, v222);
                                                                                    let v281 = constructor_rv_vwaddu_vx(ctx, v259, v260, v165, v223);
                                                                                    let v282 = constructor_output_vreg(ctx, v281);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 227.
                                                                                    return Some(v282);
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v178 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v179) = v178 {
                                                                    let v180 =
                                                                        C::lane_type(ctx, v179);
                                                                    let v205 =
                                                                        C::value_type(ctx, v204);
                                                                    let v206 = C::ty_equal(
                                                                        ctx, v180, v205,
                                                                    );
                                                                    if v206 == true {
                                                                        let v196 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v207 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v204,
                                                                            );
                                                                        let v165 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v183 =
                                                                            C::vstate_from_type(
                                                                                ctx, v179,
                                                                            );
                                                                        let v184 = C::vstate_mf2(
                                                                            ctx, v183,
                                                                        );
                                                                        let v210 = constructor_rv_vwaddu_wx(ctx, v196, v207, v165, v184);
                                                                        let v211 =
                                                                            constructor_output_vreg(
                                                                                ctx, v210,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 134.
                                                                        return Some(v211);
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v45 = C::def_inst(ctx, v38.1);
                                                                if let Some(v46) = v45 {
                                                                    let v47 =
                                                                        &C::inst_data(ctx, v46);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v68,
                                                                        arg: v69,
                                                                    } = v47 {
                                                                        match v68 {
                                                                            &Opcode::SwidenLow => {
                                                                                let v70 = C::value_type(ctx, v69);
                                                                                let v240 = C::lane_type(ctx, v70);
                                                                                let v205 = C::value_type(ctx, v204);
                                                                                let v241 = C::ty_equal(ctx, v240, v205);
                                                                                if v241 == true {
                                                                                    let v242 = constructor_put_in_vreg(ctx, v69);
                                                                                    let v207 = constructor_put_in_xreg(ctx, v204);
                                                                                    let v165 = &constructor_unmasked(ctx);
                                                                                    let v220 = C::ty_half_lanes(ctx, v70);
                                                                                    let v221 = v220?;
                                                                                    let v222 = C::vstate_from_type(ctx, v221);
                                                                                    let v223 = C::vstate_mf2(ctx, v222);
                                                                                    let v243 = constructor_rv_vwadd_vx(ctx, v242, v207, v165, v223);
                                                                                    let v244 = constructor_output_vreg(ctx, v243);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 159.
                                                                                    return Some(v244);
                                                                                }
                                                                            }
                                                                            &Opcode::SwidenHigh => {
                                                                                let v70 = C::value_type(ctx, v69);
                                                                                let v240 = C::lane_type(ctx, v70);
                                                                                let v205 = C::value_type(ctx, v204);
                                                                                let v241 = C::ty_equal(ctx, v240, v205);
                                                                                if v241 == true {
                                                                                    let v242 = constructor_put_in_vreg(ctx, v69);
                                                                                    let v259 = constructor_gen_slidedown_half(ctx, v70, v242);
                                                                                    let v260 = constructor_put_in_xreg(ctx, v204);
                                                                                    let v165 = &constructor_unmasked(ctx);
                                                                                    let v220 = C::ty_half_lanes(ctx, v70);
                                                                                    let v221 = v220?;
                                                                                    let v222 = C::vstate_from_type(ctx, v221);
                                                                                    let v223 = C::vstate_mf2(ctx, v222);
                                                                                    let v261 = constructor_rv_vwadd_vx(ctx, v259, v260, v165, v223);
                                                                                    let v262 = constructor_output_vreg(ctx, v261);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 182.
                                                                                    return Some(v262);
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v178 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v179) = v178 {
                                                                    let v180 =
                                                                        C::lane_type(ctx, v179);
                                                                    let v205 =
                                                                        C::value_type(ctx, v204);
                                                                    let v206 = C::ty_equal(
                                                                        ctx, v180, v205,
                                                                    );
                                                                    if v206 == true {
                                                                        let v196 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v207 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v204,
                                                                            );
                                                                        let v165 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v183 =
                                                                            C::vstate_from_type(
                                                                                ctx, v179,
                                                                            );
                                                                        let v184 = C::vstate_mf2(
                                                                            ctx, v183,
                                                                        );
                                                                        let v208 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v196, v207,
                                                                                v165, v184,
                                                                            );
                                                                        let v209 =
                                                                            constructor_output_vreg(
                                                                                ctx, v208,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 129.
                                                                        return Some(v209);
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v212,
                                                        imm: v213,
                                                    } => {
                                                        if let &Opcode::Iconst = v212 {
                                                            let v214 = C::u64_from_imm64(ctx, v213);
                                                            let v215 = C::imm5_from_u64(ctx, v214);
                                                            if let Some(v216) = v215 {
                                                                let v196 = constructor_put_in_vreg(
                                                                    ctx, v38.1,
                                                                );
                                                                let v165 =
                                                                    &constructor_unmasked(ctx);
                                                                let v166 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v217 = constructor_rv_vadd_vi(
                                                                    ctx, v196, v216, v165, v166,
                                                                );
                                                                let v218 = constructor_output_vreg(
                                                                    ctx, v217,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 139.
                                                                return Some(v218);
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v197 = constructor_put_in_xreg(ctx, v77);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v198 =
                                                constructor_rv_vadd_vx(ctx, v196, v197, v165, v166);
                                            let v199 = constructor_output_vreg(ctx, v198);
                                            // Rule at src/isa/riscv64/lower.isle line 126.
                                            return Some(v199);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Sextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v182 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v238 = constructor_rv_vwadd_vx(ctx, v233, v182, v165, v230);
                                                                            let v239 = constructor_output_vreg(ctx, v238);
                                                                            // Rule at src/isa/riscv64/lower.isle line 154.
                                                                            return Some(v239);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v234 = constructor_rv_vwadd_vv(
                                                                ctx, v233, v219, v165, v230,
                                                            );
                                                            let v235 =
                                                                constructor_output_vreg(ctx, v234);
                                                            // Rule at src/isa/riscv64/lower.isle line 150.
                                                            return Some(v235);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v283 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v219,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v284 = constructor_rv_vwadd_vv(
                                                                ctx, v233, v283, v165, v230,
                                                            );
                                                            let v285 =
                                                                constructor_output_vreg(ctx, v284);
                                                            // Rule at src/isa/riscv64/lower.isle line 234.
                                                            return Some(v285);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v226 = constructor_put_in_vreg(ctx, v77);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v78 = C::value_type(ctx, v77);
                                            let v227 = C::ty_half_lanes(ctx, v78);
                                            let v228 = v227?;
                                            let v229 = C::vstate_from_type(ctx, v228);
                                            let v230 = C::vstate_mf2(ctx, v229);
                                            let v231 = constructor_rv_vwadd_wv(
                                                ctx, v196, v226, v165, v230,
                                            );
                                            let v232 = constructor_output_vreg(ctx, v231);
                                            // Rule at src/isa/riscv64/lower.isle line 147.
                                            return Some(v232);
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Sextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v251 = constructor_gen_slidedown_half(ctx, v78, v233);
                                                                            let v256 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v257 = constructor_rv_vwadd_vx(ctx, v251, v256, v165, v230);
                                                                            let v258 = constructor_output_vreg(ctx, v257);
                                                                            // Rule at src/isa/riscv64/lower.isle line 177.
                                                                            return Some(v258);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v286 = constructor_rv_vwadd_vv(
                                                                ctx, v251, v252, v165, v230,
                                                            );
                                                            let v287 =
                                                                constructor_output_vreg(ctx, v286);
                                                            // Rule at src/isa/riscv64/lower.isle line 238.
                                                            return Some(v287);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v253 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v252,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v254 = constructor_rv_vwadd_vv(
                                                                ctx, v251, v253, v165, v230,
                                                            );
                                                            let v255 =
                                                                constructor_output_vreg(ctx, v254);
                                                            // Rule at src/isa/riscv64/lower.isle line 173.
                                                            return Some(v255);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v226 = constructor_put_in_vreg(ctx, v77);
                                            let v78 = C::value_type(ctx, v77);
                                            let v248 =
                                                constructor_gen_slidedown_half(ctx, v78, v226);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v227 = C::ty_half_lanes(ctx, v78);
                                            let v228 = v227?;
                                            let v229 = C::vstate_from_type(ctx, v228);
                                            let v230 = C::vstate_mf2(ctx, v229);
                                            let v249 = constructor_rv_vwadd_wv(
                                                ctx, v196, v248, v165, v230,
                                            );
                                            let v250 = constructor_output_vreg(ctx, v249);
                                            // Rule at src/isa/riscv64/lower.isle line 170.
                                            return Some(v250);
                                        }
                                        &Opcode::UwidenLow => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Uextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v182 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v269 = constructor_rv_vwaddu_vx(ctx, v233, v182, v165, v230);
                                                                            let v270 = constructor_output_vreg(ctx, v269);
                                                                            // Rule at src/isa/riscv64/lower.isle line 199.
                                                                            return Some(v270);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v267 = constructor_rv_vwaddu_vv(
                                                                ctx, v233, v219, v165, v230,
                                                            );
                                                            let v268 =
                                                                constructor_output_vreg(ctx, v267);
                                                            // Rule at src/isa/riscv64/lower.isle line 195.
                                                            return Some(v268);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v283 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v219,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v288 = constructor_rv_vwaddu_vv(
                                                                ctx, v233, v283, v165, v230,
                                                            );
                                                            let v289 =
                                                                constructor_output_vreg(ctx, v288);
                                                            // Rule at src/isa/riscv64/lower.isle line 244.
                                                            return Some(v289);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v226 = constructor_put_in_vreg(ctx, v77);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v78 = C::value_type(ctx, v77);
                                            let v227 = C::ty_half_lanes(ctx, v78);
                                            let v228 = v227?;
                                            let v229 = C::vstate_from_type(ctx, v228);
                                            let v230 = C::vstate_mf2(ctx, v229);
                                            let v265 = constructor_rv_vwaddu_wv(
                                                ctx, v196, v226, v165, v230,
                                            );
                                            let v266 = constructor_output_vreg(ctx, v265);
                                            // Rule at src/isa/riscv64/lower.isle line 192.
                                            return Some(v266);
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Uextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v251 = constructor_gen_slidedown_half(ctx, v78, v233);
                                                                            let v256 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v279 = constructor_rv_vwaddu_vx(ctx, v251, v256, v165, v230);
                                                                            let v280 = constructor_output_vreg(ctx, v279);
                                                                            // Rule at src/isa/riscv64/lower.isle line 222.
                                                                            return Some(v280);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v290 = constructor_rv_vwaddu_vv(
                                                                ctx, v251, v252, v165, v230,
                                                            );
                                                            let v291 =
                                                                constructor_output_vreg(ctx, v290);
                                                            // Rule at src/isa/riscv64/lower.isle line 248.
                                                            return Some(v291);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v253 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v252,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v277 = constructor_rv_vwaddu_vv(
                                                                ctx, v251, v253, v165, v230,
                                                            );
                                                            let v278 =
                                                                constructor_output_vreg(ctx, v277);
                                                            // Rule at src/isa/riscv64/lower.isle line 218.
                                                            return Some(v278);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v226 = constructor_put_in_vreg(ctx, v77);
                                            let v78 = C::value_type(ctx, v77);
                                            let v248 =
                                                constructor_gen_slidedown_half(ctx, v78, v226);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v227 = C::ty_half_lanes(ctx, v78);
                                            let v228 = v227?;
                                            let v229 = C::vstate_from_type(ctx, v228);
                                            let v230 = C::vstate_mf2(ctx, v229);
                                            let v275 = constructor_rv_vwaddu_wv(
                                                ctx, v196, v248, v165, v230,
                                            );
                                            let v276 = constructor_output_vreg(ctx, v275);
                                            // Rule at src/isa/riscv64/lower.isle line 215.
                                            return Some(v276);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    match v68 {
                                        &Opcode::Splat => {
                                            let v172 = C::def_inst(ctx, v69);
                                            if let Some(v173) = v172 {
                                                let v174 = &C::inst_data(ctx, v173);
                                                match v174 {
                                                    &InstructionData::Unary {
                                                        opcode: ref v175,
                                                        arg: v176,
                                                    } => {
                                                        match v175 {
                                                            &Opcode::Uextend => {
                                                                let v178 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v179) = v178 {
                                                                    let v180 =
                                                                        C::lane_type(ctx, v179);
                                                                    let v177 =
                                                                        C::value_type(ctx, v176);
                                                                    let v181 = C::ty_equal(
                                                                        ctx, v180, v177,
                                                                    );
                                                                    if v181 == true {
                                                                        let v163 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v182 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v176,
                                                                            );
                                                                        let v165 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v183 =
                                                                            C::vstate_from_type(
                                                                                ctx, v179,
                                                                            );
                                                                        let v184 = C::vstate_mf2(
                                                                            ctx, v183,
                                                                        );
                                                                        let v187 = constructor_rv_vwaddu_wx(ctx, v163, v182, v165, v184);
                                                                        let v188 =
                                                                            constructor_output_vreg(
                                                                                ctx, v187,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 117.
                                                                        return Some(v188);
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v178 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v179) = v178 {
                                                                    let v180 =
                                                                        C::lane_type(ctx, v179);
                                                                    let v177 =
                                                                        C::value_type(ctx, v176);
                                                                    let v181 = C::ty_equal(
                                                                        ctx, v180, v177,
                                                                    );
                                                                    if v181 == true {
                                                                        let v163 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v182 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v176,
                                                                            );
                                                                        let v165 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v183 =
                                                                            C::vstate_from_type(
                                                                                ctx, v179,
                                                                            );
                                                                        let v184 = C::vstate_mf2(
                                                                            ctx, v183,
                                                                        );
                                                                        let v185 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v163, v182,
                                                                                v165, v184,
                                                                            );
                                                                        let v186 =
                                                                            constructor_output_vreg(
                                                                                ctx, v185,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 112.
                                                                        return Some(v186);
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v189,
                                                        imm: v190,
                                                    } => {
                                                        if let &Opcode::Iconst = v189 {
                                                            let v191 = C::u64_from_imm64(ctx, v190);
                                                            let v192 = C::imm5_from_u64(ctx, v191);
                                                            if let Some(v193) = v192 {
                                                                let v163 = constructor_put_in_vreg(
                                                                    ctx, v38.0,
                                                                );
                                                                let v165 =
                                                                    &constructor_unmasked(ctx);
                                                                let v166 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v194 = constructor_rv_vadd_vi(
                                                                    ctx, v163, v193, v165, v166,
                                                                );
                                                                let v195 = constructor_output_vreg(
                                                                    ctx, v194,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 122.
                                                                return Some(v195);
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v169 = constructor_put_in_xreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v170 =
                                                constructor_rv_vadd_vx(ctx, v163, v169, v165, v166);
                                            let v171 = constructor_output_vreg(ctx, v170);
                                            // Rule at src/isa/riscv64/lower.isle line 109.
                                            return Some(v171);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v70 = C::value_type(ctx, v69);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v224 = constructor_rv_vwadd_wv(
                                                ctx, v163, v219, v165, v223,
                                            );
                                            let v225 = constructor_output_vreg(ctx, v224);
                                            // Rule at src/isa/riscv64/lower.isle line 144.
                                            return Some(v225);
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v70 = C::value_type(ctx, v69);
                                            let v245 =
                                                constructor_gen_slidedown_half(ctx, v70, v219);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v246 = constructor_rv_vwadd_wv(
                                                ctx, v163, v245, v165, v223,
                                            );
                                            let v247 = constructor_output_vreg(ctx, v246);
                                            // Rule at src/isa/riscv64/lower.isle line 167.
                                            return Some(v247);
                                        }
                                        &Opcode::UwidenLow => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v70 = C::value_type(ctx, v69);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v263 = constructor_rv_vwaddu_wv(
                                                ctx, v163, v219, v165, v223,
                                            );
                                            let v264 = constructor_output_vreg(ctx, v263);
                                            // Rule at src/isa/riscv64/lower.isle line 189.
                                            return Some(v264);
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v70 = C::value_type(ctx, v69);
                                            let v245 =
                                                constructor_gen_slidedown_half(ctx, v70, v219);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v273 = constructor_rv_vwaddu_wv(
                                                ctx, v163, v245, v165, v223,
                                            );
                                            let v274 = constructor_output_vreg(ctx, v273);
                                            // Rule at src/isa/riscv64/lower.isle line 212.
                                            return Some(v274);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v167 = constructor_rv_vadd_vv(ctx, v163, v164, v165, v166);
                            let v168 = constructor_output_vreg(ctx, v167);
                            // Rule at src/isa/riscv64/lower.isle line 106.
                            return Some(v168);
                        }
                        match v3 {
                            I64 => {
                                let v71 = C::has_zba(ctx);
                                if v71 == true {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v57 = C::def_inst(ctx, v38.0);
                                    if let Some(v58) = v57 {
                                        let v59 = &C::inst_data(ctx, v58);
                                        if let &InstructionData::Binary {
                                            opcode: ref v99,
                                            args: ref v100,
                                        } = v59
                                        {
                                            if let &Opcode::Ishl = v99 {
                                                let v101 = C::unpack_value_array_2(ctx, v100);
                                                let v104 = C::maybe_uextend(ctx, v101.1);
                                                if let Some(v105) = v104 {
                                                    let v106 = C::def_inst(ctx, v105);
                                                    if let Some(v107) = v106 {
                                                        let v108 = &C::inst_data(ctx, v107);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v109,
                                                            imm: v110,
                                                        } = v108
                                                        {
                                                            if let &Opcode::Iconst = v109 {
                                                                let v127 = C::def_inst(ctx, v101.0);
                                                                if let Some(v128) = v127 {
                                                                    let v129 =
                                                                        &C::inst_data(ctx, v128);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v130,
                                                                        arg: v131,
                                                                    } = v129 {
                                                                        if let &Opcode::Uextend = v130 {
                                                                            let v132 = C::value_type(ctx, v131);
                                                                            if v132 == I32 {
                                                                                let v133 = &constructor_match_shnadd_uw(ctx, v110);
                                                                                if let Some(v134) = v133 {
                                                                                    let v135 = C::put_in_reg(ctx, v131);
                                                                                    let v65 = C::put_in_reg(ctx, v38.1);
                                                                                    let v136 = constructor_alu_rrr(ctx, v134, v135, v65);
                                                                                    let v137 = constructor_output_reg(ctx, v136);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 89.
                                                                                    return Some(v137);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v45 = C::def_inst(ctx, v38.1);
                                    if let Some(v46) = v45 {
                                        let v47 = &C::inst_data(ctx, v46);
                                        if let &InstructionData::Binary {
                                            opcode: ref v82,
                                            args: ref v83,
                                        } = v47
                                        {
                                            if let &Opcode::Ishl = v82 {
                                                let v84 = C::unpack_value_array_2(ctx, v83);
                                                let v87 = C::maybe_uextend(ctx, v84.1);
                                                if let Some(v88) = v87 {
                                                    let v89 = C::def_inst(ctx, v88);
                                                    if let Some(v90) = v89 {
                                                        let v91 = &C::inst_data(ctx, v90);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v92,
                                                            imm: v93,
                                                        } = v91
                                                        {
                                                            if let &Opcode::Iconst = v92 {
                                                                let v116 = C::def_inst(ctx, v84.0);
                                                                if let Some(v117) = v116 {
                                                                    let v118 =
                                                                        &C::inst_data(ctx, v117);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v119,
                                                                        arg: v120,
                                                                    } = v118 {
                                                                        if let &Opcode::Uextend = v119 {
                                                                            let v121 = C::value_type(ctx, v120);
                                                                            if v121 == I32 {
                                                                                let v122 = &constructor_match_shnadd_uw(ctx, v93);
                                                                                if let Some(v123) = v122 {
                                                                                    let v124 = C::put_in_reg(ctx, v120);
                                                                                    let v54 = C::put_in_reg(ctx, v38.0);
                                                                                    let v125 = constructor_alu_rrr(ctx, v123, v124, v54);
                                                                                    let v126 = constructor_output_reg(ctx, v125);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 84.
                                                                                    return Some(v126);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v58) = v57 {
                                        let v59 = &C::inst_data(ctx, v58);
                                        match v59 {
                                            &InstructionData::Binary {
                                                opcode: ref v99,
                                                args: ref v100,
                                            } => {
                                                if let &Opcode::Ishl = v99 {
                                                    let v101 = C::unpack_value_array_2(ctx, v100);
                                                    let v104 = C::maybe_uextend(ctx, v101.1);
                                                    if let Some(v105) = v104 {
                                                        let v106 = C::def_inst(ctx, v105);
                                                        if let Some(v107) = v106 {
                                                            let v108 = &C::inst_data(ctx, v107);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v109,
                                                                imm: v110,
                                                            } = v108
                                                            {
                                                                if let &Opcode::Iconst = v109 {
                                                                    let v111 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v110,
                                                                        );
                                                                    if let Some(v112) = v111 {
                                                                        let v113 = C::put_in_reg(
                                                                            ctx, v101.0,
                                                                        );
                                                                        let v65 = C::put_in_reg(
                                                                            ctx, v38.1,
                                                                        );
                                                                        let v114 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v112, v113,
                                                                                v65,
                                                                            );
                                                                        let v115 =
                                                                            constructor_output_reg(
                                                                                ctx, v114,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 67.
                                                                        return Some(v115);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v76,
                                                arg: v77,
                                            } => {
                                                if let &Opcode::Uextend = v76 {
                                                    let v78 = C::value_type(ctx, v77);
                                                    if v78 == I32 {
                                                        let v79 = constructor_put_in_xreg(ctx, v77);
                                                        let v42 =
                                                            constructor_put_in_xreg(ctx, v38.1);
                                                        let v80 =
                                                            constructor_rv_adduw(ctx, v79, v42);
                                                        let v81 = constructor_output_xreg(ctx, v80);
                                                        // Rule at src/isa/riscv64/lower.isle line 52.
                                                        return Some(v81);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v46) = v45 {
                                        let v47 = &C::inst_data(ctx, v46);
                                        match v47 {
                                            &InstructionData::Binary {
                                                opcode: ref v82,
                                                args: ref v83,
                                            } => {
                                                if let &Opcode::Ishl = v82 {
                                                    let v84 = C::unpack_value_array_2(ctx, v83);
                                                    let v87 = C::maybe_uextend(ctx, v84.1);
                                                    if let Some(v88) = v87 {
                                                        let v89 = C::def_inst(ctx, v88);
                                                        if let Some(v90) = v89 {
                                                            let v91 = &C::inst_data(ctx, v90);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v92,
                                                                imm: v93,
                                                            } = v91
                                                            {
                                                                if let &Opcode::Iconst = v92 {
                                                                    let v94 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v93,
                                                                        );
                                                                    if let Some(v95) = v94 {
                                                                        let v96 = C::put_in_reg(
                                                                            ctx, v84.0,
                                                                        );
                                                                        let v54 = C::put_in_reg(
                                                                            ctx, v38.0,
                                                                        );
                                                                        let v97 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v95, v96, v54,
                                                                            );
                                                                        let v98 =
                                                                            constructor_output_reg(
                                                                                ctx, v97,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 62.
                                                                        return Some(v98);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v68,
                                                arg: v69,
                                            } => {
                                                if let &Opcode::Uextend = v68 {
                                                    let v70 = C::value_type(ctx, v69);
                                                    if v70 == I32 {
                                                        let v72 = constructor_put_in_xreg(ctx, v69);
                                                        let v73 =
                                                            constructor_put_in_xreg(ctx, v38.0);
                                                        let v74 =
                                                            constructor_rv_adduw(ctx, v72, v73);
                                                        let v75 = constructor_output_xreg(ctx, v74);
                                                        // Rule at src/isa/riscv64/lower.isle line 48.
                                                        return Some(v75);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v138 = C::put_in_regs(ctx, v38.0);
                                let v140 = C::value_regs_get(ctx, v138, 0x0);
                                let v141 = C::xreg_new(ctx, v140);
                                let v142 = C::put_in_regs(ctx, v38.1);
                                let v143 = C::value_regs_get(ctx, v142, 0x0);
                                let v144 = C::xreg_new(ctx, v143);
                                let v145 = constructor_rv_add(ctx, v141, v144);
                                let v146 = C::put_in_regs(ctx, v38.1);
                                let v147 = C::value_regs_get(ctx, v146, 0x0);
                                let v148 = C::xreg_new(ctx, v147);
                                let v149 = constructor_rv_sltu(ctx, v145, v148);
                                let v150 = C::put_in_regs(ctx, v38.0);
                                let v152 = C::value_regs_get(ctx, v150, 0x1);
                                let v153 = C::xreg_new(ctx, v152);
                                let v154 = C::put_in_regs(ctx, v38.1);
                                let v155 = C::value_regs_get(ctx, v154, 0x1);
                                let v156 = C::xreg_new(ctx, v155);
                                let v157 = constructor_rv_add(ctx, v153, v156);
                                let v158 = constructor_rv_add(ctx, v157, v149);
                                let v159 = C::xreg_to_reg(ctx, v145);
                                let v160 = C::xreg_to_reg(ctx, v158);
                                let v161 = C::value_regs(ctx, v159, v160);
                                let v162 = C::output(ctx, v161);
                                // Rule at src/isa/riscv64/lower.isle line 95.
                                return Some(v162);
                            }
                            _ => {}
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v60,
                                    imm: v61,
                                } = v59
                                {
                                    if let &Opcode::Iconst = v60 {
                                        let v62 = C::u64_from_imm64(ctx, v61);
                                        let v63 = C::imm12_from_u64(ctx, v62);
                                        if let Some(v64) = v63 {
                                            let v53 = &constructor_select_addi(ctx, v35);
                                            let v65 = C::put_in_reg(ctx, v38.1);
                                            let v66 = constructor_alu_rr_imm12(ctx, v53, v65, v64);
                                            let v67 = constructor_output_reg(ctx, v66);
                                            // Rule at src/isa/riscv64/lower.isle line 43.
                                            return Some(v67);
                                        }
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v48,
                                    imm: v49,
                                } = v47
                                {
                                    if let &Opcode::Iconst = v48 {
                                        let v50 = C::u64_from_imm64(ctx, v49);
                                        let v51 = C::imm12_from_u64(ctx, v50);
                                        if let Some(v52) = v51 {
                                            let v53 = &constructor_select_addi(ctx, v35);
                                            let v54 = C::put_in_reg(ctx, v38.0);
                                            let v55 = constructor_alu_rr_imm12(ctx, v53, v54, v52);
                                            let v56 = constructor_output_reg(ctx, v55);
                                            // Rule at src/isa/riscv64/lower.isle line 40.
                                            return Some(v56);
                                        }
                                    }
                                }
                            }
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v43 = constructor_rv_add(ctx, v41, v42);
                            let v44 = constructor_output_xreg(ctx, v43);
                            // Rule at src/isa/riscv64/lower.isle line 36.
                            return Some(v44);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    match v76 {
                                        &Opcode::Splat => {
                                            let v200 = C::def_inst(ctx, v77);
                                            if let Some(v201) = v200 {
                                                let v202 = &C::inst_data(ctx, v201);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v212,
                                                    imm: v213,
                                                } = v202
                                                {
                                                    if let &Opcode::Iconst = v212 {
                                                        let v214 = C::u64_from_imm64(ctx, v213);
                                                        let v215 = C::imm5_from_u64(ctx, v214);
                                                        if let Some(v216) = v215 {
                                                            let v196 =
                                                                constructor_put_in_vreg(ctx, v38.1);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v166 =
                                                                C::vstate_from_type(ctx, v11);
                                                            let v329 = constructor_rv_vrsub_vi(
                                                                ctx, v196, v216, v165, v166,
                                                            );
                                                            let v330 =
                                                                constructor_output_vreg(ctx, v329);
                                                            // Rule at src/isa/riscv64/lower.isle line 293.
                                                            return Some(v330);
                                                        }
                                                    }
                                                }
                                            }
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v197 = constructor_put_in_xreg(ctx, v77);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v327 = constructor_rv_vrsub_vx(
                                                ctx, v196, v197, v165, v166,
                                            );
                                            let v328 = constructor_output_vreg(ctx, v327);
                                            // Rule at src/isa/riscv64/lower.isle line 290.
                                            return Some(v328);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Sextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v182 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v335 = constructor_rv_vwsub_vx(ctx, v233, v182, v165, v230);
                                                                            let v336 = constructor_output_vreg(ctx, v335);
                                                                            // Rule at src/isa/riscv64/lower.isle line 306.
                                                                            return Some(v336);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v333 = constructor_rv_vwsub_vv(
                                                                ctx, v233, v219, v165, v230,
                                                            );
                                                            let v334 =
                                                                constructor_output_vreg(ctx, v333);
                                                            // Rule at src/isa/riscv64/lower.isle line 302.
                                                            return Some(v334);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v283 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v219,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v355 = constructor_rv_vwsub_vv(
                                                                ctx, v233, v283, v165, v230,
                                                            );
                                                            let v356 =
                                                                constructor_output_vreg(ctx, v355);
                                                            // Rule at src/isa/riscv64/lower.isle line 357.
                                                            return Some(v356);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Sextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v251 = constructor_gen_slidedown_half(ctx, v78, v233);
                                                                            let v256 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v341 = constructor_rv_vwsub_vx(ctx, v251, v256, v165, v230);
                                                                            let v342 = constructor_output_vreg(ctx, v341);
                                                                            // Rule at src/isa/riscv64/lower.isle line 321.
                                                                            return Some(v342);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v357 = constructor_rv_vwsub_vv(
                                                                ctx, v251, v252, v165, v230,
                                                            );
                                                            let v358 =
                                                                constructor_output_vreg(ctx, v357);
                                                            // Rule at src/isa/riscv64/lower.isle line 361.
                                                            return Some(v358);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v253 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v252,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v339 = constructor_rv_vwsub_vv(
                                                                ctx, v251, v253, v165, v230,
                                                            );
                                                            let v340 =
                                                                constructor_output_vreg(ctx, v339);
                                                            // Rule at src/isa/riscv64/lower.isle line 317.
                                                            return Some(v340);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenLow => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Uextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v182 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v347 = constructor_rv_vwsubu_vx(ctx, v233, v182, v165, v230);
                                                                            let v348 = constructor_output_vreg(ctx, v347);
                                                                            // Rule at src/isa/riscv64/lower.isle line 335.
                                                                            return Some(v348);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v345 = constructor_rv_vwsubu_vv(
                                                                ctx, v233, v219, v165, v230,
                                                            );
                                                            let v346 =
                                                                constructor_output_vreg(ctx, v345);
                                                            // Rule at src/isa/riscv64/lower.isle line 331.
                                                            return Some(v346);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v219 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v283 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v219,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v359 = constructor_rv_vwsubu_vv(
                                                                ctx, v233, v283, v165, v230,
                                                            );
                                                            let v360 =
                                                                constructor_output_vreg(ctx, v359);
                                                            // Rule at src/isa/riscv64/lower.isle line 367.
                                                            return Some(v360);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v45 = C::def_inst(ctx, v38.1);
                                            if let Some(v46) = v45 {
                                                let v47 = &C::inst_data(ctx, v46);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v68,
                                                    arg: v69,
                                                } = v47
                                                {
                                                    match v68 {
                                                        &Opcode::Splat => {
                                                            let v172 = C::def_inst(ctx, v69);
                                                            if let Some(v173) = v172 {
                                                                let v174 = &C::inst_data(ctx, v173);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v175,
                                                                    arg: v176,
                                                                } = v174
                                                                {
                                                                    if let &Opcode::Uextend = v175 {
                                                                        let v78 =
                                                                            C::value_type(ctx, v77);
                                                                        let v236 =
                                                                            C::lane_type(ctx, v78);
                                                                        let v177 = C::value_type(
                                                                            ctx, v176,
                                                                        );
                                                                        let v237 = C::ty_equal(
                                                                            ctx, v236, v177,
                                                                        );
                                                                        if v237 == true {
                                                                            let v233 = constructor_put_in_vreg(ctx, v77);
                                                                            let v251 = constructor_gen_slidedown_half(ctx, v78, v233);
                                                                            let v256 = constructor_put_in_xreg(ctx, v176);
                                                                            let v165 = &constructor_unmasked(ctx);
                                                                            let v227 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v78,
                                                                                );
                                                                            let v228 = v227?;
                                                                            let v229 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v228,
                                                                                );
                                                                            let v230 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v229,
                                                                                );
                                                                            let v353 = constructor_rv_vwsubu_vx(ctx, v251, v256, v165, v230);
                                                                            let v354 = constructor_output_vreg(ctx, v353);
                                                                            // Rule at src/isa/riscv64/lower.isle line 350.
                                                                            return Some(v354);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v361 = constructor_rv_vwsubu_vv(
                                                                ctx, v251, v252, v165, v230,
                                                            );
                                                            let v362 =
                                                                constructor_output_vreg(ctx, v361);
                                                            // Rule at src/isa/riscv64/lower.isle line 371.
                                                            return Some(v362);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v233 =
                                                                constructor_put_in_vreg(ctx, v77);
                                                            let v78 = C::value_type(ctx, v77);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v233,
                                                                );
                                                            let v252 =
                                                                constructor_put_in_vreg(ctx, v69);
                                                            let v253 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v78, v252,
                                                                );
                                                            let v165 = &constructor_unmasked(ctx);
                                                            let v227 = C::ty_half_lanes(ctx, v78);
                                                            let v228 = v227?;
                                                            let v229 =
                                                                C::vstate_from_type(ctx, v228);
                                                            let v230 = C::vstate_mf2(ctx, v229);
                                                            let v351 = constructor_rv_vwsubu_vv(
                                                                ctx, v251, v253, v165, v230,
                                                            );
                                                            let v352 =
                                                                constructor_output_vreg(ctx, v351);
                                                            // Rule at src/isa/riscv64/lower.isle line 346.
                                                            return Some(v352);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    match v68 {
                                        &Opcode::Splat => {
                                            let v172 = C::def_inst(ctx, v69);
                                            if let Some(v173) = v172 {
                                                let v174 = &C::inst_data(ctx, v173);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v175,
                                                    arg: v176,
                                                } = v174
                                                {
                                                    match v175 {
                                                        &Opcode::Uextend => {
                                                            let v178 = C::ty_half_width(ctx, v11);
                                                            if let Some(v179) = v178 {
                                                                let v180 = C::lane_type(ctx, v179);
                                                                let v177 = C::value_type(ctx, v176);
                                                                let v181 =
                                                                    C::ty_equal(ctx, v180, v177);
                                                                if v181 == true {
                                                                    let v163 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v38.0,
                                                                        );
                                                                    let v182 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v176,
                                                                        );
                                                                    let v165 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v183 = C::vstate_from_type(
                                                                        ctx, v179,
                                                                    );
                                                                    let v184 =
                                                                        C::vstate_mf2(ctx, v183);
                                                                    let v325 =
                                                                        constructor_rv_vwsubu_wx(
                                                                            ctx, v163, v182, v165,
                                                                            v184,
                                                                        );
                                                                    let v326 =
                                                                        constructor_output_vreg(
                                                                            ctx, v325,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 285.
                                                                    return Some(v326);
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v178 = C::ty_half_width(ctx, v11);
                                                            if let Some(v179) = v178 {
                                                                let v180 = C::lane_type(ctx, v179);
                                                                let v177 = C::value_type(ctx, v176);
                                                                let v181 =
                                                                    C::ty_equal(ctx, v180, v177);
                                                                if v181 == true {
                                                                    let v163 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v38.0,
                                                                        );
                                                                    let v182 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v176,
                                                                        );
                                                                    let v165 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v183 = C::vstate_from_type(
                                                                        ctx, v179,
                                                                    );
                                                                    let v184 =
                                                                        C::vstate_mf2(ctx, v183);
                                                                    let v323 =
                                                                        constructor_rv_vwsub_wx(
                                                                            ctx, v163, v182, v165,
                                                                            v184,
                                                                        );
                                                                    let v324 =
                                                                        constructor_output_vreg(
                                                                            ctx, v323,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 280.
                                                                    return Some(v324);
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v169 = constructor_put_in_xreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v321 =
                                                constructor_rv_vsub_vx(ctx, v163, v169, v165, v166);
                                            let v322 = constructor_output_vreg(ctx, v321);
                                            // Rule at src/isa/riscv64/lower.isle line 277.
                                            return Some(v322);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v70 = C::value_type(ctx, v69);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v331 = constructor_rv_vwsub_wv(
                                                ctx, v163, v219, v165, v223,
                                            );
                                            let v332 = constructor_output_vreg(ctx, v331);
                                            // Rule at src/isa/riscv64/lower.isle line 299.
                                            return Some(v332);
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v70 = C::value_type(ctx, v69);
                                            let v245 =
                                                constructor_gen_slidedown_half(ctx, v70, v219);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v337 = constructor_rv_vwsub_wv(
                                                ctx, v163, v245, v165, v223,
                                            );
                                            let v338 = constructor_output_vreg(ctx, v337);
                                            // Rule at src/isa/riscv64/lower.isle line 314.
                                            return Some(v338);
                                        }
                                        &Opcode::UwidenLow => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v70 = C::value_type(ctx, v69);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v343 = constructor_rv_vwsubu_wv(
                                                ctx, v163, v219, v165, v223,
                                            );
                                            let v344 = constructor_output_vreg(ctx, v343);
                                            // Rule at src/isa/riscv64/lower.isle line 328.
                                            return Some(v344);
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v219 = constructor_put_in_vreg(ctx, v69);
                                            let v70 = C::value_type(ctx, v69);
                                            let v245 =
                                                constructor_gen_slidedown_half(ctx, v70, v219);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v220 = C::ty_half_lanes(ctx, v70);
                                            let v221 = v220?;
                                            let v222 = C::vstate_from_type(ctx, v221);
                                            let v223 = C::vstate_mf2(ctx, v222);
                                            let v349 = constructor_rv_vwsubu_wv(
                                                ctx, v163, v245, v165, v223,
                                            );
                                            let v350 = constructor_output_vreg(ctx, v349);
                                            // Rule at src/isa/riscv64/lower.isle line 343.
                                            return Some(v350);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v319 = constructor_rv_vsub_vv(ctx, v163, v164, v165, v166);
                            let v320 = constructor_output_vreg(ctx, v319);
                            // Rule at src/isa/riscv64/lower.isle line 274.
                            return Some(v320);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v317 = constructor_i128_sub(ctx, v138, v316);
                            let v318 = C::output(ctx, v317);
                            // Rule at src/isa/riscv64/lower.isle line 270.
                            return Some(v318);
                        }
                        let v310 = C::fits_in_32(ctx, v3);
                        if let Some(v311) = v310 {
                            let v312 = C::ty_int(ctx, v311);
                            if let Some(v313) = v312 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v314 = constructor_rv_subw(ctx, v41, v42);
                                let v315 = constructor_output_xreg(ctx, v314);
                                // Rule at src/isa/riscv64/lower.isle line 267.
                                return Some(v315);
                            }
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v308 = constructor_rv_sub(ctx, v41, v42);
                            let v309 = constructor_output_xreg(ctx, v308);
                            // Rule at src/isa/riscv64/lower.isle line 264.
                            return Some(v309);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v398 =
                                            constructor_rv_vmul_vx(ctx, v163, v169, v165, v166);
                                        let v399 = constructor_output_vreg(ctx, v398);
                                        // Rule at src/isa/riscv64/lower.isle line 426.
                                        return Some(v399);
                                    }
                                }
                            }
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v396 =
                                            constructor_rv_vmul_vx(ctx, v196, v197, v165, v166);
                                        let v397 = constructor_output_vreg(ctx, v396);
                                        // Rule at src/isa/riscv64/lower.isle line 423.
                                        return Some(v397);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v394 = constructor_rv_vmul_vv(ctx, v163, v164, v165, v166);
                            let v395 = constructor_output_vreg(ctx, v394);
                            // Rule at src/isa/riscv64/lower.isle line 420.
                            return Some(v395);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v140 = C::value_regs_get(ctx, v138, 0x0);
                            let v141 = C::xreg_new(ctx, v140);
                            let v377 = C::value_regs_get(ctx, v138, 0x1);
                            let v378 = C::xreg_new(ctx, v377);
                            let v379 = C::put_in_regs(ctx, v38.1);
                            let v380 = C::value_regs_get(ctx, v379, 0x0);
                            let v381 = C::xreg_new(ctx, v380);
                            let v382 = C::value_regs_get(ctx, v379, 0x1);
                            let v383 = C::xreg_new(ctx, v382);
                            let v384 = constructor_rv_mulhu(ctx, v141, v381);
                            let v385 = constructor_madd(ctx, v141, v383, v384);
                            let v386 = constructor_madd(ctx, v378, v381, v385);
                            let v387 = C::zero_reg(ctx);
                            let v388 = C::xreg_new(ctx, v387);
                            let v389 = constructor_madd(ctx, v141, v381, v388);
                            let v390 = C::xreg_to_reg(ctx, v389);
                            let v391 = C::xreg_to_reg(ctx, v386);
                            let v392 = C::value_regs(ctx, v390, v391);
                            let v393 = C::output(ctx, v392);
                            // Rule at src/isa/riscv64/lower.isle line 394.
                            return Some(v393);
                        }
                        let v310 = C::fits_in_32(ctx, v3);
                        if let Some(v311) = v310 {
                            let v312 = C::ty_int(ctx, v311);
                            if let Some(v313) = v312 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v375 = constructor_rv_mulw(ctx, v41, v42);
                                let v376 = constructor_output_xreg(ctx, v375);
                                // Rule at src/isa/riscv64/lower.isle line 390.
                                return Some(v376);
                            }
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v373 = constructor_rv_mul(ctx, v41, v42);
                            let v374 = constructor_output_xreg(ctx, v373);
                            // Rule at src/isa/riscv64/lower.isle line 387.
                            return Some(v374);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v420 =
                                            constructor_rv_vmulhu_vx(ctx, v163, v169, v165, v166);
                                        let v421 = constructor_output_vreg(ctx, v420);
                                        // Rule at src/isa/riscv64/lower.isle line 452.
                                        return Some(v421);
                                    }
                                }
                            }
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v418 =
                                            constructor_rv_vmulhu_vx(ctx, v196, v197, v165, v166);
                                        let v419 = constructor_output_vreg(ctx, v418);
                                        // Rule at src/isa/riscv64/lower.isle line 449.
                                        return Some(v419);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v416 = constructor_rv_vmulhu_vv(ctx, v163, v164, v165, v166);
                            let v417 = constructor_output_vreg(ctx, v416);
                            // Rule at src/isa/riscv64/lower.isle line 446.
                            return Some(v417);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v412 = constructor_zext(ctx, v41, v35, I64);
                            let v402 = constructor_put_in_xreg(ctx, v38.1);
                            let v413 = constructor_zext(ctx, v402, v35, I64);
                            let v414 = constructor_lower_umlhi(ctx, v35, v412, v413);
                            let v415 = constructor_output_xreg(ctx, v414);
                            // Rule at src/isa/riscv64/lower.isle line 443.
                            return Some(v415);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v410 =
                                            constructor_rv_vmulh_vx(ctx, v163, v169, v165, v166);
                                        let v411 = constructor_output_vreg(ctx, v410);
                                        // Rule at src/isa/riscv64/lower.isle line 439.
                                        return Some(v411);
                                    }
                                }
                            }
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v408 =
                                            constructor_rv_vmulh_vx(ctx, v196, v197, v165, v166);
                                        let v409 = constructor_output_vreg(ctx, v408);
                                        // Rule at src/isa/riscv64/lower.isle line 436.
                                        return Some(v409);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v406 = constructor_rv_vmulh_vv(ctx, v163, v164, v165, v166);
                            let v407 = constructor_output_vreg(ctx, v406);
                            // Rule at src/isa/riscv64/lower.isle line 433.
                            return Some(v407);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v401 = constructor_sext(ctx, v41, v35, I64);
                            let v402 = constructor_put_in_xreg(ctx, v38.1);
                            let v403 = constructor_sext(ctx, v402, v35, I64);
                            let v404 = constructor_lower_smlhi(ctx, v35, v401, v403);
                            let v405 = constructor_output_xreg(ctx, v404);
                            // Rule at src/isa/riscv64/lower.isle line 430.
                            return Some(v405);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v197 = constructor_put_in_xreg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1695 =
                                            constructor_rv_vsmul_vx(ctx, v196, v197, v165, v166);
                                        let v1696 = constructor_output_vreg(ctx, v1695);
                                        // Rule at src/isa/riscv64/lower.isle line 1968.
                                        return Some(v1696);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v169 = constructor_put_in_xreg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1693 =
                                            constructor_rv_vsmul_vx(ctx, v163, v169, v165, v166);
                                        let v1694 = constructor_output_vreg(ctx, v1693);
                                        // Rule at src/isa/riscv64/lower.isle line 1965.
                                        return Some(v1694);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1691 = constructor_rv_vsmul_vv(ctx, v163, v164, v165, v166);
                            let v1692 = constructor_output_vreg(ctx, v1691);
                            // Rule at src/isa/riscv64/lower.isle line 1962.
                            return Some(v1692);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v422 = constructor_put_in_xreg(ctx, v38.1);
                            let v442 = constructor_gen_div_by_zero(ctx, v422);
                            let v443 = constructor_put_in_xreg(ctx, v38.0);
                            let v436 = constructor_put_in_xreg(ctx, v38.1);
                            let v444 = constructor_rv_divu(ctx, v443, v436);
                            let v445 = constructor_output_xreg(ctx, v444);
                            // Rule at src/isa/riscv64/lower.isle line 477.
                            return Some(v445);
                        }
                        let v310 = C::fits_in_32(ctx, v3);
                        if let Some(v311) = v310 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v422 = constructor_put_in_xreg(ctx, v38.1);
                            let v423 = constructor_zext(ctx, v422, v311, I64);
                            let v424 = constructor_gen_div_by_zero(ctx, v423);
                            let v425 = constructor_put_in_xreg(ctx, v38.0);
                            let v426 = constructor_zext(ctx, v425, v311, I64);
                            let v427 = constructor_rv_divuw(ctx, v426, v423);
                            let v428 = constructor_output_xreg(ctx, v427);
                            // Rule at src/isa/riscv64/lower.isle line 457.
                            return Some(v428);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v435 = constructor_gen_div_overflow(ctx, v41, v42, I64);
                            let v436 = constructor_put_in_xreg(ctx, v38.1);
                            let v437 = constructor_gen_div_by_zero(ctx, v436);
                            let v438 = constructor_put_in_xreg(ctx, v38.0);
                            let v439 = constructor_put_in_xreg(ctx, v38.1);
                            let v440 = constructor_rv_div(ctx, v438, v439);
                            let v441 = constructor_output_xreg(ctx, v440);
                            // Rule at src/isa/riscv64/lower.isle line 471.
                            return Some(v441);
                        }
                        let v310 = C::fits_in_32(ctx, v3);
                        if let Some(v311) = v310 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v429 = constructor_sext(ctx, v41, v311, I64);
                            let v402 = constructor_put_in_xreg(ctx, v38.1);
                            let v430 = constructor_sext(ctx, v402, v311, I64);
                            let v431 = constructor_gen_div_overflow(ctx, v429, v430, v311);
                            let v432 = constructor_gen_div_by_zero(ctx, v430);
                            let v433 = constructor_rv_divw(ctx, v429, v430);
                            let v434 = constructor_output_xreg(ctx, v433);
                            // Rule at src/isa/riscv64/lower.isle line 463.
                            return Some(v434);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                let v463 = constructor_zext(ctx, v422, I32, I64);
                                let v464 = constructor_gen_div_by_zero(ctx, v463);
                                let v425 = constructor_put_in_xreg(ctx, v38.0);
                                let v465 = constructor_rv_remuw(ctx, v425, v463);
                                let v466 = constructor_output_xreg(ctx, v465);
                                // Rule at src/isa/riscv64/lower.isle line 502.
                                return Some(v466);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                let v442 = constructor_gen_div_by_zero(ctx, v422);
                                let v443 = constructor_put_in_xreg(ctx, v38.0);
                                let v436 = constructor_put_in_xreg(ctx, v38.1);
                                let v469 = constructor_rv_remu(ctx, v443, v436);
                                let v470 = constructor_output_xreg(ctx, v469);
                                // Rule at src/isa/riscv64/lower.isle line 513.
                                return Some(v470);
                            }
                            _ => {}
                        }
                        let v446 = C::fits_in_16(ctx, v3);
                        if let Some(v447) = v446 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v422 = constructor_put_in_xreg(ctx, v38.1);
                            let v448 = constructor_zext(ctx, v422, v447, I64);
                            let v449 = constructor_gen_div_by_zero(ctx, v448);
                            let v425 = constructor_put_in_xreg(ctx, v38.0);
                            let v450 = constructor_zext(ctx, v425, v447, I64);
                            let v451 = constructor_rv_remuw(ctx, v450, v448);
                            let v452 = constructor_output_xreg(ctx, v451);
                            // Rule at src/isa/riscv64/lower.isle line 484.
                            return Some(v452);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                let v459 = constructor_sext(ctx, v422, I32, I64);
                                let v460 = constructor_gen_div_by_zero(ctx, v459);
                                let v425 = constructor_put_in_xreg(ctx, v38.0);
                                let v461 = constructor_rv_remw(ctx, v425, v459);
                                let v462 = constructor_output_xreg(ctx, v461);
                                // Rule at src/isa/riscv64/lower.isle line 496.
                                return Some(v462);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                let v442 = constructor_gen_div_by_zero(ctx, v422);
                                let v443 = constructor_put_in_xreg(ctx, v38.0);
                                let v436 = constructor_put_in_xreg(ctx, v38.1);
                                let v467 = constructor_rv_rem(ctx, v443, v436);
                                let v468 = constructor_output_xreg(ctx, v467);
                                // Rule at src/isa/riscv64/lower.isle line 508.
                                return Some(v468);
                            }
                            _ => {}
                        }
                        let v446 = C::fits_in_16(ctx, v3);
                        if let Some(v447) = v446 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v422 = constructor_put_in_xreg(ctx, v38.1);
                            let v453 = constructor_sext(ctx, v422, v447, I64);
                            let v454 = constructor_gen_div_by_zero(ctx, v453);
                            let v425 = constructor_put_in_xreg(ctx, v38.0);
                            let v455 = constructor_sext(ctx, v425, v447, I64);
                            let v456 = constructor_rv_remw(ctx, v455, v453);
                            let v457 = constructor_output_xreg(ctx, v456);
                            // Rule at src/isa/riscv64/lower.isle line 490.
                            return Some(v457);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v200 = C::def_inst(ctx, v77);
                                        if let Some(v201) = v200 {
                                            let v202 = &C::inst_data(ctx, v201);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v212,
                                                imm: v213,
                                            } = v202
                                            {
                                                if let &Opcode::Iconst = v212 {
                                                    let v214 = C::u64_from_imm64(ctx, v213);
                                                    let v215 = C::imm5_from_u64(ctx, v214);
                                                    if let Some(v216) = v215 {
                                                        let v196 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v533 = constructor_rv_vand_vi(
                                                            ctx, v196, v216, v165, v166,
                                                        );
                                                        let v534 =
                                                            constructor_output_vreg(ctx, v533);
                                                        // Rule at src/isa/riscv64/lower.isle line 570.
                                                        return Some(v534);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v172 = C::def_inst(ctx, v69);
                                        if let Some(v173) = v172 {
                                            let v174 = &C::inst_data(ctx, v173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v189,
                                                imm: v190,
                                            } = v174
                                            {
                                                if let &Opcode::Iconst = v189 {
                                                    let v191 = C::u64_from_imm64(ctx, v190);
                                                    let v192 = C::imm5_from_u64(ctx, v191);
                                                    if let Some(v193) = v192 {
                                                        let v163 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v531 = constructor_rv_vand_vi(
                                                            ctx, v163, v193, v165, v166,
                                                        );
                                                        let v532 =
                                                            constructor_output_vreg(ctx, v531);
                                                        // Rule at src/isa/riscv64/lower.isle line 567.
                                                        return Some(v532);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v525 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v526) = v525 {
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::Unary {
                                        opcode: ref v76,
                                        arg: v77,
                                    } = v59
                                    {
                                        if let &Opcode::Splat = v76 {
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v197 = constructor_put_in_xreg(ctx, v77);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v529 =
                                                constructor_rv_vand_vx(ctx, v196, v197, v165, v166);
                                            let v530 = constructor_output_vreg(ctx, v529);
                                            // Rule at src/isa/riscv64/lower.isle line 563.
                                            return Some(v530);
                                        }
                                    }
                                }
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::Unary {
                                        opcode: ref v68,
                                        arg: v69,
                                    } = v47
                                    {
                                        if let &Opcode::Splat = v68 {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v169 = constructor_put_in_xreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v527 =
                                                constructor_rv_vand_vx(ctx, v163, v169, v165, v166);
                                            let v528 = constructor_output_vreg(ctx, v527);
                                            // Rule at src/isa/riscv64/lower.isle line 559.
                                            return Some(v528);
                                        }
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v523 = constructor_rv_vand_vv(ctx, v163, v164, v165, v166);
                            let v524 = constructor_output_vreg(ctx, v523);
                            // Rule at src/isa/riscv64/lower.isle line 556.
                            return Some(v524);
                        }
                        let v486 = C::has_zbb(ctx);
                        if v486 == true {
                            if v3 == I128 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v57 = C::def_inst(ctx, v38.0);
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::Unary {
                                        opcode: ref v76,
                                        arg: v77,
                                    } = v59
                                    {
                                        if let &Opcode::Bnot = v76 {
                                            let v506 = C::put_in_regs(ctx, v38.1);
                                            let v507 = C::value_regs_get(ctx, v506, 0x0);
                                            let v508 = C::xreg_new(ctx, v507);
                                            let v509 = C::put_in_regs(ctx, v77);
                                            let v510 = C::value_regs_get(ctx, v509, 0x0);
                                            let v511 = C::xreg_new(ctx, v510);
                                            let v512 = constructor_rv_andn(ctx, v508, v511);
                                            let v146 = C::put_in_regs(ctx, v38.1);
                                            let v513 = C::value_regs_get(ctx, v146, 0x1);
                                            let v514 = C::xreg_new(ctx, v513);
                                            let v515 = C::put_in_regs(ctx, v77);
                                            let v516 = C::value_regs_get(ctx, v515, 0x1);
                                            let v517 = C::xreg_new(ctx, v516);
                                            let v518 = constructor_rv_andn(ctx, v514, v517);
                                            let v519 = C::xreg_to_reg(ctx, v512);
                                            let v520 = C::xreg_to_reg(ctx, v518);
                                            let v521 = C::value_regs(ctx, v519, v520);
                                            let v522 = C::output(ctx, v521);
                                            // Rule at src/isa/riscv64/lower.isle line 550.
                                            return Some(v522);
                                        }
                                    }
                                }
                                let v45 = C::def_inst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::Unary {
                                        opcode: ref v68,
                                        arg: v69,
                                    } = v47
                                    {
                                        if let &Opcode::Bnot = v68 {
                                            let v138 = C::put_in_regs(ctx, v38.0);
                                            let v140 = C::value_regs_get(ctx, v138, 0x0);
                                            let v141 = C::xreg_new(ctx, v140);
                                            let v491 = C::put_in_regs(ctx, v69);
                                            let v492 = C::value_regs_get(ctx, v491, 0x0);
                                            let v493 = C::xreg_new(ctx, v492);
                                            let v494 = constructor_rv_andn(ctx, v141, v493);
                                            let v495 = C::put_in_regs(ctx, v38.0);
                                            let v496 = C::value_regs_get(ctx, v495, 0x1);
                                            let v497 = C::xreg_new(ctx, v496);
                                            let v498 = C::put_in_regs(ctx, v69);
                                            let v499 = C::value_regs_get(ctx, v498, 0x1);
                                            let v500 = C::xreg_new(ctx, v499);
                                            let v501 = constructor_rv_andn(ctx, v497, v500);
                                            let v502 = C::xreg_to_reg(ctx, v494);
                                            let v503 = C::xreg_to_reg(ctx, v501);
                                            let v504 = C::value_regs(ctx, v502, v503);
                                            let v505 = C::output(ctx, v504);
                                            // Rule at src/isa/riscv64/lower.isle line 544.
                                            return Some(v505);
                                        }
                                    }
                                }
                            }
                            let v292 = C::fits_in_64(ctx, v3);
                            if let Some(v293) = v292 {
                                let v473 = C::ty_int(ctx, v293);
                                if let Some(v474) = v473 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v57 = C::def_inst(ctx, v38.0);
                                    if let Some(v58) = v57 {
                                        let v59 = &C::inst_data(ctx, v58);
                                        if let &InstructionData::Unary {
                                            opcode: ref v76,
                                            arg: v77,
                                        } = v59
                                        {
                                            if let &Opcode::Bnot = v76 {
                                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                                let v197 = constructor_put_in_xreg(ctx, v77);
                                                let v489 = constructor_rv_andn(ctx, v422, v197);
                                                let v490 = constructor_output_xreg(ctx, v489);
                                                // Rule at src/isa/riscv64/lower.isle line 540.
                                                return Some(v490);
                                            }
                                        }
                                    }
                                    let v45 = C::def_inst(ctx, v38.1);
                                    if let Some(v46) = v45 {
                                        let v47 = &C::inst_data(ctx, v46);
                                        if let &InstructionData::Unary {
                                            opcode: ref v68,
                                            arg: v69,
                                        } = v47
                                        {
                                            if let &Opcode::Bnot = v68 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v169 = constructor_put_in_xreg(ctx, v69);
                                                let v487 = constructor_rv_andn(ctx, v41, v169);
                                                let v488 = constructor_output_xreg(ctx, v487);
                                                // Rule at src/isa/riscv64/lower.isle line 536.
                                                return Some(v488);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v484 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::And,
                                v482,
                                v483,
                                v480,
                            );
                            let v485 = constructor_output_freg(ctx, v484);
                            // Rule at src/isa/riscv64/lower.isle line 529.
                            return Some(v485);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v473 = C::ty_int(ctx, v293);
                            if let Some(v474) = v473 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v57 = C::def_inst(ctx, v38.0);
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v60,
                                        imm: v61,
                                    } = v59
                                    {
                                        if let &Opcode::Iconst = v60 {
                                            let v62 = C::u64_from_imm64(ctx, v61);
                                            let v63 = C::imm12_from_u64(ctx, v62);
                                            if let Some(v64) = v63 {
                                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                                let v477 = constructor_rv_andi(ctx, v422, v64);
                                                let v478 = constructor_output_xreg(ctx, v477);
                                                // Rule at src/isa/riscv64/lower.isle line 526.
                                                return Some(v478);
                                            }
                                        }
                                    }
                                }
                                let v45 = C::def_inst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v48,
                                        imm: v49,
                                    } = v47
                                    {
                                        if let &Opcode::Iconst = v48 {
                                            let v50 = C::u64_from_imm64(ctx, v49);
                                            let v51 = C::imm12_from_u64(ctx, v50);
                                            if let Some(v52) = v51 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v475 = constructor_rv_andi(ctx, v41, v52);
                                                let v476 = constructor_output_xreg(ctx, v475);
                                                // Rule at src/isa/riscv64/lower.isle line 523.
                                                return Some(v476);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v471 = constructor_gen_and(ctx, v364, v138, v316);
                            let v472 = C::output(ctx, v471);
                            // Rule at src/isa/riscv64/lower.isle line 519.
                            return Some(v472);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v200 = C::def_inst(ctx, v77);
                                        if let Some(v201) = v200 {
                                            let v202 = &C::inst_data(ctx, v201);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v212,
                                                imm: v213,
                                            } = v202
                                            {
                                                if let &Opcode::Iconst = v212 {
                                                    let v214 = C::u64_from_imm64(ctx, v213);
                                                    let v215 = C::imm5_from_u64(ctx, v214);
                                                    if let Some(v216) = v215 {
                                                        let v196 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v568 = constructor_rv_vor_vi(
                                                            ctx, v196, v216, v165, v166,
                                                        );
                                                        let v569 =
                                                            constructor_output_vreg(ctx, v568);
                                                        // Rule at src/isa/riscv64/lower.isle line 626.
                                                        return Some(v569);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v172 = C::def_inst(ctx, v69);
                                        if let Some(v173) = v172 {
                                            let v174 = &C::inst_data(ctx, v173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v189,
                                                imm: v190,
                                            } = v174
                                            {
                                                if let &Opcode::Iconst = v189 {
                                                    let v191 = C::u64_from_imm64(ctx, v190);
                                                    let v192 = C::imm5_from_u64(ctx, v191);
                                                    if let Some(v193) = v192 {
                                                        let v163 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v566 = constructor_rv_vor_vi(
                                                            ctx, v163, v193, v165, v166,
                                                        );
                                                        let v567 =
                                                            constructor_output_vreg(ctx, v566);
                                                        // Rule at src/isa/riscv64/lower.isle line 623.
                                                        return Some(v567);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v525 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v526) = v525 {
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::Unary {
                                        opcode: ref v76,
                                        arg: v77,
                                    } = v59
                                    {
                                        if let &Opcode::Splat = v76 {
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v197 = constructor_put_in_xreg(ctx, v77);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v564 =
                                                constructor_rv_vor_vx(ctx, v196, v197, v165, v166);
                                            let v565 = constructor_output_vreg(ctx, v564);
                                            // Rule at src/isa/riscv64/lower.isle line 619.
                                            return Some(v565);
                                        }
                                    }
                                }
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::Unary {
                                        opcode: ref v68,
                                        arg: v69,
                                    } = v47
                                    {
                                        if let &Opcode::Splat = v68 {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v169 = constructor_put_in_xreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v562 =
                                                constructor_rv_vor_vx(ctx, v163, v169, v165, v166);
                                            let v563 = constructor_output_vreg(ctx, v562);
                                            // Rule at src/isa/riscv64/lower.isle line 615.
                                            return Some(v563);
                                        }
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v560 = constructor_rv_vor_vv(ctx, v163, v164, v165, v166);
                            let v561 = constructor_output_vreg(ctx, v560);
                            // Rule at src/isa/riscv64/lower.isle line 612.
                            return Some(v561);
                        }
                        let v486 = C::has_zbb(ctx);
                        if v486 == true {
                            if v3 == I128 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v57 = C::def_inst(ctx, v38.0);
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::Unary {
                                        opcode: ref v76,
                                        arg: v77,
                                    } = v59
                                    {
                                        if let &Opcode::Bnot = v76 {
                                            let v506 = C::put_in_regs(ctx, v38.1);
                                            let v507 = C::value_regs_get(ctx, v506, 0x0);
                                            let v508 = C::xreg_new(ctx, v507);
                                            let v509 = C::put_in_regs(ctx, v77);
                                            let v510 = C::value_regs_get(ctx, v509, 0x0);
                                            let v511 = C::xreg_new(ctx, v510);
                                            let v554 = constructor_rv_orn(ctx, v508, v511);
                                            let v146 = C::put_in_regs(ctx, v38.1);
                                            let v513 = C::value_regs_get(ctx, v146, 0x1);
                                            let v514 = C::xreg_new(ctx, v513);
                                            let v515 = C::put_in_regs(ctx, v77);
                                            let v516 = C::value_regs_get(ctx, v515, 0x1);
                                            let v517 = C::xreg_new(ctx, v516);
                                            let v555 = constructor_rv_orn(ctx, v514, v517);
                                            let v556 = C::xreg_to_reg(ctx, v554);
                                            let v557 = C::xreg_to_reg(ctx, v555);
                                            let v558 = C::value_regs(ctx, v556, v557);
                                            let v559 = C::output(ctx, v558);
                                            // Rule at src/isa/riscv64/lower.isle line 606.
                                            return Some(v559);
                                        }
                                    }
                                }
                                let v45 = C::def_inst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::Unary {
                                        opcode: ref v68,
                                        arg: v69,
                                    } = v47
                                    {
                                        if let &Opcode::Bnot = v68 {
                                            let v138 = C::put_in_regs(ctx, v38.0);
                                            let v140 = C::value_regs_get(ctx, v138, 0x0);
                                            let v141 = C::xreg_new(ctx, v140);
                                            let v491 = C::put_in_regs(ctx, v69);
                                            let v492 = C::value_regs_get(ctx, v491, 0x0);
                                            let v493 = C::xreg_new(ctx, v492);
                                            let v548 = constructor_rv_orn(ctx, v141, v493);
                                            let v495 = C::put_in_regs(ctx, v38.0);
                                            let v496 = C::value_regs_get(ctx, v495, 0x1);
                                            let v497 = C::xreg_new(ctx, v496);
                                            let v498 = C::put_in_regs(ctx, v69);
                                            let v499 = C::value_regs_get(ctx, v498, 0x1);
                                            let v500 = C::xreg_new(ctx, v499);
                                            let v549 = constructor_rv_orn(ctx, v497, v500);
                                            let v550 = C::xreg_to_reg(ctx, v548);
                                            let v551 = C::xreg_to_reg(ctx, v549);
                                            let v552 = C::value_regs(ctx, v550, v551);
                                            let v553 = C::output(ctx, v552);
                                            // Rule at src/isa/riscv64/lower.isle line 600.
                                            return Some(v553);
                                        }
                                    }
                                }
                            }
                            let v292 = C::fits_in_64(ctx, v3);
                            if let Some(v293) = v292 {
                                let v473 = C::ty_int(ctx, v293);
                                if let Some(v474) = v473 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v57 = C::def_inst(ctx, v38.0);
                                    if let Some(v58) = v57 {
                                        let v59 = &C::inst_data(ctx, v58);
                                        if let &InstructionData::Unary {
                                            opcode: ref v76,
                                            arg: v77,
                                        } = v59
                                        {
                                            if let &Opcode::Bnot = v76 {
                                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                                let v197 = constructor_put_in_xreg(ctx, v77);
                                                let v546 = constructor_rv_orn(ctx, v422, v197);
                                                let v547 = constructor_output_xreg(ctx, v546);
                                                // Rule at src/isa/riscv64/lower.isle line 596.
                                                return Some(v547);
                                            }
                                        }
                                    }
                                    let v45 = C::def_inst(ctx, v38.1);
                                    if let Some(v46) = v45 {
                                        let v47 = &C::inst_data(ctx, v46);
                                        if let &InstructionData::Unary {
                                            opcode: ref v68,
                                            arg: v69,
                                        } = v47
                                        {
                                            if let &Opcode::Bnot = v68 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v169 = constructor_put_in_xreg(ctx, v69);
                                                let v544 = constructor_rv_orn(ctx, v41, v169);
                                                let v545 = constructor_output_xreg(ctx, v544);
                                                // Rule at src/isa/riscv64/lower.isle line 592.
                                                return Some(v545);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v542 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Or,
                                v482,
                                v483,
                                v480,
                            );
                            let v543 = constructor_output_freg(ctx, v542);
                            // Rule at src/isa/riscv64/lower.isle line 585.
                            return Some(v543);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v473 = C::ty_int(ctx, v293);
                            if let Some(v474) = v473 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v57 = C::def_inst(ctx, v38.0);
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v60,
                                        imm: v61,
                                    } = v59
                                    {
                                        if let &Opcode::Iconst = v60 {
                                            let v62 = C::u64_from_imm64(ctx, v61);
                                            let v63 = C::imm12_from_u64(ctx, v62);
                                            if let Some(v64) = v63 {
                                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                                let v539 = constructor_rv_ori(ctx, v422, v64);
                                                let v540 = constructor_output_xreg(ctx, v539);
                                                // Rule at src/isa/riscv64/lower.isle line 582.
                                                return Some(v540);
                                            }
                                        }
                                    }
                                }
                                let v45 = C::def_inst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v48,
                                        imm: v49,
                                    } = v47
                                    {
                                        if let &Opcode::Iconst = v48 {
                                            let v50 = C::u64_from_imm64(ctx, v49);
                                            let v51 = C::imm12_from_u64(ctx, v50);
                                            if let Some(v52) = v51 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v537 = constructor_rv_ori(ctx, v41, v52);
                                                let v538 = constructor_output_xreg(ctx, v537);
                                                // Rule at src/isa/riscv64/lower.isle line 579.
                                                return Some(v538);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v535 = constructor_gen_or(ctx, v364, v138, v316);
                            let v536 = C::output(ctx, v535);
                            // Rule at src/isa/riscv64/lower.isle line 575.
                            return Some(v536);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v200 = C::def_inst(ctx, v77);
                                        if let Some(v201) = v200 {
                                            let v202 = &C::inst_data(ctx, v201);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v212,
                                                imm: v213,
                                            } = v202
                                            {
                                                if let &Opcode::Iconst = v212 {
                                                    let v214 = C::u64_from_imm64(ctx, v213);
                                                    let v215 = C::imm5_from_u64(ctx, v214);
                                                    if let Some(v216) = v215 {
                                                        let v196 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v589 = constructor_rv_vxor_vi(
                                                            ctx, v196, v216, v165, v166,
                                                        );
                                                        let v590 =
                                                            constructor_output_vreg(ctx, v589);
                                                        // Rule at src/isa/riscv64/lower.isle line 661.
                                                        return Some(v590);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v172 = C::def_inst(ctx, v69);
                                        if let Some(v173) = v172 {
                                            let v174 = &C::inst_data(ctx, v173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v189,
                                                imm: v190,
                                            } = v174
                                            {
                                                if let &Opcode::Iconst = v189 {
                                                    let v191 = C::u64_from_imm64(ctx, v190);
                                                    let v192 = C::imm5_from_u64(ctx, v191);
                                                    if let Some(v193) = v192 {
                                                        let v163 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v587 = constructor_rv_vxor_vi(
                                                            ctx, v163, v193, v165, v166,
                                                        );
                                                        let v588 =
                                                            constructor_output_vreg(ctx, v587);
                                                        // Rule at src/isa/riscv64/lower.isle line 658.
                                                        return Some(v588);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v525 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v526) = v525 {
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::Unary {
                                        opcode: ref v76,
                                        arg: v77,
                                    } = v59
                                    {
                                        if let &Opcode::Splat = v76 {
                                            let v196 = constructor_put_in_vreg(ctx, v38.1);
                                            let v197 = constructor_put_in_xreg(ctx, v77);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v585 =
                                                constructor_rv_vxor_vx(ctx, v196, v197, v165, v166);
                                            let v586 = constructor_output_vreg(ctx, v585);
                                            // Rule at src/isa/riscv64/lower.isle line 654.
                                            return Some(v586);
                                        }
                                    }
                                }
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::Unary {
                                        opcode: ref v68,
                                        arg: v69,
                                    } = v47
                                    {
                                        if let &Opcode::Splat = v68 {
                                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                                            let v169 = constructor_put_in_xreg(ctx, v69);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v583 =
                                                constructor_rv_vxor_vx(ctx, v163, v169, v165, v166);
                                            let v584 = constructor_output_vreg(ctx, v583);
                                            // Rule at src/isa/riscv64/lower.isle line 650.
                                            return Some(v584);
                                        }
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v581 = constructor_rv_vxor_vv(ctx, v163, v164, v165, v166);
                            let v582 = constructor_output_vreg(ctx, v581);
                            // Rule at src/isa/riscv64/lower.isle line 647.
                            return Some(v582);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v579 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Xor,
                                v482,
                                v483,
                                v480,
                            );
                            let v580 = constructor_output_freg(ctx, v579);
                            // Rule at src/isa/riscv64/lower.isle line 644.
                            return Some(v580);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v577 =
                                constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v138, v316);
                            let v578 = C::output(ctx, v577);
                            // Rule at src/isa/riscv64/lower.isle line 641.
                            return Some(v578);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v473 = C::ty_int(ctx, v293);
                            if let Some(v474) = v473 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v57 = C::def_inst(ctx, v38.0);
                                if let Some(v58) = v57 {
                                    let v59 = &C::inst_data(ctx, v58);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v60,
                                        imm: v61,
                                    } = v59
                                    {
                                        if let &Opcode::Iconst = v60 {
                                            let v62 = C::u64_from_imm64(ctx, v61);
                                            let v63 = C::imm12_from_u64(ctx, v62);
                                            if let Some(v64) = v63 {
                                                let v422 = constructor_put_in_xreg(ctx, v38.1);
                                                let v574 = constructor_rv_xori(ctx, v422, v64);
                                                let v575 = constructor_output_xreg(ctx, v574);
                                                // Rule at src/isa/riscv64/lower.isle line 638.
                                                return Some(v575);
                                            }
                                        }
                                    }
                                }
                                let v45 = C::def_inst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = &C::inst_data(ctx, v46);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v48,
                                        imm: v49,
                                    } = v47
                                    {
                                        if let &Opcode::Iconst = v48 {
                                            let v50 = C::u64_from_imm64(ctx, v49);
                                            let v51 = C::imm12_from_u64(ctx, v50);
                                            if let Some(v52) = v51 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v572 = constructor_rv_xori(ctx, v41, v52);
                                                let v573 = constructor_output_xreg(ctx, v572);
                                                // Rule at src/isa/riscv64/lower.isle line 635.
                                                return Some(v573);
                                            }
                                        }
                                    }
                                }
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v570 = constructor_rv_xor(ctx, v41, v42);
                                let v571 = constructor_output_xreg(ctx, v570);
                                // Rule at src/isa/riscv64/lower.isle line 631.
                                return Some(v571);
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v932 = constructor_lower_i128_rotl(ctx, v138, v316);
                            let v933 = C::output(ctx, v932);
                            // Rule at src/isa/riscv64/lower.isle line 981.
                            return Some(v933);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v929 = constructor_zext(ctx, v41, v293, I64);
                            let v839 = C::put_in_regs(ctx, v38.1);
                            let v840 = C::value_regs_get(ctx, v839, 0x0);
                            let v841 = C::xreg_new(ctx, v840);
                            let v930 = constructor_lower_rotl(ctx, v293, v929, v841);
                            let v931 = constructor_output_xreg(ctx, v930);
                            // Rule at src/isa/riscv64/lower.isle line 978.
                            return Some(v931);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v138 = C::put_in_regs(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v936 = constructor_lower_i128_rotr(ctx, v138, v316);
                            let v937 = C::output(ctx, v936);
                            // Rule at src/isa/riscv64/lower.isle line 988.
                            return Some(v937);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v929 = constructor_zext(ctx, v41, v293, I64);
                            let v839 = C::put_in_regs(ctx, v38.1);
                            let v840 = C::value_regs_get(ctx, v839, 0x0);
                            let v841 = C::xreg_new(ctx, v840);
                            let v934 = constructor_lower_rotr(ctx, v293, v929, v841);
                            let v935 = constructor_output_xreg(ctx, v934);
                            // Rule at src/isa/riscv64/lower.isle line 985.
                            return Some(v935);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v764 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v765) = v764 {
                                let v766 = C::def_inst(ctx, v765);
                                if let Some(v767) = v766 {
                                    let v768 = &C::inst_data(ctx, v767);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v769,
                                        imm: v770,
                                    } = v768
                                    {
                                        if let &Opcode::Iconst = v769 {
                                            let v771 = C::u64_from_imm64(ctx, v770);
                                            let v829 = C::uimm5_from_u64(ctx, v771);
                                            if let Some(v830) = v829 {
                                                let v163 = constructor_put_in_vreg(ctx, v38.0);
                                                let v165 = &constructor_unmasked(ctx);
                                                let v166 = C::vstate_from_type(ctx, v11);
                                                let v831 = constructor_rv_vsll_vi(
                                                    ctx, v163, v830, v165, v166,
                                                );
                                                let v832 = constructor_output_vreg(ctx, v831);
                                                // Rule at src/isa/riscv64/lower.isle line 860.
                                                return Some(v832);
                                            }
                                        }
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v753 = C::value_regs_get(ctx, v316, 0x0);
                            let v754 = C::xreg_new(ctx, v753);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v827 = constructor_rv_vsll_vx(ctx, v163, v754, v165, v166);
                            let v828 = constructor_output_vreg(ctx, v827);
                            // Rule at src/isa/riscv64/lower.isle line 857.
                            return Some(v828);
                        }
                        match v3 {
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v764 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v765) = v764 {
                                    let v766 = C::def_inst(ctx, v765);
                                    if let Some(v767) = v766 {
                                        let v768 = &C::inst_data(ctx, v767);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v769,
                                            imm: v770,
                                        } = v768
                                        {
                                            if let &Opcode::Iconst = v769 {
                                                let v771 = C::u64_from_imm64(ctx, v770);
                                                let v772 = C::imm12_from_u64(ctx, v771);
                                                if let Some(v773) = v772 {
                                                    let v57 = C::def_inst(ctx, v38.0);
                                                    if let Some(v58) = v57 {
                                                        let v59 = &C::inst_data(ctx, v58);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v76,
                                                            arg: v77,
                                                        } = v59
                                                        {
                                                            if let &Opcode::Uextend = v76 {
                                                                let v71 = C::has_zba(ctx);
                                                                if v71 == true {
                                                                    let v78 =
                                                                        C::value_type(ctx, v77);
                                                                    if v78 == I32 {
                                                                        let v79 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v77,
                                                                            );
                                                                        let v782 =
                                                                            constructor_rv_slliuw(
                                                                                ctx, v79, v773,
                                                                            );
                                                                        let v783 =
                                                                            constructor_output_xreg(
                                                                                ctx, v782,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 830.
                                                                        return Some(v783);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v778 = constructor_shift_mask(ctx, v3);
                                                    let v779 = C::imm12_and(ctx, v773, v778);
                                                    let v780 = constructor_rv_slli(ctx, v41, v779);
                                                    let v781 = constructor_output_xreg(ctx, v780);
                                                    // Rule at src/isa/riscv64/lower.isle line 826.
                                                    return Some(v781);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v506 = C::put_in_regs(ctx, v38.1);
                                let v507 = C::value_regs_get(ctx, v506, 0x0);
                                let v508 = C::xreg_new(ctx, v507);
                                let v785 = C::gen_shamt(ctx, I128, v508);
                                let v786 = C::value_regs_get(ctx, v785, 0x0);
                                let v787 = C::xreg_new(ctx, v786);
                                let v788 = C::value_regs_get(ctx, v785, 0x1);
                                let v789 = C::xreg_new(ctx, v788);
                                let v790 = C::put_in_regs(ctx, v38.0);
                                let v791 = C::value_regs_get(ctx, v790, 0x0);
                                let v792 = C::xreg_new(ctx, v791);
                                let v793 = constructor_rv_sll(ctx, v792, v787);
                                let v794 = C::put_in_regs(ctx, v38.0);
                                let v795 = C::value_regs_get(ctx, v794, 0x0);
                                let v796 = C::xreg_new(ctx, v795);
                                let v797 = constructor_rv_srl(ctx, v796, v789);
                                let v799 = C::zero_reg(ctx);
                                let v800 = C::xreg_new(ctx, v799);
                                let v801 = C::zero_reg(ctx);
                                let v802 = C::xreg_to_reg(ctx, v797);
                                let v803 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v787, v800, v801, v802);
                                let v804 = C::xreg_new(ctx, v803);
                                let v805 = C::put_in_regs(ctx, v38.0);
                                let v806 = C::value_regs_get(ctx, v805, 0x1);
                                let v807 = C::xreg_new(ctx, v806);
                                let v808 = constructor_rv_sll(ctx, v807, v787);
                                let v809 = constructor_rv_or(ctx, v804, v808);
                                let v811 = C::load_u64_constant(ctx, 0x40);
                                let v812 = C::xreg_new(ctx, v811);
                                let v813 = C::put_in_regs(ctx, v38.1);
                                let v814 = C::value_regs_get(ctx, v813, 0x0);
                                let v815 = C::xreg_new(ctx, v814);
                                let v817 = C::imm12_const(ctx, 0x7F);
                                let v818 = constructor_rv_andi(ctx, v815, v817);
                                let v820 = C::zero_reg(ctx);
                                let v821 = C::xreg_to_reg(ctx, v793);
                                let v822 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v818,
                                    v812,
                                    v820,
                                    v821,
                                );
                                let v823 = C::xreg_to_reg(ctx, v809);
                                let v824 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v818,
                                    v812,
                                    v821,
                                    v823,
                                );
                                let v825 = C::value_regs(ctx, v822, v824);
                                let v826 = C::output(ctx, v825);
                                // Rule at src/isa/riscv64/lower.isle line 835.
                                return Some(v826);
                            }
                            _ => {}
                        }
                        let v762 = C::int_fits_in_32(ctx, v3);
                        if let Some(v763) = v762 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v764 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v765) = v764 {
                                let v766 = C::def_inst(ctx, v765);
                                if let Some(v767) = v766 {
                                    let v768 = &C::inst_data(ctx, v767);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v769,
                                        imm: v770,
                                    } = v768
                                    {
                                        if let &Opcode::Iconst = v769 {
                                            let v771 = C::u64_from_imm64(ctx, v770);
                                            let v772 = C::imm12_from_u64(ctx, v771);
                                            if let Some(v773) = v772 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v774 = constructor_shift_mask(ctx, v763);
                                                let v775 = C::imm12_and(ctx, v773, v774);
                                                let v776 = constructor_rv_slliw(ctx, v41, v775);
                                                let v777 = constructor_output_xreg(ctx, v776);
                                                // Rule at src/isa/riscv64/lower.isle line 821.
                                                return Some(v777);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v316 = C::put_in_regs(ctx, v38.1);
                                let v753 = C::value_regs_get(ctx, v316, 0x0);
                                let v754 = C::xreg_new(ctx, v753);
                                let v758 = constructor_rv_sllw(ctx, v41, v754);
                                let v759 = constructor_output_xreg(ctx, v758);
                                // Rule at src/isa/riscv64/lower.isle line 813.
                                return Some(v759);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v316 = C::put_in_regs(ctx, v38.1);
                                let v753 = C::value_regs_get(ctx, v316, 0x0);
                                let v754 = C::xreg_new(ctx, v753);
                                let v760 = constructor_rv_sll(ctx, v41, v754);
                                let v761 = constructor_output_xreg(ctx, v760);
                                // Rule at src/isa/riscv64/lower.isle line 817.
                                return Some(v761);
                            }
                            _ => {}
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v748 = C::ty_8_or_16(ctx, v364);
                            if let Some(v749) = v748 {
                                let v750 = constructor_shift_mask(ctx, v749);
                                let v751 = constructor_u64_to_imm12(ctx, v750);
                                if let Some(v752) = v751 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v316 = C::put_in_regs(ctx, v38.1);
                                    let v753 = C::value_regs_get(ctx, v316, 0x0);
                                    let v754 = C::xreg_new(ctx, v753);
                                    let v755 = constructor_rv_andi(ctx, v754, v752);
                                    let v756 = constructor_rv_sllw(ctx, v41, v755);
                                    let v757 = constructor_output_xreg(ctx, v756);
                                    // Rule at src/isa/riscv64/lower.isle line 808.
                                    return Some(v757);
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v764 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v765) = v764 {
                                let v766 = C::def_inst(ctx, v765);
                                if let Some(v767) = v766 {
                                    let v768 = &C::inst_data(ctx, v767);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v769,
                                        imm: v770,
                                    } = v768
                                    {
                                        if let &Opcode::Iconst = v769 {
                                            let v771 = C::u64_from_imm64(ctx, v770);
                                            let v829 = C::uimm5_from_u64(ctx, v771);
                                            if let Some(v830) = v829 {
                                                let v163 = constructor_put_in_vreg(ctx, v38.0);
                                                let v165 = &constructor_unmasked(ctx);
                                                let v166 = C::vstate_from_type(ctx, v11);
                                                let v885 = constructor_rv_vsrl_vi(
                                                    ctx, v163, v830, v165, v166,
                                                );
                                                let v886 = constructor_output_vreg(ctx, v885);
                                                // Rule at src/isa/riscv64/lower.isle line 914.
                                                return Some(v886);
                                            }
                                        }
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v753 = C::value_regs_get(ctx, v316, 0x0);
                            let v754 = C::xreg_new(ctx, v753);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v883 = constructor_rv_vsrl_vx(ctx, v163, v754, v165, v166);
                            let v884 = constructor_output_vreg(ctx, v883);
                            // Rule at src/isa/riscv64/lower.isle line 911.
                            return Some(v884);
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v764 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v765) = v764 {
                                    let v766 = C::def_inst(ctx, v765);
                                    if let Some(v767) = v766 {
                                        let v768 = &C::inst_data(ctx, v767);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v769,
                                            imm: v770,
                                        } = v768
                                        {
                                            if let &Opcode::Iconst = v769 {
                                                let v771 = C::u64_from_imm64(ctx, v770);
                                                let v772 = C::imm12_from_u64(ctx, v771);
                                                if let Some(v773) = v772 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v852 = constructor_rv_srliw(ctx, v41, v773);
                                                    let v853 = constructor_output_xreg(ctx, v852);
                                                    // Rule at src/isa/riscv64/lower.isle line 883.
                                                    return Some(v853);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v764 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v765) = v764 {
                                    let v766 = C::def_inst(ctx, v765);
                                    if let Some(v767) = v766 {
                                        let v768 = &C::inst_data(ctx, v767);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v769,
                                            imm: v770,
                                        } = v768
                                        {
                                            if let &Opcode::Iconst = v769 {
                                                let v771 = C::u64_from_imm64(ctx, v770);
                                                let v772 = C::imm12_from_u64(ctx, v771);
                                                if let Some(v773) = v772 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v854 = constructor_rv_srli(ctx, v41, v773);
                                                    let v855 = constructor_output_xreg(ctx, v854);
                                                    // Rule at src/isa/riscv64/lower.isle line 886.
                                                    return Some(v855);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v506 = C::put_in_regs(ctx, v38.1);
                                let v507 = C::value_regs_get(ctx, v506, 0x0);
                                let v508 = C::xreg_new(ctx, v507);
                                let v785 = C::gen_shamt(ctx, I128, v508);
                                let v786 = C::value_regs_get(ctx, v785, 0x0);
                                let v787 = C::xreg_new(ctx, v786);
                                let v788 = C::value_regs_get(ctx, v785, 0x1);
                                let v789 = C::xreg_new(ctx, v788);
                                let v790 = C::put_in_regs(ctx, v38.0);
                                let v856 = C::value_regs_get(ctx, v790, 0x1);
                                let v857 = C::xreg_new(ctx, v856);
                                let v858 = constructor_rv_sll(ctx, v857, v789);
                                let v859 = C::zero_reg(ctx);
                                let v860 = C::xreg_new(ctx, v859);
                                let v861 = C::zero_reg(ctx);
                                let v862 = C::xreg_to_reg(ctx, v858);
                                let v863 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v787, v860, v861, v862);
                                let v864 = C::xreg_new(ctx, v863);
                                let v865 = C::put_in_regs(ctx, v38.0);
                                let v866 = C::value_regs_get(ctx, v865, 0x0);
                                let v867 = C::xreg_new(ctx, v866);
                                let v868 = constructor_rv_srl(ctx, v867, v787);
                                let v869 = constructor_rv_or(ctx, v864, v868);
                                let v870 = C::load_u64_constant(ctx, 0x40);
                                let v871 = C::xreg_new(ctx, v870);
                                let v872 = C::put_in_regs(ctx, v38.0);
                                let v873 = C::value_regs_get(ctx, v872, 0x1);
                                let v874 = C::xreg_new(ctx, v873);
                                let v875 = constructor_rv_srl(ctx, v874, v787);
                                let v813 = C::put_in_regs(ctx, v38.1);
                                let v814 = C::value_regs_get(ctx, v813, 0x0);
                                let v815 = C::xreg_new(ctx, v814);
                                let v817 = C::imm12_const(ctx, 0x7F);
                                let v818 = constructor_rv_andi(ctx, v815, v817);
                                let v876 = C::xreg_to_reg(ctx, v875);
                                let v877 = C::xreg_to_reg(ctx, v869);
                                let v878 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v818,
                                    v871,
                                    v876,
                                    v877,
                                );
                                let v879 = C::zero_reg(ctx);
                                let v880 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v818,
                                    v871,
                                    v879,
                                    v876,
                                );
                                let v881 = C::value_regs(ctx, v878, v880);
                                let v882 = C::output(ctx, v881);
                                // Rule at src/isa/riscv64/lower.isle line 889.
                                return Some(v882);
                            }
                            _ => {}
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v764 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v765) = v764 {
                                let v766 = C::def_inst(ctx, v765);
                                if let Some(v767) = v766 {
                                    let v768 = &C::inst_data(ctx, v767);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v769,
                                        imm: v770,
                                    } = v768
                                    {
                                        if let &Opcode::Iconst = v769 {
                                            let v771 = C::u64_from_imm64(ctx, v770);
                                            let v772 = C::imm12_from_u64(ctx, v771);
                                            if let Some(v773) = v772 {
                                                let v833 = C::fits_in_16(ctx, v364);
                                                if let Some(v834) = v833 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v838 =
                                                        constructor_zext(ctx, v41, v834, I64);
                                                    let v835 = constructor_shift_mask(ctx, v834);
                                                    let v849 = C::imm12_and(ctx, v773, v835);
                                                    let v850 =
                                                        constructor_rv_srliw(ctx, v838, v849);
                                                    let v851 = constructor_output_xreg(ctx, v850);
                                                    // Rule at src/isa/riscv64/lower.isle line 880.
                                                    return Some(v851);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v316 = C::put_in_regs(ctx, v38.1);
                                let v753 = C::value_regs_get(ctx, v316, 0x0);
                                let v754 = C::xreg_new(ctx, v753);
                                let v845 = constructor_rv_srlw(ctx, v41, v754);
                                let v846 = constructor_output_xreg(ctx, v845);
                                // Rule at src/isa/riscv64/lower.isle line 872.
                                return Some(v846);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v316 = C::put_in_regs(ctx, v38.1);
                                let v753 = C::value_regs_get(ctx, v316, 0x0);
                                let v754 = C::xreg_new(ctx, v753);
                                let v847 = constructor_rv_srl(ctx, v41, v754);
                                let v848 = constructor_output_xreg(ctx, v847);
                                // Rule at src/isa/riscv64/lower.isle line 876.
                                return Some(v848);
                            }
                            _ => {}
                        }
                        if let Some(v364) = v363 {
                            let v833 = C::fits_in_16(ctx, v364);
                            if let Some(v834) = v833 {
                                let v835 = constructor_shift_mask(ctx, v834);
                                let v836 = constructor_u64_to_imm12(ctx, v835);
                                if let Some(v837) = v836 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v838 = constructor_zext(ctx, v41, v834, I64);
                                    let v839 = C::put_in_regs(ctx, v38.1);
                                    let v840 = C::value_regs_get(ctx, v839, 0x0);
                                    let v841 = C::xreg_new(ctx, v840);
                                    let v842 = constructor_rv_andi(ctx, v841, v837);
                                    let v843 = constructor_rv_srlw(ctx, v838, v842);
                                    let v844 = constructor_output_xreg(ctx, v843);
                                    // Rule at src/isa/riscv64/lower.isle line 867.
                                    return Some(v844);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v764 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v765) = v764 {
                                let v766 = C::def_inst(ctx, v765);
                                if let Some(v767) = v766 {
                                    let v768 = &C::inst_data(ctx, v767);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v769,
                                        imm: v770,
                                    } = v768
                                    {
                                        if let &Opcode::Iconst = v769 {
                                            let v771 = C::u64_from_imm64(ctx, v770);
                                            let v829 = C::uimm5_from_u64(ctx, v771);
                                            if let Some(v830) = v829 {
                                                let v163 = constructor_put_in_vreg(ctx, v38.0);
                                                let v165 = &constructor_unmasked(ctx);
                                                let v166 = C::vstate_from_type(ctx, v11);
                                                let v927 = constructor_rv_vsra_vi(
                                                    ctx, v163, v830, v165, v166,
                                                );
                                                let v928 = constructor_output_vreg(ctx, v927);
                                                // Rule at src/isa/riscv64/lower.isle line 973.
                                                return Some(v928);
                                            }
                                        }
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v316 = C::put_in_regs(ctx, v38.1);
                            let v753 = C::value_regs_get(ctx, v316, 0x0);
                            let v754 = C::xreg_new(ctx, v753);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v925 = constructor_rv_vsra_vx(ctx, v163, v754, v165, v166);
                            let v926 = constructor_output_vreg(ctx, v925);
                            // Rule at src/isa/riscv64/lower.isle line 970.
                            return Some(v926);
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v764 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v765) = v764 {
                                    let v766 = C::def_inst(ctx, v765);
                                    if let Some(v767) = v766 {
                                        let v768 = &C::inst_data(ctx, v767);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v769,
                                            imm: v770,
                                        } = v768
                                        {
                                            if let &Opcode::Iconst = v769 {
                                                let v771 = C::u64_from_imm64(ctx, v770);
                                                let v772 = C::imm12_from_u64(ctx, v771);
                                                if let Some(v773) = v772 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v896 = constructor_rv_sraiw(ctx, v41, v773);
                                                    let v897 = constructor_output_xreg(ctx, v896);
                                                    // Rule at src/isa/riscv64/lower.isle line 937.
                                                    return Some(v897);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v764 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v765) = v764 {
                                    let v766 = C::def_inst(ctx, v765);
                                    if let Some(v767) = v766 {
                                        let v768 = &C::inst_data(ctx, v767);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v769,
                                            imm: v770,
                                        } = v768
                                        {
                                            if let &Opcode::Iconst = v769 {
                                                let v771 = C::u64_from_imm64(ctx, v770);
                                                let v772 = C::imm12_from_u64(ctx, v771);
                                                if let Some(v773) = v772 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v898 = constructor_rv_srai(ctx, v41, v773);
                                                    let v899 = constructor_output_xreg(ctx, v898);
                                                    // Rule at src/isa/riscv64/lower.isle line 940.
                                                    return Some(v899);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v506 = C::put_in_regs(ctx, v38.1);
                                let v507 = C::value_regs_get(ctx, v506, 0x0);
                                let v508 = C::xreg_new(ctx, v507);
                                let v785 = C::gen_shamt(ctx, I128, v508);
                                let v786 = C::value_regs_get(ctx, v785, 0x0);
                                let v787 = C::xreg_new(ctx, v786);
                                let v788 = C::value_regs_get(ctx, v785, 0x1);
                                let v789 = C::xreg_new(ctx, v788);
                                let v790 = C::put_in_regs(ctx, v38.0);
                                let v856 = C::value_regs_get(ctx, v790, 0x1);
                                let v857 = C::xreg_new(ctx, v856);
                                let v858 = constructor_rv_sll(ctx, v857, v789);
                                let v859 = C::zero_reg(ctx);
                                let v860 = C::xreg_new(ctx, v859);
                                let v861 = C::zero_reg(ctx);
                                let v862 = C::xreg_to_reg(ctx, v858);
                                let v863 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v787, v860, v861, v862);
                                let v864 = C::xreg_new(ctx, v863);
                                let v865 = C::put_in_regs(ctx, v38.0);
                                let v866 = C::value_regs_get(ctx, v865, 0x0);
                                let v867 = C::xreg_new(ctx, v866);
                                let v868 = constructor_rv_srl(ctx, v867, v787);
                                let v869 = constructor_rv_or(ctx, v864, v868);
                                let v870 = C::load_u64_constant(ctx, 0x40);
                                let v871 = C::xreg_new(ctx, v870);
                                let v872 = C::put_in_regs(ctx, v38.0);
                                let v873 = C::value_regs_get(ctx, v872, 0x1);
                                let v874 = C::xreg_new(ctx, v873);
                                let v900 = constructor_rv_sra(ctx, v874, v787);
                                let v902 = constructor_load_imm12(ctx, -0x1);
                                let v903 = C::xreg_new(ctx, v902);
                                let v905 = C::put_in_regs(ctx, v38.0);
                                let v906 = C::value_regs_get(ctx, v905, 0x1);
                                let v907 = C::xreg_new(ctx, v906);
                                let v879 = C::zero_reg(ctx);
                                let v908 = C::xreg_new(ctx, v879);
                                let v910 = C::zero_reg(ctx);
                                let v909 = C::xreg_to_reg(ctx, v903);
                                let v911 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::SignedLessThan,
                                    v907,
                                    v908,
                                    v909,
                                    v910,
                                );
                                let v912 = C::xreg_new(ctx, v911);
                                let v913 = C::load_u64_constant(ctx, 0x40);
                                let v914 = C::xreg_new(ctx, v913);
                                let v915 = C::put_in_regs(ctx, v38.1);
                                let v916 = C::value_regs_get(ctx, v915, 0x0);
                                let v917 = C::xreg_new(ctx, v916);
                                let v817 = C::imm12_const(ctx, 0x7F);
                                let v918 = constructor_rv_andi(ctx, v917, v817);
                                let v919 = C::xreg_to_reg(ctx, v900);
                                let v877 = C::xreg_to_reg(ctx, v869);
                                let v920 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v918,
                                    v914,
                                    v919,
                                    v877,
                                );
                                let v921 = C::xreg_to_reg(ctx, v912);
                                let v922 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v918,
                                    v914,
                                    v921,
                                    v919,
                                );
                                let v923 = C::value_regs(ctx, v920, v922);
                                let v924 = C::output(ctx, v923);
                                // Rule at src/isa/riscv64/lower.isle line 943.
                                return Some(v924);
                            }
                            _ => {}
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v764 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v765) = v764 {
                                let v766 = C::def_inst(ctx, v765);
                                if let Some(v767) = v766 {
                                    let v768 = &C::inst_data(ctx, v767);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v769,
                                        imm: v770,
                                    } = v768
                                    {
                                        if let &Opcode::Iconst = v769 {
                                            let v771 = C::u64_from_imm64(ctx, v770);
                                            let v772 = C::imm12_from_u64(ctx, v771);
                                            if let Some(v773) = v772 {
                                                let v833 = C::fits_in_16(ctx, v364);
                                                if let Some(v834) = v833 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v887 =
                                                        constructor_sext(ctx, v41, v834, I64);
                                                    let v835 = constructor_shift_mask(ctx, v834);
                                                    let v849 = C::imm12_and(ctx, v773, v835);
                                                    let v894 =
                                                        constructor_rv_sraiw(ctx, v887, v849);
                                                    let v895 = constructor_output_xreg(ctx, v894);
                                                    // Rule at src/isa/riscv64/lower.isle line 934.
                                                    return Some(v895);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v316 = C::put_in_regs(ctx, v38.1);
                                let v753 = C::value_regs_get(ctx, v316, 0x0);
                                let v754 = C::xreg_new(ctx, v753);
                                let v890 = constructor_rv_sraw(ctx, v41, v754);
                                let v891 = constructor_output_xreg(ctx, v890);
                                // Rule at src/isa/riscv64/lower.isle line 926.
                                return Some(v891);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v316 = C::put_in_regs(ctx, v38.1);
                                let v753 = C::value_regs_get(ctx, v316, 0x0);
                                let v754 = C::xreg_new(ctx, v753);
                                let v892 = constructor_rv_sra(ctx, v41, v754);
                                let v893 = constructor_output_xreg(ctx, v892);
                                // Rule at src/isa/riscv64/lower.isle line 930.
                                return Some(v893);
                            }
                            _ => {}
                        }
                        if let Some(v364) = v363 {
                            let v833 = C::fits_in_16(ctx, v364);
                            if let Some(v834) = v833 {
                                let v835 = constructor_shift_mask(ctx, v834);
                                let v836 = constructor_u64_to_imm12(ctx, v835);
                                if let Some(v837) = v836 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v887 = constructor_sext(ctx, v41, v834, I64);
                                    let v839 = C::put_in_regs(ctx, v38.1);
                                    let v840 = C::value_regs_get(ctx, v839, 0x0);
                                    let v841 = C::xreg_new(ctx, v840);
                                    let v842 = constructor_rv_andi(ctx, v841, v837);
                                    let v888 = constructor_rv_sraw(ctx, v887, v842);
                                    let v889 = constructor_output_xreg(ctx, v888);
                                    // Rule at src/isa/riscv64/lower.isle line 921.
                                    return Some(v889);
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1063 = constructor_put_in_freg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1064 =
                                            constructor_rv_vfadd_vf(ctx, v196, v1063, v165, v166);
                                        let v1065 = constructor_output_vreg(ctx, v1064);
                                        // Rule at src/isa/riscv64/lower.isle line 1146.
                                        return Some(v1065);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v951 = constructor_put_in_freg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1061 =
                                            constructor_rv_vfadd_vf(ctx, v163, v951, v165, v166);
                                        let v1062 = constructor_output_vreg(ctx, v1061);
                                        // Rule at src/isa/riscv64/lower.isle line 1143.
                                        return Some(v1062);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1059 = constructor_rv_vfadd_vv(ctx, v163, v164, v165, v166);
                            let v1060 = constructor_output_vreg(ctx, v1059);
                            // Rule at src/isa/riscv64/lower.isle line 1140.
                            return Some(v1060);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v1057 = constructor_rv_fadd(ctx, v480, v482, v483);
                            let v1058 = constructor_output_freg(ctx, v1057);
                            // Rule at src/isa/riscv64/lower.isle line 1137.
                            return Some(v1058);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1063 = constructor_put_in_freg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1072 =
                                            constructor_rv_vfrsub_vf(ctx, v196, v1063, v165, v166);
                                        let v1073 = constructor_output_vreg(ctx, v1072);
                                        // Rule at src/isa/riscv64/lower.isle line 1160.
                                        return Some(v1073);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v951 = constructor_put_in_freg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1070 =
                                            constructor_rv_vfsub_vf(ctx, v163, v951, v165, v166);
                                        let v1071 = constructor_output_vreg(ctx, v1070);
                                        // Rule at src/isa/riscv64/lower.isle line 1157.
                                        return Some(v1071);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1068 = constructor_rv_vfsub_vv(ctx, v163, v164, v165, v166);
                            let v1069 = constructor_output_vreg(ctx, v1068);
                            // Rule at src/isa/riscv64/lower.isle line 1154.
                            return Some(v1069);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v1066 = constructor_rv_fsub(ctx, v480, v482, v483);
                            let v1067 = constructor_output_freg(ctx, v1066);
                            // Rule at src/isa/riscv64/lower.isle line 1151.
                            return Some(v1067);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1063 = constructor_put_in_freg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1080 =
                                            constructor_rv_vfmul_vf(ctx, v196, v1063, v165, v166);
                                        let v1081 = constructor_output_vreg(ctx, v1080);
                                        // Rule at src/isa/riscv64/lower.isle line 1173.
                                        return Some(v1081);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v951 = constructor_put_in_freg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1078 =
                                            constructor_rv_vfmul_vf(ctx, v163, v951, v165, v166);
                                        let v1079 = constructor_output_vreg(ctx, v1078);
                                        // Rule at src/isa/riscv64/lower.isle line 1170.
                                        return Some(v1079);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1076 = constructor_rv_vfmul_vv(ctx, v163, v164, v165, v166);
                            let v1077 = constructor_output_vreg(ctx, v1076);
                            // Rule at src/isa/riscv64/lower.isle line 1167.
                            return Some(v1077);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v1074 = constructor_rv_fmul(ctx, v480, v482, v483);
                            let v1075 = constructor_output_freg(ctx, v1074);
                            // Rule at src/isa/riscv64/lower.isle line 1164.
                            return Some(v1075);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v57 = C::def_inst(ctx, v38.0);
                            if let Some(v58) = v57 {
                                let v59 = &C::inst_data(ctx, v58);
                                if let &InstructionData::Unary {
                                    opcode: ref v76,
                                    arg: v77,
                                } = v59
                                {
                                    if let &Opcode::Splat = v76 {
                                        let v196 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1063 = constructor_put_in_freg(ctx, v77);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1088 =
                                            constructor_rv_vfrdiv_vf(ctx, v196, v1063, v165, v166);
                                        let v1089 = constructor_output_vreg(ctx, v1088);
                                        // Rule at src/isa/riscv64/lower.isle line 1187.
                                        return Some(v1089);
                                    }
                                }
                            }
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v951 = constructor_put_in_freg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1086 =
                                            constructor_rv_vfdiv_vf(ctx, v163, v951, v165, v166);
                                        let v1087 = constructor_output_vreg(ctx, v1086);
                                        // Rule at src/isa/riscv64/lower.isle line 1184.
                                        return Some(v1087);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1084 = constructor_rv_vfdiv_vv(ctx, v163, v164, v165, v166);
                            let v1085 = constructor_output_vreg(ctx, v1084);
                            // Rule at src/isa/riscv64/lower.isle line 1181.
                            return Some(v1085);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v1082 = constructor_rv_fdiv(ctx, v480, v482, v483);
                            let v1083 = constructor_output_freg(ctx, v1082);
                            // Rule at src/isa/riscv64/lower.isle line 1178.
                            return Some(v1083);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v45 = C::def_inst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = &C::inst_data(ctx, v46);
                                if let &InstructionData::Unary {
                                    opcode: ref v68,
                                    arg: v69,
                                } = v47
                                {
                                    if let &Opcode::Splat = v68 {
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v951 = constructor_put_in_freg(ctx, v69);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v952 =
                                            constructor_rv_vfsgnj_vf(ctx, v163, v951, v165, v166);
                                        let v953 = constructor_output_vreg(ctx, v952);
                                        // Rule at src/isa/riscv64/lower.isle line 1013.
                                        return Some(v953);
                                    }
                                }
                            }
                            let v163 = constructor_put_in_vreg(ctx, v38.0);
                            let v164 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v949 = constructor_rv_vfsgnj_vv(ctx, v163, v164, v165, v166);
                            let v950 = constructor_output_vreg(ctx, v949);
                            // Rule at src/isa/riscv64/lower.isle line 1010.
                            return Some(v950);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_put_in_freg(ctx, v38.0);
                            let v483 = constructor_put_in_freg(ctx, v38.1);
                            let v947 = constructor_rv_fsgnj(ctx, v480, v482, v483);
                            let v948 = constructor_output_freg(ctx, v947);
                            // Rule at src/isa/riscv64/lower.isle line 1007.
                            return Some(v948);
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1095 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v38.0,
                                v38.1,
                            );
                            let v709 = C::lane_type(ctx, v11);
                            let v1096 = constructor_canonical_nan_u64(ctx, v709);
                            let v1097 = C::imm(ctx, I64, v1096);
                            let v1098 = C::xreg_new(ctx, v1097);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1099 = constructor_rv_vmv_vx(ctx, v1098, v166);
                            let v1100 = constructor_put_in_vreg(ctx, v38.0);
                            let v1101 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v1102 = constructor_rv_vfmin_vv(ctx, v1100, v1101, v165, v166);
                            let v1103 = constructor_rv_vmerge_vvm(ctx, v1099, v1102, v1095, v166);
                            let v1104 = constructor_output_vreg(ctx, v1103);
                            // Rule at src/isa/riscv64/lower.isle line 1201.
                            return Some(v1104);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1091 = C::put_in_reg(ctx, v38.0);
                            let v65 = C::put_in_reg(ctx, v38.1);
                            let v1092 = constructor_gen_float_select(
                                ctx,
                                &FloatSelectOP::Min,
                                v1091,
                                v65,
                                v480,
                            );
                            let v1093 = constructor_output_reg(ctx, v1092);
                            // Rule at src/isa/riscv64/lower.isle line 1192.
                            return Some(v1093);
                        }
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1114 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::LessThan,
                                v38.1,
                                v38.0,
                            );
                            let v1115 = constructor_put_in_vreg(ctx, v38.0);
                            let v1116 = constructor_put_in_vreg(ctx, v38.1);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1117 = constructor_rv_vmerge_vvm(ctx, v1115, v1116, v1114, v166);
                            let v1118 = constructor_output_vreg(ctx, v1117);
                            // Rule at src/isa/riscv64/lower.isle line 1231.
                            return Some(v1118);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1091 = C::put_in_reg(ctx, v38.0);
                            let v65 = C::put_in_reg(ctx, v38.1);
                            let v1111 = constructor_gen_float_select_pseudo(
                                ctx,
                                &FloatSelectOP::Min,
                                v1091,
                                v65,
                                v480,
                            );
                            let v1112 = constructor_output_reg(ctx, v1111);
                            // Rule at src/isa/riscv64/lower.isle line 1228.
                            return Some(v1112);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1095 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v38.0,
                                v38.1,
                            );
                            let v709 = C::lane_type(ctx, v11);
                            let v1096 = constructor_canonical_nan_u64(ctx, v709);
                            let v1097 = C::imm(ctx, I64, v1096);
                            let v1098 = C::xreg_new(ctx, v1097);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1099 = constructor_rv_vmv_vx(ctx, v1098, v166);
                            let v1100 = constructor_put_in_vreg(ctx, v38.0);
                            let v1101 = constructor_put_in_vreg(ctx, v38.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v1108 = constructor_rv_vfmax_vv(ctx, v1100, v1101, v165, v166);
                            let v1109 = constructor_rv_vmerge_vvm(ctx, v1099, v1108, v1095, v166);
                            let v1110 = constructor_output_vreg(ctx, v1109);
                            // Rule at src/isa/riscv64/lower.isle line 1219.
                            return Some(v1110);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1091 = C::put_in_reg(ctx, v38.0);
                            let v65 = C::put_in_reg(ctx, v38.1);
                            let v1106 = constructor_gen_float_select(
                                ctx,
                                &FloatSelectOP::Max,
                                v1091,
                                v65,
                                v480,
                            );
                            let v1107 = constructor_output_reg(ctx, v1106);
                            // Rule at src/isa/riscv64/lower.isle line 1210.
                            return Some(v1107);
                        }
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1121 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::LessThan,
                                v38.0,
                                v38.1,
                            );
                            let v1115 = constructor_put_in_vreg(ctx, v38.0);
                            let v1116 = constructor_put_in_vreg(ctx, v38.1);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1122 = constructor_rv_vmerge_vvm(ctx, v1115, v1116, v1121, v166);
                            let v1123 = constructor_output_vreg(ctx, v1122);
                            // Rule at src/isa/riscv64/lower.isle line 1240.
                            return Some(v1123);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1091 = C::put_in_reg(ctx, v38.0);
                            let v65 = C::put_in_reg(ctx, v38.1);
                            let v1119 = constructor_gen_float_select_pseudo(
                                ctx,
                                &FloatSelectOP::Max,
                                v1091,
                                v65,
                                v480,
                            );
                            let v1120 = constructor_output_reg(ctx, v1119);
                            // Rule at src/isa/riscv64/lower.isle line 1237.
                            return Some(v1120);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1611 = C::ty_lane_count(ctx, v11);
                            let v1653 = C::u64_udiv(ctx, v1611, 0x2);
                            if let Some(v1654) = v1653 {
                                let v1655 = constructor_u64_to_uimm5(ctx, v1654);
                                if let Some(v1656) = v1655 {
                                    let v1698 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v1699) = v1698 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v1700 = C::ty_half_lanes(ctx, v11);
                                        let v1701 = v1700?;
                                        let v1702 = C::vstate_from_type(ctx, v1701);
                                        let v1703 = C::vstate_mf2(ctx, v1702);
                                        let v1704 =
                                            constructor_rv_vnclip_wi(ctx, v163, v1699, v165, v1703);
                                        let v1116 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1705 = constructor_rv_vnclip_wi(
                                            ctx, v1116, v1699, v165, v1703,
                                        );
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1706 = constructor_rv_vslideup_vvi(
                                            ctx, v1704, v1705, v1656, v165, v166,
                                        );
                                        let v1707 = constructor_output_vreg(ctx, v1706);
                                        // Rule at src/isa/riscv64/lower.isle line 1973.
                                        return Some(v1707);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1611 = C::ty_lane_count(ctx, v11);
                            let v1653 = C::u64_udiv(ctx, v1611, 0x2);
                            if let Some(v1654) = v1653 {
                                let v1655 = constructor_u64_to_uimm5(ctx, v1654);
                                if let Some(v1656) = v1655 {
                                    let v1698 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v1699) = v1698 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1568 = C::zero_reg(ctx);
                                        let v1569 = C::xreg_new(ctx, v1568);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v1697 = C::value_type(ctx, v38.0);
                                        let v1712 = C::vstate_from_type(ctx, v1697);
                                        let v1713 =
                                            constructor_rv_vmax_vx(ctx, v163, v1569, v165, v1712);
                                        let v1672 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1714 = C::zero_reg(ctx);
                                        let v1715 = C::xreg_new(ctx, v1714);
                                        let v1716 =
                                            constructor_rv_vmax_vx(ctx, v1672, v1715, v165, v1712);
                                        let v1700 = C::ty_half_lanes(ctx, v11);
                                        let v1701 = v1700?;
                                        let v1702 = C::vstate_from_type(ctx, v1701);
                                        let v1703 = C::vstate_mf2(ctx, v1702);
                                        let v1717 = constructor_rv_vnclipu_wi(
                                            ctx, v1713, v1699, v165, v1703,
                                        );
                                        let v1718 = constructor_rv_vnclipu_wi(
                                            ctx, v1716, v1699, v165, v1703,
                                        );
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1719 = constructor_rv_vslideup_vvi(
                                            ctx, v1717, v1718, v1656, v165, v166,
                                        );
                                        let v1720 = constructor_output_vreg(ctx, v1719);
                                        // Rule at src/isa/riscv64/lower.isle line 1995.
                                        return Some(v1720);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1611 = C::ty_lane_count(ctx, v11);
                            let v1653 = C::u64_udiv(ctx, v1611, 0x2);
                            if let Some(v1654) = v1653 {
                                let v1655 = constructor_u64_to_uimm5(ctx, v1654);
                                if let Some(v1656) = v1655 {
                                    let v1698 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v1699) = v1698 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v163 = constructor_put_in_vreg(ctx, v38.0);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v1700 = C::ty_half_lanes(ctx, v11);
                                        let v1701 = v1700?;
                                        let v1702 = C::vstate_from_type(ctx, v1701);
                                        let v1703 = C::vstate_mf2(ctx, v1702);
                                        let v1708 = constructor_rv_vnclipu_wi(
                                            ctx, v163, v1699, v165, v1703,
                                        );
                                        let v1116 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1709 = constructor_rv_vnclipu_wi(
                                            ctx, v1116, v1699, v165, v1703,
                                        );
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1710 = constructor_rv_vslideup_vvi(
                                            ctx, v1708, v1709, v1656, v165, v166,
                                        );
                                        let v1711 = constructor_output_vreg(ctx, v1710);
                                        // Rule at src/isa/riscv64/lower.isle line 1982.
                                        return Some(v1711);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1611 = C::ty_lane_count(ctx, v11);
                            let v1653 = C::u64_udiv(ctx, v1611, 0x2);
                            if let Some(v1654) = v1653 {
                                let v1655 = constructor_u64_to_uimm5(ctx, v1654);
                                if let Some(v1656) = v1655 {
                                    let v1657 = constructor_gen_vec_mask(ctx, 0x5555555555555555);
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v1115 = constructor_put_in_vreg(ctx, v38.0);
                                    let v166 = C::vstate_from_type(ctx, v11);
                                    let v1658 =
                                        constructor_rv_vcompress_vm(ctx, v1115, v1657, v166);
                                    let v1659 = constructor_put_in_vreg(ctx, v38.1);
                                    let v1660 =
                                        constructor_rv_vcompress_vm(ctx, v1659, v1657, v166);
                                    let v165 = &constructor_unmasked(ctx);
                                    let v1661 = constructor_rv_vslideup_vvi(
                                        ctx, v1658, v1660, v1656, v165, v166,
                                    );
                                    let v1663 = constructor_gen_vec_mask(ctx, 0xAAAAAAAAAAAAAAAA);
                                    let v1664 = constructor_put_in_vreg(ctx, v38.0);
                                    let v1665 =
                                        constructor_rv_vcompress_vm(ctx, v1664, v1663, v166);
                                    let v1666 = constructor_put_in_vreg(ctx, v38.1);
                                    let v1667 =
                                        constructor_rv_vcompress_vm(ctx, v1666, v1663, v166);
                                    let v1668 = constructor_rv_vslideup_vvi(
                                        ctx, v1665, v1667, v1656, v165, v166,
                                    );
                                    let v1669 =
                                        constructor_rv_vadd_vv(ctx, v1661, v1668, v165, v166);
                                    let v1670 = constructor_output_vreg(ctx, v1669);
                                    // Rule at src/isa/riscv64/lower.isle line 1907.
                                    return Some(v1670);
                                }
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v1196 = C::xreg_to_reg(ctx, v41);
                            let v1197 = C::xreg_to_reg(ctx, v42);
                            let v1198 = C::value_regs(ctx, v1196, v1197);
                            let v1199 = C::output(ctx, v1198);
                            // Rule at src/isa/riscv64/lower.isle line 1302.
                            return Some(v1199);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1465,
            arg: v1466,
            imm: v1467,
        } => {
            if let &Opcode::Extractlane = v1465 {
                let v1470 = constructor_put_in_vreg(ctx, v1466);
                let v1468 = C::value_type(ctx, v1466);
                let v1469 = C::u8_from_uimm8(ctx, v1467);
                let v1471 = constructor_gen_extractlane(ctx, v1468, v1470, v1469);
                let v1472 = constructor_output_reg(ctx, v1471);
                // Rule at src/isa/riscv64/lower.isle line 1672.
                return Some(v1472);
            }
        }
        &InstructionData::Call {
            opcode: ref v1445,
            args: v1446,
            func_ref: v1447,
        } => {
            match v1445 {
                &Opcode::Call => {
                    let v1449 = C::func_ref_data(ctx, v1447);
                    let v1448 = C::value_list_slice(ctx, v1446);
                    let v1453 = C::gen_call(ctx, v1449.0, v1449.1, v1449.2, v1448);
                    // Rule at src/isa/riscv64/lower.isle line 1655.
                    return Some(v1453);
                }
                &Opcode::ReturnCall => {
                    let v1449 = C::func_ref_data(ctx, v1447);
                    let v1448 = C::value_list_slice(ctx, v1446);
                    let v1463 = C::gen_return_call(ctx, v1449.0, v1449.1, v1449.2, v1448);
                    // Rule at src/isa/riscv64/lower.isle line 1663.
                    return Some(v1463);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1454,
            args: v1455,
            sig_ref: v1456,
        } => {
            match v1454 {
                &Opcode::CallIndirect => {
                    let v1457 = C::value_list_slice(ctx, v1455);
                    let v1458 = C::value_slice_unwrap(ctx, v1457);
                    if let Some(v1459) = v1458 {
                        let v1462 = C::gen_call_indirect(ctx, v1456, v1459.0, v1459.1);
                        // Rule at src/isa/riscv64/lower.isle line 1658.
                        return Some(v1462);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1457 = C::value_list_slice(ctx, v1455);
                    let v1458 = C::value_slice_unwrap(ctx, v1457);
                    if let Some(v1459) = v1458 {
                        let v1464 = C::gen_return_call_indirect(ctx, v1456, v1459.0, v1459.1);
                        // Rule at src/isa/riscv64/lower.isle line 1666.
                        return Some(v1464);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1346,
            args: ref v1347,
            cond: ref v1348,
        } => {
            if let &Opcode::Fcmp = v1346 {
                let v1349 = C::unpack_value_array_2(ctx, v1347);
                let v1352 = C::value_type(ctx, v1349.0);
                let v1360 = C::ty_vec_fits_in_register(ctx, v1352);
                if let Some(v1361) = v1360 {
                    let v1362 = constructor_gen_fcmp_mask(ctx, v1361, v1348, v1349.0, v1349.1);
                    let v1363 = constructor_gen_expand_mask(ctx, v1361, v1362);
                    let v1364 = constructor_output_vreg(ctx, v1363);
                    // Rule at src/isa/riscv64/lower.isle line 1522.
                    return Some(v1364);
                }
                let v1353 = C::ty_scalar_float(ctx, v1352);
                if let Some(v1354) = v1353 {
                    let v1355 = constructor_put_in_freg(ctx, v1349.0);
                    let v1356 = constructor_put_in_freg(ctx, v1349.1);
                    let v1357 = &constructor_emit_fcmp(ctx, v1348, v1354, v1355, v1356);
                    let v1358 = constructor_cmp_value(ctx, v1357);
                    let v1359 = constructor_output_xreg(ctx, v1358);
                    // Rule at src/isa/riscv64/lower.isle line 1519.
                    return Some(v1359);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1365,
            func_ref: v1366,
        } => {
            if let &Opcode::FuncAddr = v1365 {
                let v1367 = C::func_ref_data(ctx, v1366);
                let v1372 = C::load_ext_name(ctx, v1367.1, 0x0);
                let v1373 = constructor_output_reg(ctx, v1372);
                // Rule at src/isa/riscv64/lower.isle line 1527.
                return Some(v1373);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v294,
            args: ref v295,
            code: ref v296,
        } => {
            if let &Opcode::UaddOverflowTrap = v294 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v292 = C::fits_in_64(ctx, v3);
                    if let Some(v293) = v292 {
                        let v297 = C::unpack_value_array_2(ctx, v295);
                        let v300 = constructor_put_in_xreg(ctx, v297.0);
                        let v301 = constructor_put_in_xreg(ctx, v297.1);
                        let v302 = constructor_lower_uadd_overflow(ctx, v300, v301, v293);
                        let v303 = C::value_regs_get(ctx, v302, 0x1);
                        let v304 = C::xreg_new(ctx, v303);
                        let v305 = constructor_gen_trapif(ctx, v304, v296);
                        let v306 = C::value_regs_get(ctx, v302, 0x0);
                        let v307 = constructor_output_reg(ctx, v306);
                        // Rule at src/isa/riscv64/lower.isle line 255.
                        return Some(v307);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1328,
            args: ref v1329,
            cond: ref v1330,
        } => {
            if let &Opcode::Icmp = v1328 {
                let v1331 = C::unpack_value_array_2(ctx, v1329);
                let v1334 = C::value_type(ctx, v1331.0);
                let v1341 = C::ty_vec_fits_in_register(ctx, v1334);
                if let Some(v1342) = v1341 {
                    let v1343 = constructor_gen_icmp_mask(ctx, v1342, v1330, v1331.0, v1331.1);
                    let v1344 = constructor_gen_expand_mask(ctx, v1342, v1343);
                    let v1345 = constructor_output_vreg(ctx, v1344);
                    // Rule at src/isa/riscv64/lower.isle line 1514.
                    return Some(v1345);
                }
                let v1335 = C::ty_int(ctx, v1334);
                if let Some(v1336) = v1335 {
                    let v1337 = C::put_in_regs(ctx, v1331.0);
                    let v1338 = C::put_in_regs(ctx, v1331.1);
                    let v1339 = constructor_lower_icmp(ctx, v1330, v1337, v1338, v1336);
                    let v1340 = constructor_output_reg(ctx, v1339);
                    // Rule at src/isa/riscv64/lower.isle line 1511.
                    return Some(v1340);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1252,
            arg: v1253,
            flags: v1254,
            offset: v1255,
        } => {
            match v1252 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1256 = C::value_type(ctx, v1253);
                        let v1257 = C::ty_addr64(ctx, v1256);
                        if let Some(v1258) = v1257 {
                            let v3 = C::value_type(ctx, v2);
                            let v10 = C::ty_vec_fits_in_register(ctx, v3);
                            if let Some(v11) = v10 {
                                let v1259 = C::put_in_reg(ctx, v1253);
                                let v1287 = C::gen_amode(ctx, v1259, v1255, I64);
                                let v1286 = &constructor_element_width_from_type(ctx, v11);
                                let v1288 = VecAMode::UnitStride { base: v1287 };
                                let v165 = &constructor_unmasked(ctx);
                                let v166 = C::vstate_from_type(ctx, v11);
                                let v1289 =
                                    constructor_vec_load(ctx, v1286, &v1288, v1254, v165, v166);
                                let v1290 = constructor_output_reg(ctx, v1289);
                                // Rule at src/isa/riscv64/lower.isle line 1423.
                                return Some(v1290);
                            }
                            if v3 == I128 {
                                let v1259 = C::put_in_reg(ctx, v1253);
                                let v1284 = constructor_gen_load_128(ctx, v1259, v1255, v1254);
                                let v1285 = C::output(ctx, v1284);
                                // Rule at src/isa/riscv64/lower.isle line 1419.
                                return Some(v1285);
                            }
                            let v1259 = C::put_in_reg(ctx, v1253);
                            let v1281 = &C::load_op(ctx, v3);
                            let v1282 = constructor_gen_load(ctx, v1259, v1255, v1281, v1254, v3);
                            let v1283 = constructor_output_reg(ctx, v1282);
                            // Rule at src/isa/riscv64/lower.isle line 1415.
                            return Some(v1283);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1256 = C::value_type(ctx, v1253);
                    let v1257 = C::ty_addr64(ctx, v1256);
                    if let Some(v1258) = v1257 {
                        let v1259 = C::put_in_reg(ctx, v1253);
                        let v1261 = &constructor_int_load_op(ctx, false, 0x8);
                        let v1262 = constructor_gen_load(ctx, v1259, v1255, v1261, v1254, I64);
                        let v1263 = constructor_output_reg(ctx, v1262);
                        // Rule at src/isa/riscv64/lower.isle line 1388.
                        return Some(v1263);
                    }
                }
                &Opcode::Sload8 => {
                    let v1256 = C::value_type(ctx, v1253);
                    let v1257 = C::ty_addr64(ctx, v1256);
                    if let Some(v1258) = v1257 {
                        let v1259 = C::put_in_reg(ctx, v1253);
                        let v1264 = &constructor_int_load_op(ctx, true, 0x8);
                        let v1265 = constructor_gen_load(ctx, v1259, v1255, v1264, v1254, I64);
                        let v1266 = constructor_output_reg(ctx, v1265);
                        // Rule at src/isa/riscv64/lower.isle line 1392.
                        return Some(v1266);
                    }
                }
                &Opcode::Uload16 => {
                    let v1256 = C::value_type(ctx, v1253);
                    let v1257 = C::ty_addr64(ctx, v1256);
                    if let Some(v1258) = v1257 {
                        let v1259 = C::put_in_reg(ctx, v1253);
                        let v1268 = &constructor_int_load_op(ctx, false, 0x10);
                        let v1269 = constructor_gen_load(ctx, v1259, v1255, v1268, v1254, I64);
                        let v1270 = constructor_output_reg(ctx, v1269);
                        // Rule at src/isa/riscv64/lower.isle line 1396.
                        return Some(v1270);
                    }
                }
                &Opcode::Sload16 => {
                    let v1256 = C::value_type(ctx, v1253);
                    let v1257 = C::ty_addr64(ctx, v1256);
                    if let Some(v1258) = v1257 {
                        let v1259 = C::put_in_reg(ctx, v1253);
                        let v1271 = &constructor_int_load_op(ctx, true, 0x10);
                        let v1272 = constructor_gen_load(ctx, v1259, v1255, v1271, v1254, I64);
                        let v1273 = constructor_output_reg(ctx, v1272);
                        // Rule at src/isa/riscv64/lower.isle line 1401.
                        return Some(v1273);
                    }
                }
                &Opcode::Uload32 => {
                    let v1256 = C::value_type(ctx, v1253);
                    let v1257 = C::ty_addr64(ctx, v1256);
                    if let Some(v1258) = v1257 {
                        let v1259 = C::put_in_reg(ctx, v1253);
                        let v1275 = &constructor_int_load_op(ctx, false, 0x20);
                        let v1276 = constructor_gen_load(ctx, v1259, v1255, v1275, v1254, I64);
                        let v1277 = constructor_output_reg(ctx, v1276);
                        // Rule at src/isa/riscv64/lower.isle line 1406.
                        return Some(v1277);
                    }
                }
                &Opcode::Sload32 => {
                    let v1256 = C::value_type(ctx, v1253);
                    let v1257 = C::ty_addr64(ctx, v1256);
                    if let Some(v1258) = v1257 {
                        let v1259 = C::put_in_reg(ctx, v1253);
                        let v1278 = &constructor_int_load_op(ctx, true, 0x20);
                        let v1279 = constructor_gen_load(ctx, v1259, v1255, v1278, v1254, I64);
                        let v1280 = constructor_output_reg(ctx, v1279);
                        // Rule at src/isa/riscv64/lower.isle line 1411.
                        return Some(v1280);
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1256 = C::value_type(ctx, v1253);
                                let v1257 = C::ty_addr64(ctx, v1256);
                                if let Some(v1258) = v1257 {
                                    let v1291 = constructor_put_in_xreg(ctx, v1253);
                                    let v1292 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Zero,
                                        v1254,
                                        v1291,
                                        v1255,
                                    );
                                    let v1293 = constructor_output_vreg(ctx, v1292);
                                    // Rule at src/isa/riscv64/lower.isle line 1450.
                                    return Some(v1293);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1256 = C::value_type(ctx, v1253);
                                let v1257 = C::ty_addr64(ctx, v1256);
                                if let Some(v1258) = v1257 {
                                    let v1291 = constructor_put_in_xreg(ctx, v1253);
                                    let v1294 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Signed,
                                        v1254,
                                        v1291,
                                        v1255,
                                    );
                                    let v1295 = constructor_output_vreg(ctx, v1294);
                                    // Rule at src/isa/riscv64/lower.isle line 1462.
                                    return Some(v1295);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1256 = C::value_type(ctx, v1253);
                                let v1257 = C::ty_addr64(ctx, v1256);
                                if let Some(v1258) = v1257 {
                                    let v1291 = constructor_put_in_xreg(ctx, v1253);
                                    let v1292 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Zero,
                                        v1254,
                                        v1291,
                                        v1255,
                                    );
                                    let v1293 = constructor_output_vreg(ctx, v1292);
                                    // Rule at src/isa/riscv64/lower.isle line 1454.
                                    return Some(v1293);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1256 = C::value_type(ctx, v1253);
                                let v1257 = C::ty_addr64(ctx, v1256);
                                if let Some(v1258) = v1257 {
                                    let v1291 = constructor_put_in_xreg(ctx, v1253);
                                    let v1294 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Signed,
                                        v1254,
                                        v1291,
                                        v1255,
                                    );
                                    let v1295 = constructor_output_vreg(ctx, v1294);
                                    // Rule at src/isa/riscv64/lower.isle line 1466.
                                    return Some(v1295);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1256 = C::value_type(ctx, v1253);
                                let v1257 = C::ty_addr64(ctx, v1256);
                                if let Some(v1258) = v1257 {
                                    let v1291 = constructor_put_in_xreg(ctx, v1253);
                                    let v1292 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Zero,
                                        v1254,
                                        v1291,
                                        v1255,
                                    );
                                    let v1293 = constructor_output_vreg(ctx, v1292);
                                    // Rule at src/isa/riscv64/lower.isle line 1458.
                                    return Some(v1293);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1256 = C::value_type(ctx, v1253);
                                let v1257 = C::ty_addr64(ctx, v1256);
                                if let Some(v1258) = v1257 {
                                    let v1291 = constructor_put_in_xreg(ctx, v1253);
                                    let v1294 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Signed,
                                        v1254,
                                        v1291,
                                        v1255,
                                    );
                                    let v1295 = constructor_output_vreg(ctx, v1294);
                                    // Rule at src/isa/riscv64/lower.isle line 1470.
                                    return Some(v1295);
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1012,
            arg: v1013,
            flags: v1014,
        } => {
            match v1012 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1015 = C::put_in_reg(ctx, v1013);
                        let v1402 = C::value_type(ctx, v1013);
                        let v3 = C::value_type(ctx, v2);
                        let v1403 = constructor_gen_bitcast(ctx, v1015, v1402, v3);
                        let v1404 = constructor_output_reg(ctx, v1403);
                        // Rule at src/isa/riscv64/lower.isle line 1571.
                        return Some(v1404);
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v969 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v970) = v969 {
                            let v1015 = C::put_in_reg(ctx, v1013);
                            let v1016 = constructor_gen_atomic_load(ctx, v1015, v970);
                            let v1017 = constructor_output_reg(ctx, v1016);
                            // Rule at src/isa/riscv64/lower.isle line 1085.
                            return Some(v1017);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1427,
            args: v1428,
        } => {
            if let &Opcode::Return = v1427 {
                let v1429 = C::value_list_slice(ctx, v1428);
                let v1430 = constructor_lower_return(ctx, v1429);
                // Rule at src/isa/riscv64/lower.isle line 1620.
                return Some(v1430);
            }
        }
        &InstructionData::NullAry { opcode: ref v30 } => {
            match v30 {
                &Opcode::Debugtrap => {
                    let v1243 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v1244 = constructor_side_effect(ctx, &v1243);
                    // Rule at src/isa/riscv64/lower.isle line 1368.
                    return Some(v1244);
                }
                &Opcode::GetFramePointer => {
                    let v1431 = C::fp_reg(ctx);
                    let v1432 = constructor_gen_mov_from_preg(ctx, v1431);
                    let v1433 = constructor_output_reg(ctx, v1432);
                    // Rule at src/isa/riscv64/lower.isle line 1625.
                    return Some(v1433);
                }
                &Opcode::GetStackPointer => {
                    let v1434 = C::sp_reg(ctx);
                    let v1435 = constructor_gen_mov_from_preg(ctx, v1434);
                    let v1436 = constructor_output_reg(ctx, v1435);
                    // Rule at src/isa/riscv64/lower.isle line 1628.
                    return Some(v1436);
                }
                &Opcode::GetReturnAddress => {
                    let v1437 = C::load_ra(ctx);
                    let v1438 = constructor_output_reg(ctx, v1437);
                    // Rule at src/isa/riscv64/lower.isle line 1631.
                    return Some(v1438);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::imm(ctx, v3, 0x0);
                        let v33 = constructor_output_reg(ctx, v32);
                        // Rule at src/isa/riscv64/lower.isle line 29.
                        return Some(v33);
                    }
                }
                &Opcode::Fence => {
                    let v1246 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v1247 = SideEffectNoResult::Inst { inst: v1246 };
                    let v1248 = constructor_side_effect(ctx, &v1247);
                    // Rule at src/isa/riscv64/lower.isle line 1373.
                    return Some(v1248);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1585,
            args: ref v1586,
            imm: v1587,
        } => {
            if let &Opcode::Shuffle = v1585 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        if v11 == I8X16 {
                            let v1591 = C::vconst_from_immediate(ctx, v1587);
                            if let Some(v1592) = v1591 {
                                let v1594 = C::imm5_from_i8(ctx, -0x10);
                                if let Some(v1595) = v1594 {
                                    let v1596 = constructor_gen_constant(ctx, v11, v1592);
                                    let v1588 = C::unpack_value_array_2(ctx, v1586);
                                    let v1597 = constructor_put_in_vreg(ctx, v1588.0);
                                    let v165 = &constructor_unmasked(ctx);
                                    let v166 = C::vstate_from_type(ctx, v11);
                                    let v1598 =
                                        constructor_rv_vrgather_vv(ctx, v1597, v1596, v165, v166);
                                    let v1599 =
                                        constructor_rv_vadd_vi(ctx, v1596, v1595, v165, v166);
                                    let v1600 = constructor_put_in_vreg(ctx, v1588.1);
                                    let v1601 =
                                        constructor_rv_vrgather_vv(ctx, v1600, v1599, v165, v166);
                                    let v1602 =
                                        constructor_rv_vor_vv(ctx, v1598, v1601, v165, v166);
                                    let v1603 = constructor_output_vreg(ctx, v1602);
                                    // Rule at src/isa/riscv64/lower.isle line 1834.
                                    return Some(v1603);
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1124,
            stack_slot: v1125,
            offset: v1126,
        } => {
            if let &Opcode::StackAddr = v1124 {
                let v1127 = C::gen_stack_addr(ctx, v1125, v1126);
                let v1128 = constructor_output_reg(ctx, v1127);
                // Rule at src/isa/riscv64/lower.isle line 1246.
                return Some(v1128);
            }
        }
        &InstructionData::Store {
            opcode: ref v1296,
            args: ref v1297,
            flags: v1298,
            offset: v1299,
        } => {
            match v1296 {
                &Opcode::Store => {
                    let v1300 = C::unpack_value_array_2(ctx, v1297);
                    let v1303 = C::value_type(ctx, v1300.1);
                    let v1304 = C::ty_addr64(ctx, v1303);
                    if let Some(v1305) = v1304 {
                        let v1314 = C::value_type(ctx, v1300.0);
                        let v1320 = C::ty_vec_fits_in_register(ctx, v1314);
                        if let Some(v1321) = v1320 {
                            let v1306 = C::put_in_reg(ctx, v1300.1);
                            let v1323 = C::gen_amode(ctx, v1306, v1299, I64);
                            let v1325 = constructor_put_in_vreg(ctx, v1300.0);
                            let v1322 = &constructor_element_width_from_type(ctx, v1321);
                            let v1324 = VecAMode::UnitStride { base: v1323 };
                            let v165 = &constructor_unmasked(ctx);
                            let v1326 = C::vstate_from_type(ctx, v1321);
                            let v1327 = constructor_vec_store(
                                ctx, v1322, &v1324, v1325, v1298, v165, v1326,
                            );
                            // Rule at src/isa/riscv64/lower.isle line 1497.
                            return Some(v1327);
                        }
                        if v1314 == I128 {
                            let v1306 = C::put_in_reg(ctx, v1300.1);
                            let v1318 = C::put_in_regs(ctx, v1300.0);
                            let v1319 = constructor_gen_store_128(ctx, v1306, v1299, v1298, v1318);
                            // Rule at src/isa/riscv64/lower.isle line 1493.
                            return Some(v1319);
                        }
                        let v1306 = C::put_in_reg(ctx, v1300.1);
                        let v1315 = &C::store_op(ctx, v1314);
                        let v1316 = C::put_in_reg(ctx, v1300.0);
                        let v1317 = constructor_gen_store(ctx, v1306, v1299, v1315, v1298, v1316);
                        // Rule at src/isa/riscv64/lower.isle line 1489.
                        return Some(v1317);
                    }
                }
                &Opcode::Istore8 => {
                    let v1300 = C::unpack_value_array_2(ctx, v1297);
                    let v1303 = C::value_type(ctx, v1300.1);
                    let v1304 = C::ty_addr64(ctx, v1303);
                    if let Some(v1305) = v1304 {
                        let v1306 = C::put_in_reg(ctx, v1300.1);
                        let v1308 = C::put_in_reg(ctx, v1300.0);
                        let v1309 =
                            constructor_gen_store(ctx, v1306, v1299, &StoreOP::Sb, v1298, v1308);
                        // Rule at src/isa/riscv64/lower.isle line 1475.
                        return Some(v1309);
                    }
                }
                &Opcode::Istore16 => {
                    let v1300 = C::unpack_value_array_2(ctx, v1297);
                    let v1303 = C::value_type(ctx, v1300.1);
                    let v1304 = C::ty_addr64(ctx, v1303);
                    if let Some(v1305) = v1304 {
                        let v1306 = C::put_in_reg(ctx, v1300.1);
                        let v1308 = C::put_in_reg(ctx, v1300.0);
                        let v1311 =
                            constructor_gen_store(ctx, v1306, v1299, &StoreOP::Sh, v1298, v1308);
                        // Rule at src/isa/riscv64/lower.isle line 1479.
                        return Some(v1311);
                    }
                }
                &Opcode::Istore32 => {
                    let v1300 = C::unpack_value_array_2(ctx, v1297);
                    let v1303 = C::value_type(ctx, v1300.1);
                    let v1304 = C::ty_addr64(ctx, v1303);
                    if let Some(v1305) = v1304 {
                        let v1306 = C::put_in_reg(ctx, v1300.1);
                        let v1308 = C::put_in_reg(ctx, v1300.0);
                        let v1313 =
                            constructor_gen_store(ctx, v1306, v1299, &StoreOP::Sw, v1298, v1308);
                        // Rule at src/isa/riscv64/lower.isle line 1484.
                        return Some(v1313);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1018,
            args: ref v1019,
            flags: v1020,
        } => {
            if let &Opcode::AtomicStore = v1018 {
                let v1021 = C::unpack_value_array_2(ctx, v1019);
                let v1024 = C::value_type(ctx, v1021.0);
                let v1025 = C::valid_atomic_transaction(ctx, v1024);
                if let Some(v1026) = v1025 {
                    let v1027 = C::put_in_reg(ctx, v1021.1);
                    let v1028 = C::put_in_reg(ctx, v1021.0);
                    let v1029 = constructor_gen_atomic_store(ctx, v1027, v1026, v1028);
                    // Rule at src/isa/riscv64/lower.isle line 1091.
                    return Some(v1029);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v954,
            args: ref v955,
        } => {
            match v954 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v956 = C::unpack_value_array_3(ctx, v955);
                            let v1145 = C::def_inst(ctx, v956.0);
                            if let Some(v1146) = v1145 {
                                let v1147 = &C::inst_data(ctx, v1146);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1148,
                                    args: ref v1149,
                                    cond: ref v1150,
                                } = v1147
                                {
                                    if let &Opcode::Icmp = v1148 {
                                        let v1151 = C::unpack_value_array_2(ctx, v1149);
                                        let v1154 = C::value_type(ctx, v1151.1);
                                        let v1155 = C::fits_in_64(ctx, v1154);
                                        if let Some(v1156) = v1155 {
                                            let v1157 = C::put_in_regs(ctx, v1151.0);
                                            let v1158 = &C::intcc_to_extend_op(ctx, v1150);
                                            let v1159 = constructor_normalize_cmp_value(
                                                ctx, v1156, v1157, v1158,
                                            );
                                            let v1160 =
                                                constructor_truthy_to_reg(ctx, v1156, v1159);
                                            let v1161 = C::put_in_regs(ctx, v1151.1);
                                            let v1162 = &C::intcc_to_extend_op(ctx, v1150);
                                            let v1163 = constructor_normalize_cmp_value(
                                                ctx, v1156, v1161, v1162,
                                            );
                                            let v1164 =
                                                constructor_truthy_to_reg(ctx, v1156, v1163);
                                            let v1165 = C::put_in_reg(ctx, v956.1);
                                            let v1166 = C::put_in_reg(ctx, v956.2);
                                            let v1167 = C::gen_select_reg(
                                                ctx, v1150, v1160, v1164, v1165, v1166,
                                            );
                                            let v1168 = constructor_output_reg(ctx, v1167);
                                            // Rule at src/isa/riscv64/lower.isle line 1266.
                                            return Some(v1168);
                                        }
                                    }
                                }
                            }
                        }
                        let v956 = C::unpack_value_array_3(ctx, v955);
                        let v1137 = C::put_in_regs(ctx, v956.0);
                        let v1136 = C::value_type(ctx, v956.0);
                        let v1138 =
                            constructor_normalize_cmp_value(ctx, v1136, v1137, &ExtendOp::Zero);
                        let v1139 = constructor_truthy_to_reg(ctx, v1136, v1138);
                        let v1141 = C::put_in_regs(ctx, v956.1);
                        let v1142 = C::put_in_regs(ctx, v956.2);
                        let v1140 = C::xreg_to_reg(ctx, v1139);
                        let v1143 = constructor_gen_select(ctx, v3, v1140, v1141, v1142);
                        let v1144 = C::output(ctx, v1143);
                        // Rule at src/isa/riscv64/lower.isle line 1263.
                        return Some(v1144);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v956 = C::unpack_value_array_3(ctx, v955);
                        let v1137 = C::put_in_regs(ctx, v956.0);
                        let v1417 = C::value_type(ctx, v956.1);
                        let v1136 = C::value_type(ctx, v956.0);
                        let v1418 = constructor_lower_bmask(ctx, v1417, v1136, v1137);
                        let v1419 = C::put_in_regs(ctx, v956.1);
                        let v1420 = constructor_gen_and(ctx, v1417, v1419, v1418);
                        let v1142 = C::put_in_regs(ctx, v956.2);
                        let v1421 = constructor_gen_bnot(ctx, v1417, v1418);
                        let v1422 = constructor_gen_and(ctx, v1417, v1142, v1421);
                        let v1423 = constructor_gen_or(ctx, v1417, v1420, v1422);
                        let v1424 = C::output(ctx, v1423);
                        // Rule at src/isa/riscv64/lower.isle line 1602.
                        return Some(v1424);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v956 = C::unpack_value_array_3(ctx, v955);
                            let v1178 = constructor_put_in_vreg(ctx, v956.0);
                            let v1179 = constructor_put_in_vreg(ctx, v956.1);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1180 = constructor_rv_vand_vv(ctx, v1178, v1179, v165, v166);
                            let v1181 = constructor_put_in_vreg(ctx, v956.0);
                            let v1182 = constructor_rv_vnot_v(ctx, v1181, v165, v166);
                            let v1183 = constructor_put_in_vreg(ctx, v956.2);
                            let v1184 = constructor_rv_vand_vv(ctx, v1182, v1183, v165, v166);
                            let v1185 = constructor_rv_vor_vv(ctx, v1180, v1184, v165, v166);
                            let v1186 = constructor_output_vreg(ctx, v1185);
                            // Rule at src/isa/riscv64/lower.isle line 1286.
                            return Some(v1186);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v956 = C::unpack_value_array_3(ctx, v955);
                            let v1169 = constructor_put_in_xreg(ctx, v956.0);
                            let v1170 = constructor_put_in_xreg(ctx, v956.1);
                            let v1171 = constructor_rv_and(ctx, v1169, v1170);
                            let v1172 = constructor_put_in_xreg(ctx, v956.0);
                            let v1173 = constructor_rv_not(ctx, v1172);
                            let v1174 = constructor_put_in_xreg(ctx, v956.2);
                            let v1175 = constructor_rv_and(ctx, v1173, v1174);
                            let v1176 = constructor_rv_or(ctx, v1171, v1175);
                            let v1177 = constructor_output_xreg(ctx, v1176);
                            // Rule at src/isa/riscv64/lower.isle line 1275.
                            return Some(v1177);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v956 = C::unpack_value_array_3(ctx, v955);
                        let v960 = constructor_put_in_freg(ctx, v956.0);
                        let v961 = constructor_put_in_freg(ctx, v956.1);
                        let v962 = constructor_put_in_freg(ctx, v956.2);
                        let v3 = C::value_type(ctx, v2);
                        let v963 = constructor_rv_fmadd(ctx, v3, v960, v961, v962);
                        let v964 = constructor_output_freg(ctx, v963);
                        // Rule at src/isa/riscv64/lower.isle line 1017.
                        return Some(v964);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1473,
            args: ref v1474,
            imm: v1475,
        } => {
            if let &Opcode::Insertlane = v1473 {
                let v1476 = C::unpack_value_array_2(ctx, v1474);
                let v1479 = C::value_type(ctx, v1476.0);
                let v1480 = C::ty_vec_fits_in_register(ctx, v1479);
                if let Some(v1481) = v1480 {
                    let v1499 = C::def_inst(ctx, v1476.1);
                    if let Some(v1500) = v1499 {
                        let v1501 = &C::inst_data(ctx, v1500);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v1502,
                            imm: v1503,
                        } = v1501
                        {
                            if let &Opcode::Iconst = v1502 {
                                let v1504 = C::u64_from_imm64(ctx, v1503);
                                let v1505 = C::imm5_from_u64(ctx, v1504);
                                if let Some(v1506) = v1505 {
                                    let v1485 = C::u8_from_uimm8(ctx, v1475);
                                    let v1486 = C::u8_as_u64(ctx, v1485);
                                    let v1487 = C::u64_shl(ctx, 0x1, v1486);
                                    let v1488 = constructor_gen_vec_mask(ctx, v1487);
                                    let v1489 = constructor_put_in_vreg(ctx, v1476.0);
                                    let v1491 = C::vstate_from_type(ctx, v1481);
                                    let v1507 =
                                        constructor_rv_vmerge_vim(ctx, v1489, v1506, v1488, v1491);
                                    let v1508 = constructor_output_vreg(ctx, v1507);
                                    // Rule at src/isa/riscv64/lower.isle line 1695.
                                    return Some(v1508);
                                }
                            }
                        }
                    }
                    let v1482 = C::value_type(ctx, v1476.1);
                    let v1494 = C::ty_scalar_float(ctx, v1482);
                    if let Some(v1495) = v1494 {
                        let v1485 = C::u8_from_uimm8(ctx, v1475);
                        let v1486 = C::u8_as_u64(ctx, v1485);
                        let v1487 = C::u64_shl(ctx, 0x1, v1486);
                        let v1488 = constructor_gen_vec_mask(ctx, v1487);
                        let v1489 = constructor_put_in_vreg(ctx, v1476.0);
                        let v1496 = constructor_put_in_freg(ctx, v1476.1);
                        let v1491 = C::vstate_from_type(ctx, v1481);
                        let v1497 = constructor_rv_vfmerge_vfm(ctx, v1489, v1496, v1488, v1491);
                        let v1498 = constructor_output_vreg(ctx, v1497);
                        // Rule at src/isa/riscv64/lower.isle line 1687.
                        return Some(v1498);
                    }
                    let v1483 = C::ty_int(ctx, v1482);
                    if let Some(v1484) = v1483 {
                        let v1485 = C::u8_from_uimm8(ctx, v1475);
                        let v1486 = C::u8_as_u64(ctx, v1485);
                        let v1487 = C::u64_shl(ctx, 0x1, v1486);
                        let v1488 = constructor_gen_vec_mask(ctx, v1487);
                        let v1489 = constructor_put_in_vreg(ctx, v1476.0);
                        let v1490 = constructor_put_in_xreg(ctx, v1476.1);
                        let v1491 = C::vstate_from_type(ctx, v1481);
                        let v1492 = constructor_rv_vmerge_vxm(ctx, v1489, v1490, v1488, v1491);
                        let v1493 = constructor_output_vreg(ctx, v1492);
                        // Rule at src/isa/riscv64/lower.isle line 1680.
                        return Some(v1493);
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1249,
            code: ref v1250,
        } => {
            match v1249 {
                &Opcode::Trap => {
                    let v1251 = constructor_udf(ctx, v1250);
                    // Rule at src/isa/riscv64/lower.isle line 1378.
                    return Some(v1251);
                }
                &Opcode::ResumableTrap => {
                    let v1251 = constructor_udf(ctx, v1250);
                    // Rule at src/isa/riscv64/lower.isle line 1383.
                    return Some(v1251);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v365,
            arg: v366,
        } => {
            match v365 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v643 = C::def_inst(ctx, v366);
                        if let Some(v644) = v643 {
                            let v648 = &C::inst_data(ctx, v644);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v1518,
                                imm: v1519,
                            } = v648
                            {
                                if let &Opcode::Iconst = v1518 {
                                    let v1520 = C::u64_from_imm64(ctx, v1519);
                                    let v1521 = C::imm5_from_u64(ctx, v1520);
                                    if let Some(v1522) = v1521 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1511 = C::vstate_from_type(ctx, v3);
                                        let v1523 = constructor_rv_vmv_vi(ctx, v1522, v1511);
                                        let v1524 = constructor_output_vreg(ctx, v1523);
                                        // Rule at src/isa/riscv64/lower.isle line 1709.
                                        return Some(v1524);
                                    }
                                }
                            }
                        }
                        let v636 = C::value_type(ctx, v366);
                        let v1514 = C::ty_int_ref_scalar_64_extract(ctx, v636);
                        if let Some(v1515) = v1514 {
                            let v610 = constructor_put_in_xreg(ctx, v366);
                            let v3 = C::value_type(ctx, v2);
                            let v1511 = C::vstate_from_type(ctx, v3);
                            let v1516 = constructor_rv_vmv_vx(ctx, v610, v1511);
                            let v1517 = constructor_output_vreg(ctx, v1516);
                            // Rule at src/isa/riscv64/lower.isle line 1706.
                            return Some(v1517);
                        }
                        let v1509 = C::ty_scalar_float(ctx, v636);
                        if let Some(v1510) = v1509 {
                            let v938 = constructor_put_in_freg(ctx, v366);
                            let v3 = C::value_type(ctx, v2);
                            let v1511 = C::vstate_from_type(ctx, v3);
                            let v1512 = constructor_rv_vfmv_vf(ctx, v938, v1511);
                            let v1513 = constructor_output_vreg(ctx, v1512);
                            // Rule at src/isa/riscv64/lower.isle line 1703.
                            return Some(v1513);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v636 = C::value_type(ctx, v366);
                    let v1553 = C::ty_vec_fits_in_register(ctx, v636);
                    if let Some(v1554) = v1553 {
                        let v370 = constructor_put_in_vreg(ctx, v366);
                        let v1560 = constructor_put_in_vreg(ctx, v366);
                        let v165 = &constructor_unmasked(ctx);
                        let v1558 = C::vstate_from_type(ctx, v1554);
                        let v1564 = constructor_rv_vredmaxu_vs(ctx, v370, v1560, v165, v1558);
                        let v1565 = constructor_rv_vmv_xs(ctx, v1564, v1558);
                        let v1566 = constructor_rv_snez(ctx, v1565);
                        let v1567 = constructor_output_xreg(ctx, v1566);
                        // Rule at src/isa/riscv64/lower.isle line 1790.
                        return Some(v1567);
                    }
                }
                &Opcode::VallTrue => {
                    let v636 = C::value_type(ctx, v366);
                    let v1553 = C::ty_vec_fits_in_register(ctx, v636);
                    if let Some(v1554) = v1553 {
                        let v1556 = C::imm5_from_i8(ctx, 0x1);
                        if let Some(v1557) = v1556 {
                            let v1558 = C::vstate_from_type(ctx, v1554);
                            let v1559 = constructor_rv_vmv_vi(ctx, v1557, v1558);
                            let v1560 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v1561 = constructor_rv_vredminu_vs(ctx, v1560, v1559, v165, v1558);
                            let v1562 = constructor_rv_vmv_xs(ctx, v1561, v1558);
                            let v1563 = constructor_output_xreg(ctx, v1562);
                            // Rule at src/isa/riscv64/lower.isle line 1776.
                            return Some(v1563);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v636 = C::value_type(ctx, v366);
                    let v1553 = C::ty_vec_fits_in_register(ctx, v636);
                    if let Some(v1554) = v1553 {
                        let v370 = constructor_put_in_vreg(ctx, v366);
                        let v1568 = C::zero_reg(ctx);
                        let v1569 = C::xreg_new(ctx, v1568);
                        let v165 = &constructor_unmasked(ctx);
                        let v1558 = C::vstate_from_type(ctx, v1554);
                        let v1570 = constructor_rv_vmslt_vx(ctx, v370, v1569, v165, v1558);
                        let v1572 = C::vstate_from_type(ctx, I64X2);
                        let v1573 = constructor_rv_vmv_xs(ctx, v1570, v1572);
                        let v1574 = C::ty_lane_mask(ctx, v1554);
                        let v1575 = constructor_gen_andi(ctx, v1573, v1574);
                        let v1576 = constructor_output_xreg(ctx, v1575);
                        // Rule at src/isa/riscv64/lower.isle line 1806.
                        return Some(v1576);
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v371 = constructor_rv_vneg_v(ctx, v370, v165, v166);
                            let v372 = constructor_output_vreg(ctx, v371);
                            // Rule at src/isa/riscv64/lower.isle line 381.
                            return Some(v372);
                        }
                        let v363 = C::ty_int(ctx, v3);
                        if let Some(v364) = v363 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v368 = constructor_neg(ctx, v364, v367);
                            let v369 = C::output(ctx, v368);
                            // Rule at src/isa/riscv64/lower.isle line 378.
                            return Some(v369);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v371 = constructor_rv_vneg_v(ctx, v370, v165, v166);
                            let v715 = constructor_put_in_vreg(ctx, v366);
                            let v1443 = constructor_rv_vmax_vv(ctx, v715, v371, v165, v166);
                            let v1444 = constructor_output_vreg(ctx, v1443);
                            // Rule at src/isa/riscv64/lower.isle line 1649.
                            return Some(v1444);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v610 = constructor_put_in_xreg(ctx, v366);
                            let v1439 = constructor_sext(ctx, v610, v35, I64);
                            let v1440 = constructor_rv_neg(ctx, v1439);
                            let v1441 = constructor_max(ctx, I64, v1439, v1440);
                            let v1442 = constructor_output_xreg(ctx, v1441);
                            // Rule at src/isa/riscv64/lower.isle line 1641.
                            return Some(v1442);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v595 = constructor_rv_vnot_v(ctx, v370, v165, v166);
                            let v596 = constructor_output_vreg(ctx, v595);
                            // Rule at src/isa/riscv64/lower.isle line 669.
                            return Some(v596);
                        }
                        let v591 = C::ty_scalar(ctx, v3);
                        if let Some(v592) = v591 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v593 = constructor_gen_bnot(ctx, v592, v367);
                            let v594 = C::output(ctx, v593);
                            // Rule at src/isa/riscv64/lower.isle line 666.
                            return Some(v594);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v600 = C::value_regs_get(ctx, v367, 0x0);
                            let v601 = constructor_lower_bit_reverse(ctx, v600, I64);
                            let v602 = C::xreg_new(ctx, v601);
                            let v603 = C::value_regs_get(ctx, v367, 0x1);
                            let v604 = constructor_lower_bit_reverse(ctx, v603, I64);
                            let v605 = C::xreg_new(ctx, v604);
                            let v606 = C::xreg_to_reg(ctx, v605);
                            let v607 = C::xreg_to_reg(ctx, v602);
                            let v608 = C::value_regs(ctx, v606, v607);
                            let v609 = C::output(ctx, v608);
                            // Rule at src/isa/riscv64/lower.isle line 676.
                            return Some(v609);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v473 = C::ty_int(ctx, v293);
                            if let Some(v474) = v473 {
                                let v597 = C::put_in_reg(ctx, v366);
                                let v598 = constructor_lower_bit_reverse(ctx, v597, v474);
                                let v599 = constructor_output_reg(ctx, v598);
                                // Rule at src/isa/riscv64/lower.isle line 673.
                                return Some(v599);
                            }
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v630 = constructor_lower_clz_i128(ctx, v367);
                            let v631 = C::output(ctx, v630);
                            // Rule at src/isa/riscv64/lower.isle line 703.
                            return Some(v631);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v610 = constructor_put_in_xreg(ctx, v366);
                            let v628 = constructor_lower_clz(ctx, v293, v610);
                            let v629 = constructor_output_xreg(ctx, v628);
                            // Rule at src/isa/riscv64/lower.isle line 700.
                            return Some(v629);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v634 = constructor_lower_cls_i128(ctx, v367);
                            let v635 = C::output(ctx, v634);
                            // Rule at src/isa/riscv64/lower.isle line 710.
                            return Some(v635);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v610 = constructor_put_in_xreg(ctx, v366);
                            let v632 = constructor_lower_cls(ctx, v293, v610);
                            let v633 = constructor_output_xreg(ctx, v632);
                            // Rule at src/isa/riscv64/lower.isle line 707.
                            return Some(v633);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v626 = constructor_lower_ctz_128(ctx, v367);
                            let v627 = C::output(ctx, v626);
                            // Rule at src/isa/riscv64/lower.isle line 696.
                            return Some(v627);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v597 = C::put_in_reg(ctx, v366);
                            let v624 = constructor_lower_ctz(ctx, v293, v597);
                            let v625 = constructor_output_reg(ctx, v624);
                            // Rule at src/isa/riscv64/lower.isle line 693.
                            return Some(v625);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v613 = C::value_regs_get(ctx, v367, 0x1);
                            let v614 = C::xreg_new(ctx, v613);
                            let v615 = constructor_gen_bswap(ctx, I64, v614);
                            let v617 = C::put_in_regs(ctx, v366);
                            let v618 = C::value_regs_get(ctx, v617, 0x0);
                            let v619 = C::xreg_new(ctx, v618);
                            let v620 = constructor_gen_bswap(ctx, I64, v619);
                            let v616 = C::xreg_to_reg(ctx, v615);
                            let v621 = C::xreg_to_reg(ctx, v620);
                            let v622 = C::value_regs(ctx, v616, v621);
                            let v623 = C::output(ctx, v622);
                            // Rule at src/isa/riscv64/lower.isle line 686.
                            return Some(v623);
                        }
                        let v292 = C::fits_in_64(ctx, v3);
                        if let Some(v293) = v292 {
                            let v473 = C::ty_int(ctx, v293);
                            if let Some(v474) = v473 {
                                let v610 = constructor_put_in_xreg(ctx, v366);
                                let v611 = constructor_gen_bswap(ctx, v474, v610);
                                let v612 = constructor_output_xreg(ctx, v611);
                                // Rule at src/isa/riscv64/lower.isle line 683.
                                return Some(v612);
                            }
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v701 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v702) = v701 {
                                let v704 = constructor_u64_to_uimm5(ctx, 0x2);
                                if let Some(v705) = v704 {
                                    let v707 = constructor_u64_to_uimm5(ctx, 0x4);
                                    if let Some(v708) = v707 {
                                        let v709 = C::lane_type(ctx, v11);
                                        let v711 = C::ty_mask(ctx, v709);
                                        let v712 = C::u64_and(ctx, 0x5555555555555555, v711);
                                        let v713 = C::imm(ctx, v709, v712);
                                        let v714 = C::xreg_new(ctx, v713);
                                        let v715 = constructor_put_in_vreg(ctx, v366);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v716 =
                                            constructor_rv_vsrl_vi(ctx, v715, v702, v165, v166);
                                        let v717 =
                                            constructor_rv_vand_vx(ctx, v716, v714, v165, v166);
                                        let v718 = constructor_put_in_vreg(ctx, v366);
                                        let v719 =
                                            constructor_rv_vsub_vv(ctx, v718, v717, v165, v166);
                                        let v721 = C::u64_and(ctx, 0x3333333333333333, v711);
                                        let v722 = C::imm(ctx, v709, v721);
                                        let v723 = C::xreg_new(ctx, v722);
                                        let v724 =
                                            constructor_rv_vsrl_vi(ctx, v719, v705, v165, v166);
                                        let v725 =
                                            constructor_rv_vand_vx(ctx, v724, v723, v165, v166);
                                        let v726 =
                                            constructor_rv_vand_vx(ctx, v719, v723, v165, v166);
                                        let v727 =
                                            constructor_rv_vadd_vv(ctx, v726, v725, v165, v166);
                                        let v729 = C::u64_and(ctx, 0xF0F0F0F0F0F0F0F, v711);
                                        let v730 = C::imm(ctx, v709, v729);
                                        let v731 = C::xreg_new(ctx, v730);
                                        let v732 =
                                            constructor_rv_vsrl_vi(ctx, v727, v708, v165, v166);
                                        let v733 =
                                            constructor_rv_vadd_vv(ctx, v727, v732, v165, v166);
                                        let v734 =
                                            constructor_rv_vand_vx(ctx, v733, v731, v165, v166);
                                        let v736 = C::u64_and(ctx, 0x101010101010101, v711);
                                        let v737 = C::imm(ctx, v709, v736);
                                        let v738 = C::xreg_new(ctx, v737);
                                        let v739 =
                                            constructor_rv_vmul_vx(ctx, v734, v738, v165, v166);
                                        let v740 = C::ty_bits(ctx, v709);
                                        let v741 = C::u8_as_u64(ctx, v740);
                                        let v743 = C::u64_sub(ctx, v741, 0x8);
                                        let v744 = C::imm(ctx, I64, v743);
                                        let v745 = C::xreg_new(ctx, v744);
                                        let v746 =
                                            constructor_rv_vsrl_vx(ctx, v739, v745, v165, v166);
                                        let v747 = constructor_output_vreg(ctx, v746);
                                        // Rule at src/isa/riscv64/lower.isle line 774.
                                        return Some(v747);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v367 = C::put_in_regs(ctx, v366);
                            let v698 = constructor_lower_popcnt_i128(ctx, v367);
                            let v699 = C::output(ctx, v698);
                            // Rule at src/isa/riscv64/lower.isle line 759.
                            return Some(v699);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v610 = constructor_put_in_xreg(ctx, v366);
                            let v696 = constructor_lower_popcnt(ctx, v610, v35);
                            let v697 = constructor_output_xreg(ctx, v696);
                            // Rule at src/isa/riscv64/lower.isle line 756.
                            return Some(v697);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v967 = constructor_rv_vfsqrt_v(ctx, v370, v165, v166);
                            let v968 = constructor_output_vreg(ctx, v967);
                            // Rule at src/isa/riscv64/lower.isle line 1025.
                            return Some(v968);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v938 = constructor_put_in_freg(ctx, v366);
                            let v965 = constructor_rv_fsqrt(ctx, v480, v938);
                            let v966 = constructor_output_freg(ctx, v965);
                            // Rule at src/isa/riscv64/lower.isle line 1022.
                            return Some(v966);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v945 = constructor_rv_vfneg_v(ctx, v370, v165, v166);
                            let v946 = constructor_output_vreg(ctx, v945);
                            // Rule at src/isa/riscv64/lower.isle line 1003.
                            return Some(v946);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v938 = constructor_put_in_freg(ctx, v366);
                            let v943 = constructor_rv_fneg(ctx, v480, v938);
                            let v944 = constructor_output_freg(ctx, v943);
                            // Rule at src/isa/riscv64/lower.isle line 1000.
                            return Some(v944);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v941 = constructor_rv_vfabs_v(ctx, v370, v165, v166);
                            let v942 = constructor_output_vreg(ctx, v941);
                            // Rule at src/isa/riscv64/lower.isle line 996.
                            return Some(v942);
                        }
                        let v479 = C::ty_scalar_float(ctx, v3);
                        if let Some(v480) = v479 {
                            let v938 = constructor_put_in_freg(ctx, v366);
                            let v939 = constructor_rv_fabs(ctx, v480, v938);
                            let v940 = constructor_output_freg(ctx, v939);
                            // Rule at src/isa/riscv64/lower.isle line 993.
                            return Some(v940);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v597 = C::put_in_reg(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1406 = constructor_gen_float_round(ctx, &FloatRoundOP::Ceil, v597, v3);
                        let v1407 = constructor_output_reg(ctx, v1406);
                        // Rule at src/isa/riscv64/lower.isle line 1576.
                        return Some(v1407);
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v597 = C::put_in_reg(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1409 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Floor, v597, v3);
                        let v1410 = constructor_output_reg(ctx, v1409);
                        // Rule at src/isa/riscv64/lower.isle line 1582.
                        return Some(v1410);
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v597 = C::put_in_reg(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1412 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Trunc, v597, v3);
                        let v1413 = constructor_output_reg(ctx, v1412);
                        // Rule at src/isa/riscv64/lower.isle line 1586.
                        return Some(v1413);
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v597 = C::put_in_reg(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1415 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Nearest, v597, v3);
                        let v1416 = constructor_output_reg(ctx, v1415);
                        // Rule at src/isa/riscv64/lower.isle line 1591.
                        return Some(v1416);
                    }
                }
                &Opcode::IsNull => {
                    let v610 = constructor_put_in_xreg(ctx, v366);
                    let v1129 = constructor_rv_seqz(ctx, v610);
                    let v1130 = constructor_output_xreg(ctx, v1129);
                    // Rule at src/isa/riscv64/lower.isle line 1252.
                    return Some(v1130);
                }
                &Opcode::IsInvalid => {
                    let v610 = constructor_put_in_xreg(ctx, v366);
                    let v1132 = C::imm12_const(ctx, 0x1);
                    let v1133 = constructor_rv_addi(ctx, v610, v1132);
                    let v1134 = constructor_rv_seqz(ctx, v1133);
                    let v1135 = constructor_output_xreg(ctx, v1134);
                    // Rule at src/isa/riscv64/lower.isle line 1258.
                    return Some(v1135);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v525 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v526) = v525 {
                                let v1677 = C::zero_reg(ctx);
                                let v1678 = C::xreg_new(ctx, v1677);
                                let v166 = C::vstate_from_type(ctx, v11);
                                let v1679 = constructor_rv_vmv_vx(ctx, v1678, v166);
                                let v1680 = constructor_gen_vec_mask(ctx, 0x1);
                                let v1681 = constructor_put_in_xreg(ctx, v366);
                                let v1682 =
                                    constructor_rv_vmerge_vxm(ctx, v1679, v1681, v1680, v166);
                                let v1683 = constructor_output_vreg(ctx, v1682);
                                // Rule at src/isa/riscv64/lower.isle line 1947.
                                return Some(v1683);
                            }
                            let v1684 = C::ty_vector_float(ctx, v11);
                            if let Some(v1685) = v1684 {
                                let v1677 = C::zero_reg(ctx);
                                let v1678 = C::xreg_new(ctx, v1677);
                                let v166 = C::vstate_from_type(ctx, v11);
                                let v1679 = constructor_rv_vmv_vx(ctx, v1678, v166);
                                let v1686 = constructor_put_in_freg(ctx, v366);
                                let v1687 = constructor_rv_vfmv_sf(ctx, v1686, v166);
                                let v1688 = constructor_gen_vec_mask(ctx, 0x1);
                                let v1689 =
                                    constructor_rv_vmerge_vvm(ctx, v1679, v1687, v1688, v166);
                                let v1690 = constructor_output_vreg(ctx, v1689);
                                // Rule at src/isa/riscv64/lower.isle line 1953.
                                return Some(v1690);
                            }
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v367 = C::put_in_regs(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v636 = C::value_type(ctx, v366);
                        let v1425 = constructor_lower_bmask(ctx, v3, v636, v367);
                        let v1426 = C::output(ctx, v1425);
                        // Rule at src/isa/riscv64/lower.isle line 1616.
                        return Some(v1426);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v367 = C::put_in_regs(ctx, v366);
                        let v600 = C::value_regs_get(ctx, v367, 0x0);
                        let v1052 = constructor_output_reg(ctx, v600);
                        // Rule at src/isa/riscv64/lower.isle line 1120.
                        return Some(v1052);
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v643 = C::def_inst(ctx, v366);
                            if let Some(v644) = v643 {
                                let v648 = &C::inst_data(ctx, v644);
                                if let &InstructionData::Unary {
                                    opcode: ref v1607,
                                    arg: v1608,
                                } = v648
                                {
                                    if let &Opcode::SwidenLow = v1607 {
                                        let v1620 = C::def_inst(ctx, v1608);
                                        if let Some(v1621) = v1620 {
                                            let v1622 = &C::inst_data(ctx, v1621);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1623,
                                                arg: v1624,
                                            } = v1622
                                            {
                                                if let &Opcode::SwidenLow = v1623 {
                                                    let v1630 = constructor_put_in_vreg(ctx, v1624);
                                                    let v165 = &constructor_unmasked(ctx);
                                                    let v166 = C::vstate_from_type(ctx, v11);
                                                    let v1645 = constructor_rv_vsext_vf8(
                                                        ctx, v1630, v165, v166,
                                                    );
                                                    let v1646 = constructor_output_vreg(ctx, v1645);
                                                    // Rule at src/isa/riscv64/lower.isle line 1878.
                                                    return Some(v1646);
                                                }
                                            }
                                        }
                                        let v1615 = constructor_put_in_vreg(ctx, v1608);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1643 =
                                            constructor_rv_vsext_vf4(ctx, v1615, v165, v166);
                                        let v1644 = constructor_output_vreg(ctx, v1643);
                                        // Rule at src/isa/riscv64/lower.isle line 1875.
                                        return Some(v1644);
                                    }
                                }
                            }
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1641 = constructor_rv_vsext_vf2(ctx, v370, v165, v166);
                            let v1642 = constructor_output_vreg(ctx, v1641);
                            // Rule at src/isa/riscv64/lower.isle line 1872.
                            return Some(v1642);
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v643 = C::def_inst(ctx, v366);
                            if let Some(v644) = v643 {
                                let v648 = &C::inst_data(ctx, v644);
                                if let &InstructionData::Unary {
                                    opcode: ref v1607,
                                    arg: v1608,
                                } = v648
                                {
                                    if let &Opcode::SwidenHigh = v1607 {
                                        let v1620 = C::def_inst(ctx, v1608);
                                        if let Some(v1621) = v1620 {
                                            let v1622 = &C::inst_data(ctx, v1621);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1623,
                                                arg: v1624,
                                            } = v1622
                                            {
                                                if let &Opcode::SwidenHigh = v1623 {
                                                    let v1625 = C::value_type(ctx, v1624);
                                                    let v1626 = C::ty_lane_count(ctx, v1625);
                                                    let v1611 = C::ty_lane_count(ctx, v11);
                                                    let v1627 = C::u64_sub(ctx, v1626, v1611);
                                                    let v1628 = C::uimm5_from_u64(ctx, v1627);
                                                    if let Some(v1629) = v1628 {
                                                        let v1630 =
                                                            constructor_put_in_vreg(ctx, v1624);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v1631 = C::vstate_from_type(ctx, v1625);
                                                        let v1632 = constructor_rv_vslidedown_vi(
                                                            ctx, v1630, v1629, v165, v1631,
                                                        );
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v1633 = constructor_rv_vsext_vf8(
                                                            ctx, v1632, v165, v166,
                                                        );
                                                        let v1634 =
                                                            constructor_output_vreg(ctx, v1633);
                                                        // Rule at src/isa/riscv64/lower.isle line 1852.
                                                        return Some(v1634);
                                                    }
                                                }
                                            }
                                        }
                                        let v1609 = C::value_type(ctx, v1608);
                                        let v1610 = C::ty_lane_count(ctx, v1609);
                                        let v1611 = C::ty_lane_count(ctx, v11);
                                        let v1612 = C::u64_sub(ctx, v1610, v1611);
                                        let v1613 = C::uimm5_from_u64(ctx, v1612);
                                        if let Some(v1614) = v1613 {
                                            let v1615 = constructor_put_in_vreg(ctx, v1608);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v1616 = C::vstate_from_type(ctx, v1609);
                                            let v1617 = constructor_rv_vslidedown_vi(
                                                ctx, v1615, v1614, v165, v1616,
                                            );
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v1618 =
                                                constructor_rv_vsext_vf4(ctx, v1617, v165, v166);
                                            let v1619 = constructor_output_vreg(ctx, v1618);
                                            // Rule at src/isa/riscv64/lower.isle line 1848.
                                            return Some(v1619);
                                        }
                                    }
                                }
                            }
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v636 = C::value_type(ctx, v366);
                            let v1604 = constructor_gen_slidedown_half(ctx, v636, v370);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1605 = constructor_rv_vsext_vf2(ctx, v1604, v165, v166);
                            let v1606 = constructor_output_vreg(ctx, v1605);
                            // Rule at src/isa/riscv64/lower.isle line 1845.
                            return Some(v1606);
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v643 = C::def_inst(ctx, v366);
                            if let Some(v644) = v643 {
                                let v648 = &C::inst_data(ctx, v644);
                                if let &InstructionData::Unary {
                                    opcode: ref v1607,
                                    arg: v1608,
                                } = v648
                                {
                                    if let &Opcode::UwidenLow = v1607 {
                                        let v1620 = C::def_inst(ctx, v1608);
                                        if let Some(v1621) = v1620 {
                                            let v1622 = &C::inst_data(ctx, v1621);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1623,
                                                arg: v1624,
                                            } = v1622
                                            {
                                                if let &Opcode::UwidenLow = v1623 {
                                                    let v1630 = constructor_put_in_vreg(ctx, v1624);
                                                    let v165 = &constructor_unmasked(ctx);
                                                    let v166 = C::vstate_from_type(ctx, v11);
                                                    let v1651 = constructor_rv_vzext_vf8(
                                                        ctx, v1630, v165, v166,
                                                    );
                                                    let v1652 = constructor_output_vreg(ctx, v1651);
                                                    // Rule at src/isa/riscv64/lower.isle line 1889.
                                                    return Some(v1652);
                                                }
                                            }
                                        }
                                        let v1615 = constructor_put_in_vreg(ctx, v1608);
                                        let v165 = &constructor_unmasked(ctx);
                                        let v166 = C::vstate_from_type(ctx, v11);
                                        let v1649 =
                                            constructor_rv_vzext_vf4(ctx, v1615, v165, v166);
                                        let v1650 = constructor_output_vreg(ctx, v1649);
                                        // Rule at src/isa/riscv64/lower.isle line 1886.
                                        return Some(v1650);
                                    }
                                }
                            }
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1647 = constructor_rv_vzext_vf2(ctx, v370, v165, v166);
                            let v1648 = constructor_output_vreg(ctx, v1647);
                            // Rule at src/isa/riscv64/lower.isle line 1883.
                            return Some(v1648);
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v643 = C::def_inst(ctx, v366);
                            if let Some(v644) = v643 {
                                let v648 = &C::inst_data(ctx, v644);
                                if let &InstructionData::Unary {
                                    opcode: ref v1607,
                                    arg: v1608,
                                } = v648
                                {
                                    if let &Opcode::UwidenHigh = v1607 {
                                        let v1620 = C::def_inst(ctx, v1608);
                                        if let Some(v1621) = v1620 {
                                            let v1622 = &C::inst_data(ctx, v1621);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1623,
                                                arg: v1624,
                                            } = v1622
                                            {
                                                if let &Opcode::UwidenHigh = v1623 {
                                                    let v1625 = C::value_type(ctx, v1624);
                                                    let v1626 = C::ty_lane_count(ctx, v1625);
                                                    let v1611 = C::ty_lane_count(ctx, v11);
                                                    let v1627 = C::u64_sub(ctx, v1626, v1611);
                                                    let v1628 = C::uimm5_from_u64(ctx, v1627);
                                                    if let Some(v1629) = v1628 {
                                                        let v1630 =
                                                            constructor_put_in_vreg(ctx, v1624);
                                                        let v165 = &constructor_unmasked(ctx);
                                                        let v1631 = C::vstate_from_type(ctx, v1625);
                                                        let v1632 = constructor_rv_vslidedown_vi(
                                                            ctx, v1630, v1629, v165, v1631,
                                                        );
                                                        let v166 = C::vstate_from_type(ctx, v11);
                                                        let v1639 = constructor_rv_vzext_vf8(
                                                            ctx, v1632, v165, v166,
                                                        );
                                                        let v1640 =
                                                            constructor_output_vreg(ctx, v1639);
                                                        // Rule at src/isa/riscv64/lower.isle line 1866.
                                                        return Some(v1640);
                                                    }
                                                }
                                            }
                                        }
                                        let v1609 = C::value_type(ctx, v1608);
                                        let v1610 = C::ty_lane_count(ctx, v1609);
                                        let v1611 = C::ty_lane_count(ctx, v11);
                                        let v1612 = C::u64_sub(ctx, v1610, v1611);
                                        let v1613 = C::uimm5_from_u64(ctx, v1612);
                                        if let Some(v1614) = v1613 {
                                            let v1615 = constructor_put_in_vreg(ctx, v1608);
                                            let v165 = &constructor_unmasked(ctx);
                                            let v1616 = C::vstate_from_type(ctx, v1609);
                                            let v1617 = constructor_rv_vslidedown_vi(
                                                ctx, v1615, v1614, v165, v1616,
                                            );
                                            let v166 = C::vstate_from_type(ctx, v11);
                                            let v1637 =
                                                constructor_rv_vzext_vf4(ctx, v1617, v165, v166);
                                            let v1638 = constructor_output_vreg(ctx, v1637);
                                            // Rule at src/isa/riscv64/lower.isle line 1862.
                                            return Some(v1638);
                                        }
                                    }
                                }
                            }
                            let v370 = constructor_put_in_vreg(ctx, v366);
                            let v636 = C::value_type(ctx, v366);
                            let v1604 = constructor_gen_slidedown_half(ctx, v636, v370);
                            let v165 = &constructor_unmasked(ctx);
                            let v166 = C::vstate_from_type(ctx, v11);
                            let v1635 = constructor_rv_vzext_vf2(ctx, v1604, v165, v166);
                            let v1636 = constructor_output_vreg(ctx, v1635);
                            // Rule at src/isa/riscv64/lower.isle line 1859.
                            return Some(v1636);
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v367 = C::put_in_regs(ctx, v366);
                        let v636 = C::value_type(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v638 = constructor_extend(ctx, v367, &ExtendOp::Zero, v636, v3);
                        let v639 = C::output(ctx, v638);
                        // Rule at src/isa/riscv64/lower.isle line 714.
                        return Some(v639);
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v643 = C::def_inst(ctx, v366);
                            if let Some(v644) = v643 {
                                let v645 = C::first_result(ctx, v644);
                                if let Some(v646) = v645 {
                                    let v647 = C::value_type(ctx, v646);
                                    if v647 == I32 {
                                        let v648 = &C::inst_data(ctx, v644);
                                        if let &InstructionData::Binary {
                                            opcode: ref v649,
                                            args: ref v650,
                                        } = v648
                                        {
                                            match v649 {
                                                &Opcode::Iadd => {
                                                    let v651 = C::unpack_value_array_2(ctx, v650);
                                                    let v679 = C::def_inst(ctx, v651.0);
                                                    if let Some(v680) = v679 {
                                                        let v681 = &C::inst_data(ctx, v680);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v682,
                                                            imm: v683,
                                                        } = v681
                                                        {
                                                            if let &Opcode::Iconst = v682 {
                                                                let v684 =
                                                                    C::u64_from_imm64(ctx, v683);
                                                                let v685 =
                                                                    C::imm12_from_u64(ctx, v684);
                                                                if let Some(v686) = v685 {
                                                                    let v687 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v651.1,
                                                                        );
                                                                    let v688 = constructor_rv_addiw(
                                                                        ctx, v687, v686,
                                                                    );
                                                                    let v689 =
                                                                        constructor_output_xreg(
                                                                            ctx, v688,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 742.
                                                                    return Some(v689);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v669 = C::def_inst(ctx, v651.1);
                                                    if let Some(v670) = v669 {
                                                        let v671 = &C::inst_data(ctx, v670);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v672,
                                                            imm: v673,
                                                        } = v671
                                                        {
                                                            if let &Opcode::Iconst = v672 {
                                                                let v674 =
                                                                    C::u64_from_imm64(ctx, v673);
                                                                let v675 =
                                                                    C::imm12_from_u64(ctx, v674);
                                                                if let Some(v676) = v675 {
                                                                    let v654 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v651.0,
                                                                        );
                                                                    let v677 = constructor_rv_addiw(
                                                                        ctx, v654, v676,
                                                                    );
                                                                    let v678 =
                                                                        constructor_output_xreg(
                                                                            ctx, v677,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 739.
                                                                    return Some(v678);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v654 = constructor_put_in_xreg(ctx, v651.0);
                                                    let v655 = constructor_put_in_xreg(ctx, v651.1);
                                                    let v656 = constructor_rv_addw(ctx, v654, v655);
                                                    let v657 = constructor_output_xreg(ctx, v656);
                                                    // Rule at src/isa/riscv64/lower.isle line 723.
                                                    return Some(v657);
                                                }
                                                &Opcode::Isub => {
                                                    let v651 = C::unpack_value_array_2(ctx, v650);
                                                    let v654 = constructor_put_in_xreg(ctx, v651.0);
                                                    let v655 = constructor_put_in_xreg(ctx, v651.1);
                                                    let v658 = constructor_rv_subw(ctx, v654, v655);
                                                    let v659 = constructor_output_xreg(ctx, v658);
                                                    // Rule at src/isa/riscv64/lower.isle line 726.
                                                    return Some(v659);
                                                }
                                                &Opcode::Ishl => {
                                                    let v651 = C::unpack_value_array_2(ctx, v650);
                                                    let v669 = C::def_inst(ctx, v651.1);
                                                    if let Some(v670) = v669 {
                                                        let v671 = &C::inst_data(ctx, v670);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v672,
                                                            imm: v673,
                                                        } = v671
                                                        {
                                                            if let &Opcode::Iconst = v672 {
                                                                let v674 =
                                                                    C::u64_from_imm64(ctx, v673);
                                                                let v675 =
                                                                    C::imm12_from_u64(ctx, v674);
                                                                if let Some(v676) = v675 {
                                                                    let v654 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v651.0,
                                                                        );
                                                                    let v690 = constructor_rv_slliw(
                                                                        ctx, v654, v676,
                                                                    );
                                                                    let v691 =
                                                                        constructor_output_xreg(
                                                                            ctx, v690,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 745.
                                                                    return Some(v691);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v654 = constructor_put_in_xreg(ctx, v651.0);
                                                    let v660 = C::put_in_regs(ctx, v651.1);
                                                    let v661 = C::value_regs_get(ctx, v660, 0x0);
                                                    let v662 = C::xreg_new(ctx, v661);
                                                    let v663 = constructor_rv_sllw(ctx, v654, v662);
                                                    let v664 = constructor_output_xreg(ctx, v663);
                                                    // Rule at src/isa/riscv64/lower.isle line 729.
                                                    return Some(v664);
                                                }
                                                &Opcode::Ushr => {
                                                    let v651 = C::unpack_value_array_2(ctx, v650);
                                                    let v669 = C::def_inst(ctx, v651.1);
                                                    if let Some(v670) = v669 {
                                                        let v671 = &C::inst_data(ctx, v670);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v672,
                                                            imm: v673,
                                                        } = v671
                                                        {
                                                            if let &Opcode::Iconst = v672 {
                                                                let v674 =
                                                                    C::u64_from_imm64(ctx, v673);
                                                                let v675 =
                                                                    C::imm12_from_u64(ctx, v674);
                                                                if let Some(v676) = v675 {
                                                                    let v654 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v651.0,
                                                                        );
                                                                    let v692 = constructor_rv_srliw(
                                                                        ctx, v654, v676,
                                                                    );
                                                                    let v693 =
                                                                        constructor_output_xreg(
                                                                            ctx, v692,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 748.
                                                                    return Some(v693);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v654 = constructor_put_in_xreg(ctx, v651.0);
                                                    let v660 = C::put_in_regs(ctx, v651.1);
                                                    let v661 = C::value_regs_get(ctx, v660, 0x0);
                                                    let v662 = C::xreg_new(ctx, v661);
                                                    let v665 = constructor_rv_srlw(ctx, v654, v662);
                                                    let v666 = constructor_output_xreg(ctx, v665);
                                                    // Rule at src/isa/riscv64/lower.isle line 732.
                                                    return Some(v666);
                                                }
                                                &Opcode::Sshr => {
                                                    let v651 = C::unpack_value_array_2(ctx, v650);
                                                    let v669 = C::def_inst(ctx, v651.1);
                                                    if let Some(v670) = v669 {
                                                        let v671 = &C::inst_data(ctx, v670);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v672,
                                                            imm: v673,
                                                        } = v671
                                                        {
                                                            if let &Opcode::Iconst = v672 {
                                                                let v674 =
                                                                    C::u64_from_imm64(ctx, v673);
                                                                let v675 =
                                                                    C::imm12_from_u64(ctx, v674);
                                                                if let Some(v676) = v675 {
                                                                    let v654 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v651.0,
                                                                        );
                                                                    let v694 = constructor_rv_sraiw(
                                                                        ctx, v654, v676,
                                                                    );
                                                                    let v695 =
                                                                        constructor_output_xreg(
                                                                            ctx, v694,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 751.
                                                                    return Some(v695);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    let v654 = constructor_put_in_xreg(ctx, v651.0);
                                                    let v660 = C::put_in_regs(ctx, v651.1);
                                                    let v661 = C::value_regs_get(ctx, v660, 0x0);
                                                    let v662 = C::xreg_new(ctx, v661);
                                                    let v667 = constructor_rv_sraw(ctx, v654, v662);
                                                    let v668 = constructor_output_xreg(ctx, v667);
                                                    // Rule at src/isa/riscv64/lower.isle line 735.
                                                    return Some(v668);
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v367 = C::put_in_regs(ctx, v366);
                        let v636 = C::value_type(ctx, v366);
                        let v641 = constructor_extend(ctx, v367, &ExtendOp::Signed, v636, v3);
                        let v642 = C::output(ctx, v641);
                        // Rule at src/isa/riscv64/lower.isle line 718.
                        return Some(v642);
                    }
                }
                &Opcode::Fpromote => {
                    let v938 = constructor_put_in_freg(ctx, v366);
                    let v1053 = constructor_rv_fcvtds(ctx, v938);
                    let v1054 = constructor_output_freg(ctx, v1053);
                    // Rule at src/isa/riscv64/lower.isle line 1124.
                    return Some(v1054);
                }
                &Opcode::Fdemote => {
                    let v938 = constructor_put_in_freg(ctx, v366);
                    let v1055 = constructor_rv_fcvtsd(ctx, v938);
                    let v1056 = constructor_output_freg(ctx, v1055);
                    // Rule at src/isa/riscv64/lower.isle line 1128.
                    return Some(v1056);
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v938 = constructor_put_in_freg(ctx, v366);
                        let v636 = C::value_type(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1374 = constructor_gen_fcvt_int(ctx, false, v938, false, v636, v3);
                        let v1375 = constructor_output_xreg(ctx, v1374);
                        // Rule at src/isa/riscv64/lower.isle line 1532.
                        return Some(v1375);
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v938 = constructor_put_in_freg(ctx, v366);
                        let v636 = C::value_type(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1376 = constructor_gen_fcvt_int(ctx, false, v938, true, v636, v3);
                        let v1377 = constructor_output_xreg(ctx, v1376);
                        // Rule at src/isa/riscv64/lower.isle line 1537.
                        return Some(v1377);
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v938 = constructor_put_in_freg(ctx, v366);
                        let v636 = C::value_type(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1380 = constructor_gen_fcvt_int(ctx, true, v938, false, v636, v3);
                        let v1381 = constructor_output_xreg(ctx, v1380);
                        // Rule at src/isa/riscv64/lower.isle line 1547.
                        return Some(v1381);
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v938 = constructor_put_in_freg(ctx, v366);
                        let v636 = C::value_type(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1378 = constructor_gen_fcvt_int(ctx, true, v938, true, v636, v3);
                        let v1379 = constructor_output_xreg(ctx, v1378);
                        // Rule at src/isa/riscv64/lower.isle line 1542.
                        return Some(v1379);
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v636 = C::value_type(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1388 = &C::int_convert_2_float_op(ctx, v636, false, v3);
                        let v1383 = constructor_put_in_xreg(ctx, v366);
                        let v1389 =
                            constructor_normalize_fcvt_from_int(ctx, v1383, v636, &ExtendOp::Zero);
                        let v1390 = C::xreg_to_reg(ctx, v1389);
                        let v1391 = constructor_fpu_rr(ctx, v1388, v3, v1390);
                        let v1392 = constructor_output_reg(ctx, v1391);
                        // Rule at src/isa/riscv64/lower.isle line 1559.
                        return Some(v1392);
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v636 = C::value_type(ctx, v366);
                        let v3 = C::value_type(ctx, v2);
                        let v1382 = &C::int_convert_2_float_op(ctx, v636, true, v3);
                        let v1383 = constructor_put_in_xreg(ctx, v366);
                        let v1384 = constructor_normalize_fcvt_from_int(
                            ctx,
                            v1383,
                            v636,
                            &ExtendOp::Signed,
                        );
                        let v1385 = C::xreg_to_reg(ctx, v1384);
                        let v1386 = constructor_fpu_rr(ctx, v1382, v3, v1385);
                        let v1387 = constructor_output_reg(ctx, v1386);
                        // Rule at src/isa/riscv64/lower.isle line 1552.
                        return Some(v1387);
                    }
                }
                &Opcode::Isplit => {
                    let v367 = C::put_in_regs(ctx, v366);
                    let v600 = C::value_regs_get(ctx, v367, 0x0);
                    let v1187 = C::xreg_new(ctx, v600);
                    let v1188 = C::put_in_regs(ctx, v366);
                    let v1189 = C::value_regs_get(ctx, v1188, 0x1);
                    let v1190 = C::xreg_new(ctx, v1189);
                    let v1191 = C::xreg_to_reg(ctx, v1187);
                    let v1192 = C::value_reg(ctx, v1191);
                    let v1193 = C::xreg_to_reg(ctx, v1190);
                    let v1194 = C::value_reg(ctx, v1193);
                    let v1195 = C::output_pair(ctx, v1192, v1194);
                    // Rule at src/isa/riscv64/lower.isle line 1294.
                    return Some(v1195);
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v12,
            constant_handle: v13,
        } => {
            if let &Opcode::Vconst = v12 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        let v14 = C::const_to_vconst(ctx, v13);
                        let v15 = constructor_gen_constant(ctx, v11, v14);
                        let v16 = constructor_output_vreg(ctx, v15);
                        // Rule at src/isa/riscv64/lower.isle line 14.
                        return Some(v16);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1393,
            global_value: v1394,
        } => {
            if let &Opcode::SymbolValue = v1393 {
                let v1395 = C::symbol_value_data(ctx, v1394);
                if let Some(v1396) = v1395 {
                    let v1400 = C::load_ext_name(ctx, v1396.0, v1396.2);
                    let v1401 = constructor_output_reg(ctx, v1400);
                    // Rule at src/isa/riscv64/lower.isle line 1566.
                    return Some(v1401);
                }
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v17,
            imm: v18,
        } => {
            if let &Opcode::F32const = v17 {
                let v19 = C::u32_from_ieee32(ctx, v18);
                let v21 = C::u32_as_u64(ctx, v19);
                let v22 = C::imm(ctx, F32, v21);
                let v23 = constructor_output_reg(ctx, v22);
                // Rule at src/isa/riscv64/lower.isle line 19.
                return Some(v23);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v28 = C::imm(ctx, F64, v26);
                let v29 = constructor_output_reg(ctx, v28);
                // Rule at src/isa/riscv64/lower.isle line 24.
                return Some(v29);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = C::imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/riscv64/lower.isle line 9.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 58.
            return Some(AluOPRRR::Sh1add);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 59.
            return Some(AluOPRRR::Sh2add);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 60.
            return Some(AluOPRRR::Sh3add);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 80.
            return Some(AluOPRRR::Sh1adduw);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 81.
            return Some(AluOPRRR::Sh2adduw);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 82.
            return Some(AluOPRRR::Sh3adduw);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src/isa/riscv64/lower.isle line 1067.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 0x3);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src/isa/riscv64/lower.isle line 1095.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    let v9 = C::xreg_new(ctx, v8);
    // Rule at src/isa/riscv64/lower.isle line 1098.
    return v9;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -0x4);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src/isa/riscv64/lower.isle line 1102.
        return v6;
    }
    // Rule at src/isa/riscv64/lower.isle line 1105.
    return arg0;
}

// Generated as internal constructor for term gen_load64_extend.
pub fn constructor_gen_load64_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ExtendOp,
    arg2: MemFlags,
    arg3: XReg,
    arg4: Offset32,
) -> VReg {
    match arg1 {
        &ExtendOp::Zero => {
            let v8 = C::xreg_to_reg(ctx, arg3);
            let v9 = C::gen_amode(ctx, v8, arg4, I64);
            let v6 = &constructor_element_width_from_type(ctx, I64);
            let v10 = VecAMode::UnitStride { base: v9 };
            let v11 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, I64);
            let v12 = constructor_vec_load(ctx, v6, &v10, arg2, v11, v7);
            let v13 = C::vreg_new(ctx, v12);
            let v14 = C::vstate_from_type(ctx, arg0);
            let v16 = constructor_rv_vzext_vf2(ctx, v13, v11, v14);
            // Rule at src/isa/riscv64/lower.isle line 1443.
            return v16;
        }
        &ExtendOp::Signed => {
            let v8 = C::xreg_to_reg(ctx, arg3);
            let v9 = C::gen_amode(ctx, v8, arg4, I64);
            let v6 = &constructor_element_width_from_type(ctx, I64);
            let v10 = VecAMode::UnitStride { base: v9 };
            let v11 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, I64);
            let v12 = constructor_vec_load(ctx, v6, &v10, arg2, v11, v7);
            let v13 = C::vreg_new(ctx, v12);
            let v14 = C::vstate_from_type(ctx, arg0);
            let v15 = constructor_rv_vsext_vf2(ctx, v13, v11, v14);
            // Rule at src/isa/riscv64/lower.isle line 1437.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_load64_extend", "src/isa/riscv64/lower.isle line 1435"
    )
}

// Generated as internal constructor for term gen_icmp.
pub fn constructor_gen_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Icmp {
        cc: arg0.clone(),
        rd: v5,
        a: arg1,
        b: arg2,
        ty: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xreg_to_xreg(ctx, v4);
    // Rule at src/isa/riscv64/lower.isle line 1504.
    return v8;
}
