// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/s390x/inst.isle
// - src/isa/s390x/lower.isle
// - /Users/igorilyk/shad-rust/target/debug/build/cranelift-codegen-ab7a9ab04739ec40/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn u32_to_offset32(&mut self, arg0: u32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn box_symbol_reloc(&mut self, arg0: &SymbolReloc) -> BoxSymbolReloc;
    fn mie2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn mie2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn lane_order(&mut self) -> LaneOrder;
    fn be_lane_idx(&mut self, arg0: Type, arg1: u8) -> u8;
    fn be_vec_const(&mut self, arg0: Type, arg1: u128) -> u128;
    fn writable_gpr(&mut self, arg0: u8) -> WritableReg;
    fn zero_reg(&mut self) -> Reg;
    fn gpr32_ty(&mut self, arg0: Type) -> Option<Type>;
    fn gpr64_ty(&mut self, arg0: Type) -> Option<Type>;
    fn vr128_ty(&mut self, arg0: Type) -> Option<Type>;
    fn uimm32shifted(&mut self, arg0: u32, arg1: u8) -> UImm32Shifted;
    fn uimm16shifted(&mut self, arg0: u16, arg1: u8) -> UImm16Shifted;
    fn i64_nonequal(&mut self, arg0: i64, arg1: i64) -> Option<i64>;
    fn u8_as_u16(&mut self, arg0: u8) -> u16;
    fn u64_truncate_to_u32(&mut self, arg0: u64) -> u32;
    fn u64_as_i16(&mut self, arg0: u64) -> i16;
    fn u64_pair_split(&mut self, arg0: u128) -> (u64, u64);
    fn u64_pair_concat(&mut self, arg0: u64, arg1: u64) -> u128;
    fn u32_pair_split(&mut self, arg0: u64) -> (u32, u32);
    fn u32_pair_concat(&mut self, arg0: u32, arg1: u32) -> u64;
    fn u16_pair_split(&mut self, arg0: u32) -> (u16, u16);
    fn u16_pair_concat(&mut self, arg0: u16, arg1: u16) -> u32;
    fn u8_pair_split(&mut self, arg0: u16) -> (u8, u8);
    fn u8_pair_concat(&mut self, arg0: u8, arg1: u8) -> u16;
    fn lane_byte_mask(&mut self, arg0: Type, arg1: u8) -> u16;
    fn shuffle_mask_from_u128(&mut self, arg0: u128) -> (u128, u16);
    fn u64_nonzero_hipart(&mut self, arg0: u64) -> Option<u64>;
    fn u64_nonzero_lopart(&mut self, arg0: u64) -> Option<u64>;
    fn i32_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn i16_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i16_from_u32(&mut self, arg0: u32) -> Option<i16>;
    fn uimm32shifted_from_u64(&mut self, arg0: u64) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_u64(&mut self, arg0: u64) -> Option<UImm16Shifted>;
    fn u64_from_value(&mut self, arg0: Value) -> Option<u64>;
    fn u32_from_value(&mut self, arg0: Value) -> Option<u32>;
    fn u8_from_value(&mut self, arg0: Value) -> Option<u8>;
    fn u64_from_signed_value(&mut self, arg0: Value) -> Option<u64>;
    fn u64_from_inverted_value(&mut self, arg0: Value) -> Option<u64>;
    fn i64_from_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_value(&mut self, arg0: Value) -> Option<i16>;
    fn i16_from_swapped_value(&mut self, arg0: Value) -> Option<i16>;
    fn i64_from_negated_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_negated_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_negated_value(&mut self, arg0: Value) -> Option<i16>;
    fn uimm16shifted_from_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn len_minus_one(&mut self, arg0: u64) -> Option<u8>;
    fn mask_amt_imm(&mut self, arg0: Type, arg1: i64) -> u8;
    fn mask_as_cond(&mut self, arg0: u8) -> Cond;
    fn intcc_as_cond(&mut self, arg0: &IntCC) -> Cond;
    fn floatcc_as_cond(&mut self, arg0: &FloatCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn signed(&mut self, arg0: &IntCC) -> Option<()>;
    fn unsigned(&mut self, arg0: &IntCC) -> Option<()>;
    fn vec_length_minus1(&mut self, arg0: &VecMachLabel) -> u32;
    fn vec_element(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn zero_offset(&mut self) -> Offset32;
    fn i64_from_offset(&mut self, arg0: Offset32) -> i64;
    fn littleendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn bigendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn memflags_trusted(&mut self) -> MemFlags;
    fn memarg_flags(&mut self, arg0: &MemArg) -> MemFlags;
    fn memarg_reg_plus_reg(&mut self, arg0: Reg, arg1: Reg, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_reg_plus_off(&mut self, arg0: Reg, arg1: i64, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_symbol(&mut self, arg0: ExternalName, arg1: i32, arg2: MemFlags) -> MemArg;
    fn memarg_got(&mut self) -> MemArg;
    fn memarg_stack_off(&mut self, arg0: i64, arg1: i64) -> MemArg;
    fn memarg_initial_sp_offset(&mut self, arg0: i64) -> MemArg;
    fn memarg_symbol_offset_sum(&mut self, arg0: i64, arg1: i64) -> Option<i32>;
    fn memarg_pair_from_memarg(&mut self, arg0: &MemArg) -> Option<MemArgPair>;
    fn memarg_pair_from_reg(&mut self, arg0: Reg, arg1: MemFlags) -> MemArgPair;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn writable_regpair(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableRegPair;
    fn writable_regpair_hi(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn writable_regpair_lo(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn regpair(&mut self, arg0: Reg, arg1: Reg) -> RegPair;
    fn regpair_hi(&mut self, arg0: RegPair) -> Reg;
    fn regpair_lo(&mut self, arg0: RegPair) -> Reg;
    fn inst_builder_new(&mut self) -> VecMInstBuilder;
    fn inst_builder_push(&mut self, arg0: &VecMInstBuilder, arg1: &MInst) -> Unit;
    fn inst_builder_finish(&mut self, arg0: &VecMInstBuilder) -> VecMInst;
    fn real_reg(&mut self, arg0: WritableReg) -> Option<WritableReg>;
    fn same_reg(&mut self, arg0: WritableReg, arg1: Reg) -> Option<Reg>;
    fn preg_stack(&mut self) -> PReg;
    fn preg_gpr_0(&mut self) -> PReg;
    fn args_builder_new(&mut self) -> CallArgListBuilder;
    fn args_builder_push(&mut self, arg0: &CallArgListBuilder, arg1: Reg, arg2: RealReg) -> Unit;
    fn args_builder_finish(&mut self, arg0: &CallArgListBuilder) -> CallArgList;
    fn defs_init(&mut self, arg0: Sig) -> CallRetList;
    fn defs_lookup(&mut self, arg0: &CallRetList, arg1: RealReg) -> Reg;
    fn abi_sig(&mut self, arg0: SigRef) -> Sig;
    fn abi_first_ret(&mut self, arg0: SigRef, arg1: Sig) -> usize;
    fn abi_call_info(
        &mut self,
        arg0: Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallInfo;
    fn abi_call_ind_info(
        &mut self,
        arg0: Sig,
        arg1: Reg,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallIndInfo;
    fn abi_accumulate_outgoing_args_size(&mut self, arg0: Sig) -> Unit;
    fn abi_lane_order(&mut self, arg0: Sig) -> LaneOrder;
    fn lib_call_info_memcpy(&mut self, arg0: Reg, arg1: Reg, arg2: Reg) -> LibCallInfo;
    fn lib_call_info_tls_get_offset(
        &mut self,
        arg0: WritableReg,
        arg1: Reg,
        arg2: Reg,
        arg3: &SymbolReloc,
    ) -> LibCallInfo;
    fn lib_call_info(&mut self, arg0: &LibCallInfo) -> BoxCallInfo;
    fn lib_accumulate_outgoing_args_size(&mut self, arg0: &LibCallInfo) -> Unit;
    fn fcvt_to_uint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb32(&mut self) -> u64;
    fn fcvt_to_uint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb64(&mut self) -> u64;
    fn fcvt_to_sint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb64(&mut self, arg0: u8) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 309.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 351.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 370.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 378.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/s390x/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop2,
    AluRRR {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        imm: i16,
    },
    AluRR {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        rm: Reg,
    },
    AluRX {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
    },
    AluRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
    },
    AluRSImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i32,
    },
    AluRUImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: u32,
    },
    AluRUImm16Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    AluRUImm32Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    SMulWide {
        rd: WritableRegPair,
        rn: Reg,
        rm: Reg,
    },
    UMulWide {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod32 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod64 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    UDivMod32 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    UDivMod64 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    Flogr {
        rd: WritableRegPair,
        rn: Reg,
    },
    ShiftRR {
        shift_op: ShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    RxSBG {
        op: RxSBGOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    RxSBGTest {
        op: RxSBGOp,
        rd: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    UnaryRR {
        op: UnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    CmpRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
    },
    CmpRX {
        op: CmpOp,
        rn: Reg,
        mem: MemArg,
    },
    CmpRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
    },
    CmpRSImm32 {
        op: CmpOp,
        rn: Reg,
        imm: i32,
    },
    CmpRUImm32 {
        op: CmpOp,
        rn: Reg,
        imm: u32,
    },
    CmpTrapRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRUImm16 {
        op: CmpOp,
        rn: Reg,
        imm: u16,
        cond: Cond,
        trap_code: TrapCode,
    },
    AtomicRmw {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas32 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas64 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    Fence,
    Load32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev16 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Store8 {
        rd: Reg,
        mem: MemArg,
    },
    Store16 {
        rd: Reg,
        mem: MemArg,
    },
    Store32 {
        rd: Reg,
        mem: MemArg,
    },
    Store64 {
        rd: Reg,
        mem: MemArg,
    },
    StoreImm8 {
        imm: u8,
        mem: MemArg,
    },
    StoreImm16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm32SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm64SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreRev16 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev32 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev64 {
        rd: Reg,
        mem: MemArg,
    },
    Mvc {
        dst: MemArgPair,
        src: MemArgPair,
        len_minus_one: u8,
    },
    LoadMultiple64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: MemArg,
    },
    StoreMultiple64 {
        rt: Reg,
        rt2: Reg,
        mem: MemArg,
    },
    Mov32 {
        rd: WritableReg,
        rm: Reg,
    },
    Mov64 {
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Mov32Imm {
        rd: WritableReg,
        imm: u32,
    },
    Mov32SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm32 {
        rd: WritableReg,
        imm: i32,
    },
    Mov64UImm16Shifted {
        rd: WritableReg,
        imm: UImm16Shifted,
    },
    Mov64UImm32Shifted {
        rd: WritableReg,
        imm: UImm32Shifted,
    },
    Insert64UImm16Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    Insert64UImm32Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    LoadAR {
        rd: WritableReg,
        ar: u8,
    },
    InsertAR {
        rd: WritableReg,
        ri: Reg,
        ar: u8,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov32SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    CMov64SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuCMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuCMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuRR {
        fpu_op: FPUOp1,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuRound {
        op: FpuRoundOp,
        mode: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCmp32 {
        rn: Reg,
        rm: Reg,
    },
    FpuCmp64 {
        rn: Reg,
        rm: Reg,
    },
    LoadFpuConst32 {
        rd: WritableReg,
        const_data: u32,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    VecRRR {
        op: VecBinaryOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecRR {
        op: VecUnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecShiftRR {
        shift_op: VecShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    VecSelect {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermute {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermuteDWImm {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        idx1: u8,
        idx2: u8,
    },
    VecIntCmp {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecIntCmpS {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmp {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmpS {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128SCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128UCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoad {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadRev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecStore {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreRev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecLoadReplicate {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadReplicateRev {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecMov {
        rd: WritableReg,
        rn: Reg,
    },
    VecCMov {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    MovToVec128 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoadConst {
        rd: WritableReg,
        const_data: u128,
    },
    VecLoadConstReplicate {
        size: u32,
        rd: WritableReg,
        const_data: u64,
    },
    VecImmByteMask {
        rd: WritableReg,
        mask: u16,
    },
    VecImmBitMask {
        size: u32,
        rd: WritableReg,
        start_bit: u8,
        end_bit: u8,
    },
    VecImmReplicate {
        size: u32,
        rd: WritableReg,
        imm: i16,
    },
    VecLoadLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRev {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRevUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLane {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLaneRev {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecInsertLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneUndef {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecExtractLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneImm {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
        lane_imm: u8,
    },
    VecReplicateLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
    },
    Call {
        link: WritableReg,
        info: BoxCallInfo,
    },
    CallInd {
        link: WritableReg,
        info: BoxCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        link: Reg,
        rets: VecRetPair,
        stack_bytes_to_pop: u32,
    },
    Jump {
        dest: MachLabel,
    },
    CondBr {
        taken: MachLabel,
        not_taken: MachLabel,
        cond: Cond,
    },
    TrapIf {
        cond: Cond,
        trap_code: TrapCode,
    },
    OneWayCondBr {
        target: MachLabel,
        cond: Cond,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Debugtrap,
    Trap {
        trap_code: TrapCode,
    },
    JTSequence {
        ridx: Reg,
        targets: VecMachLabel,
    },
    LoadSymbolReloc {
        rd: WritableReg,
        symbol_reloc: BoxSymbolReloc,
    },
    LoadAddr {
        rd: WritableReg,
        mem: MemArg,
    },
    Loop {
        body: VecMInst,
        cond: Cond,
    },
    CondBreak {
        cond: Cond,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    DummyUse {
        reg: Reg,
    },
    Unwind {
        inst: UnwindInst,
    },
}

/// Internal type SymbolReloc: defined at src/isa/s390x/inst.isle line 1018.
#[derive(Clone, Debug)]
pub enum SymbolReloc {
    Absolute { name: ExternalName, offset: i64 },
    TlsGd { name: ExternalName },
}

/// Internal type ALUOp: defined at src/isa/s390x/inst.isle line 1035.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add32,
    Add32Ext16,
    Add64,
    Add64Ext16,
    Add64Ext32,
    AddLogical32,
    AddLogical64,
    AddLogical64Ext32,
    Sub32,
    Sub32Ext16,
    Sub64,
    Sub64Ext16,
    Sub64Ext32,
    SubLogical32,
    SubLogical64,
    SubLogical64Ext32,
    Mul32,
    Mul32Ext16,
    Mul64,
    Mul64Ext16,
    Mul64Ext32,
    And32,
    And64,
    Orr32,
    Orr64,
    Xor32,
    Xor64,
    NotAnd32,
    NotAnd64,
    NotOrr32,
    NotOrr64,
    NotXor32,
    NotXor64,
    AndNot32,
    AndNot64,
    OrrNot32,
    OrrNot64,
}

/// Internal type UnaryOp: defined at src/isa/s390x/inst.isle line 1082.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryOp {
    Abs32,
    Abs64,
    Abs64Ext32,
    Neg32,
    Neg64,
    Neg64Ext32,
    PopcntByte,
    PopcntReg,
    BSwap32,
    BSwap64,
}

/// Internal type ShiftOp: defined at src/isa/s390x/inst.isle line 1097.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ShiftOp {
    RotL32,
    RotL64,
    LShL32,
    LShL64,
    LShR32,
    LShR64,
    AShR32,
    AShR64,
}

/// Internal type RxSBGOp: defined at src/isa/s390x/inst.isle line 1110.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RxSBGOp {
    Insert,
    And,
    Or,
    Xor,
}

/// Internal type CmpOp: defined at src/isa/s390x/inst.isle line 1119.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CmpOp {
    CmpS32,
    CmpS32Ext16,
    CmpS64,
    CmpS64Ext16,
    CmpS64Ext32,
    CmpL32,
    CmpL32Ext16,
    CmpL64,
    CmpL64Ext16,
    CmpL64Ext32,
}

/// Internal type VecBinaryOp: defined at src/isa/s390x/inst.isle line 1134.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecBinaryOp {
    Add8x16,
    Add16x8,
    Add32x4,
    Add64x2,
    Add128,
    Sub8x16,
    Sub16x8,
    Sub32x4,
    Sub64x2,
    Sub128,
    Mul8x16,
    Mul16x8,
    Mul32x4,
    UMulHi8x16,
    UMulHi16x8,
    UMulHi32x4,
    SMulHi8x16,
    SMulHi16x8,
    SMulHi32x4,
    UMulEven8x16,
    UMulEven16x8,
    UMulEven32x4,
    SMulEven8x16,
    SMulEven16x8,
    SMulEven32x4,
    UMulOdd8x16,
    UMulOdd16x8,
    UMulOdd32x4,
    SMulOdd8x16,
    SMulOdd16x8,
    SMulOdd32x4,
    UMax8x16,
    UMax16x8,
    UMax32x4,
    UMax64x2,
    SMax8x16,
    SMax16x8,
    SMax32x4,
    SMax64x2,
    UMin8x16,
    UMin16x8,
    UMin32x4,
    UMin64x2,
    SMin8x16,
    SMin16x8,
    SMin32x4,
    SMin64x2,
    UAvg8x16,
    UAvg16x8,
    UAvg32x4,
    UAvg64x2,
    SAvg8x16,
    SAvg16x8,
    SAvg32x4,
    SAvg64x2,
    And128,
    Orr128,
    Xor128,
    NotAnd128,
    NotOrr128,
    NotXor128,
    AndNot128,
    OrrNot128,
    BitPermute128,
    LShLByByte128,
    LShRByByte128,
    AShRByByte128,
    LShLByBit128,
    LShRByBit128,
    AShRByBit128,
    Pack16x8,
    Pack32x4,
    Pack64x2,
    PackUSat16x8,
    PackUSat32x4,
    PackUSat64x2,
    PackSSat16x8,
    PackSSat32x4,
    PackSSat64x2,
    MergeLow8x16,
    MergeLow16x8,
    MergeLow32x4,
    MergeLow64x2,
    MergeHigh8x16,
    MergeHigh16x8,
    MergeHigh32x4,
    MergeHigh64x2,
}

/// Internal type VecUnaryOp: defined at src/isa/s390x/inst.isle line 1236.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecUnaryOp {
    Abs8x16,
    Abs16x8,
    Abs32x4,
    Abs64x2,
    Neg8x16,
    Neg16x8,
    Neg32x4,
    Neg64x2,
    Popcnt8x16,
    Popcnt16x8,
    Popcnt32x4,
    Popcnt64x2,
    Clz8x16,
    Clz16x8,
    Clz32x4,
    Clz64x2,
    Ctz8x16,
    Ctz16x8,
    Ctz32x4,
    Ctz64x2,
    UnpackULow8x16,
    UnpackULow16x8,
    UnpackULow32x4,
    UnpackUHigh8x16,
    UnpackUHigh16x8,
    UnpackUHigh32x4,
    UnpackSLow8x16,
    UnpackSLow16x8,
    UnpackSLow32x4,
    UnpackSHigh8x16,
    UnpackSHigh16x8,
    UnpackSHigh32x4,
}

/// Internal type VecShiftOp: defined at src/isa/s390x/inst.isle line 1277.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftOp {
    RotL8x16,
    RotL16x8,
    RotL32x4,
    RotL64x2,
    LShL8x16,
    LShL16x8,
    LShL32x4,
    LShL64x2,
    LShR8x16,
    LShR16x8,
    LShR32x4,
    LShR64x2,
    AShR8x16,
    AShR16x8,
    AShR32x4,
    AShR64x2,
}

/// Internal type VecIntCmpOp: defined at src/isa/s390x/inst.isle line 1298.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecIntCmpOp {
    CmpEq8x16,
    CmpEq16x8,
    CmpEq32x4,
    CmpEq64x2,
    SCmpHi8x16,
    SCmpHi16x8,
    SCmpHi32x4,
    SCmpHi64x2,
    UCmpHi8x16,
    UCmpHi16x8,
    UCmpHi32x4,
    UCmpHi64x2,
}

/// Internal type VecFloatCmpOp: defined at src/isa/s390x/inst.isle line 1315.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecFloatCmpOp {
    CmpEq32x4,
    CmpEq64x2,
    CmpHi32x4,
    CmpHi64x2,
    CmpHiEq32x4,
    CmpHiEq64x2,
}

/// Internal type FPUOp1: defined at src/isa/s390x/inst.isle line 1326.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs32,
    Abs64,
    Abs32x4,
    Abs64x2,
    Neg32,
    Neg64,
    Neg32x4,
    Neg64x2,
    NegAbs32,
    NegAbs64,
    NegAbs32x4,
    NegAbs64x2,
    Sqrt32,
    Sqrt64,
    Sqrt32x4,
    Sqrt64x2,
    Cvt32To64,
    Cvt32x4To64x2,
}

/// Internal type FPUOp2: defined at src/isa/s390x/inst.isle line 1349.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add32,
    Add64,
    Add32x4,
    Add64x2,
    Sub32,
    Sub64,
    Sub32x4,
    Sub64x2,
    Mul32,
    Mul64,
    Mul32x4,
    Mul64x2,
    Div32,
    Div64,
    Div32x4,
    Div64x2,
    Max32,
    Max64,
    Max32x4,
    Max64x2,
    Min32,
    Min64,
    Min32x4,
    Min64x2,
    MaxPseudo32,
    MaxPseudo64,
    MaxPseudo32x4,
    MaxPseudo64x2,
    MinPseudo32,
    MinPseudo64,
    MinPseudo32x4,
    MinPseudo64x2,
}

/// Internal type FPUOp3: defined at src/isa/s390x/inst.isle line 1386.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd32,
    MAdd64,
    MAdd32x4,
    MAdd64x2,
    MSub32,
    MSub64,
    MSub32x4,
    MSub64x2,
}

/// Internal type FpuRoundOp: defined at src/isa/s390x/inst.isle line 1399.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundOp {
    Cvt64To32,
    Cvt64x2To32x4,
    Round32,
    Round64,
    Round32x4,
    Round64x2,
    ToSInt32,
    ToSInt64,
    ToUInt32,
    ToUInt64,
    ToSInt32x4,
    ToSInt64x2,
    ToUInt32x4,
    ToUInt64x2,
    FromSInt32,
    FromSInt64,
    FromUInt32,
    FromUInt64,
    FromSInt32x4,
    FromSInt64x2,
    FromUInt32x4,
    FromUInt64x2,
}

/// Internal type FpuRoundMode: defined at src/isa/s390x/inst.isle line 1426.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Current,
    ToNearest,
    ShorterPrecision,
    ToNearestTiesToEven,
    ToZero,
    ToPosInfinity,
    ToNegInfinity,
}

/// Internal type LaneOrder: defined at src/isa/s390x/inst.isle line 1467.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LaneOrder {
    LittleEndian,
    BigEndian,
}

/// Internal type ProducesBool: defined at src/isa/s390x/inst.isle line 3347.
#[derive(Clone, Debug)]
pub enum ProducesBool {
    ProducesBool { producer: ProducesFlags, cond: Cond },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 65.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 69.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 138.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 149.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 160.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 159"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 165.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 164"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 170.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 169"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 319.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 321.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 324.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 318"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 332.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 337.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 339.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 341.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 336"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 366.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 365"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 396.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 397.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 395"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 402.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 404.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 401"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 417.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 411.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 410"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 448.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 454.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 466.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 482.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 489.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 502.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 442.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 434.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 432"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 520.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 527.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 538.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 543.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 548.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 553.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 558.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 536"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 567.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 575.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 584.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 592.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 601.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 661.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 669.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 678.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 686.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 695.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 614.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 622.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 631.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 639.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 648.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 708.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 716.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 725.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 733.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 742.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 754.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 762.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 779.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 771.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 787.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 796.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 564"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 996.
    return v2;
}

// Generated as internal constructor for term lane_order_equal.
pub fn constructor_lane_order_equal<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: &LaneOrder,
) -> bool {
    match arg0 {
        &LaneOrder::LittleEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1481.
                    return true;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1482.
                    return false;
                }
                _ => {}
            }
        }
        &LaneOrder::BigEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1483.
                    return false;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1484.
                    return true;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_equal", "src/isa/s390x/inst.isle line 1480"
    )
}

// Generated as internal constructor for term lane_order_from_memflags.
pub fn constructor_lane_order_from_memflags<C: Context>(ctx: &mut C, arg0: MemFlags) -> LaneOrder {
    let v4 = C::bigendian(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 1489.
        return LaneOrder::BigEndian;
    }
    let v1 = C::littleendian(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1488.
        return LaneOrder::LittleEndian;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_from_memflags", "src/isa/s390x/inst.isle line 1487"
    )
}

// Generated as internal constructor for term i64_nonzero.
pub fn constructor_i64_nonzero<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, 0x0);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 1541.
        return Some(arg0);
    }
    None
}

// Generated as internal constructor for term i64_not_neg1.
pub fn constructor_i64_not_neg1<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, -0x1);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 1546.
        return Some(arg0);
    }
    None
}

// Generated as internal constructor for term imm8x16.
pub fn constructor_imm8x16<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u8,
    arg2: u8,
    arg3: u8,
    arg4: u8,
    arg5: u8,
    arg6: u8,
    arg7: u8,
    arg8: u8,
    arg9: u8,
    arg10: u8,
    arg11: u8,
    arg12: u8,
    arg13: u8,
    arg14: u8,
    arg15: u8,
) -> u128 {
    let v16 = C::u8_pair_concat(ctx, arg0, arg1);
    let v17 = C::u8_pair_concat(ctx, arg2, arg3);
    let v18 = C::u16_pair_concat(ctx, v16, v17);
    let v19 = C::u8_pair_concat(ctx, arg4, arg5);
    let v20 = C::u8_pair_concat(ctx, arg6, arg7);
    let v21 = C::u16_pair_concat(ctx, v19, v20);
    let v22 = C::u32_pair_concat(ctx, v18, v21);
    let v23 = C::u8_pair_concat(ctx, arg8, arg9);
    let v24 = C::u8_pair_concat(ctx, arg10, arg11);
    let v25 = C::u16_pair_concat(ctx, v23, v24);
    let v26 = C::u8_pair_concat(ctx, arg12, arg13);
    let v27 = C::u8_pair_concat(ctx, arg14, arg15);
    let v28 = C::u16_pair_concat(ctx, v26, v27);
    let v29 = C::u32_pair_concat(ctx, v25, v28);
    let v30 = C::u64_pair_concat(ctx, v22, v29);
    // Rule at src/isa/s390x/inst.isle line 1585.
    return v30;
}

// Generated as internal constructor for term mask_amt_reg.
pub fn constructor_mask_amt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        // Rule at src/isa/s390x/inst.isle line 1697.
        return arg1;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::mask_amt_imm(ctx, v2, -0x1);
        let v6 = C::u8_as_u16(ctx, v5);
        let v8 = C::uimm16shifted(ctx, v6, 0x0);
        let v9 = constructor_and_uimm16shifted(ctx, v2, arg1, v8);
        // Rule at src/isa/s390x/inst.isle line 1694.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mask_amt_reg", "src/isa/s390x/inst.isle line 1693"
    )
}

// Generated as internal constructor for term amt_reg.
pub fn constructor_amt_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 1701.
        return v4;
    }
    let v5 = C::vr128_ty(ctx, v1);
    if let Some(v6) = v5 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_vec_extract_lane(ctx, I64X2, v4, 0x1, v9);
        // Rule at src/isa/s390x/inst.isle line 1702.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_reg", "src/isa/s390x/inst.isle line 1700"
    )
}

// Generated as internal constructor for term amt_vr.
pub fn constructor_amt_vr<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v14 = C::u64_from_value(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = constructor_vec_imm_splat(ctx, I8X16, v15);
        // Rule at src/isa/s390x/inst.isle line 1712.
        return v16;
    }
    let v1 = C::value_type(ctx, arg0);
    let v10 = C::vr128_ty(ctx, v1);
    if let Some(v11) = v10 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v13 = constructor_vec_replicate_lane(ctx, I8X16, v5, 0xF);
        // Rule at src/isa/s390x/inst.isle line 1710.
        return v13;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v7 = C::zero_reg(ctx);
        let v8 = constructor_vec_insert_lane_undef(ctx, I8X16, v5, 0x0, v7);
        let v9 = constructor_vec_replicate_lane(ctx, I8X16, v8, 0x0);
        // Rule at src/isa/s390x/inst.isle line 1707.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_vr", "src/isa/s390x/inst.isle line 1706"
    )
}

// Generated as internal constructor for term memarg_symbol_offset.
pub fn constructor_memarg_symbol_offset<C: Context>(ctx: &mut C, arg0: i64) -> Option<i32> {
    let v2 = C::memarg_symbol_offset_sum(ctx, arg0, 0x0);
    let v3 = v2?;
    // Rule at src/isa/s390x/inst.isle line 1804.
    return Some(v3);
}

// Generated as internal constructor for term lower_address.
pub fn constructor_lower_address<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> MemArg {
    let v10 = C::def_inst(ctx, arg1);
    if let Some(v11) = v10 {
        let v17 = &C::inst_data(ctx, v11);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v18,
                args: ref v19,
            } => {
                if let &Opcode::Iadd = v18 {
                    let v6 = C::i64_from_offset(ctx, arg2);
                    if v6 == 0x0 {
                        let v12 = C::first_result(ctx, v11);
                        if let Some(v13) = v12 {
                            let v14 = C::value_type(ctx, v13);
                            let v15 = C::ty_addr64(ctx, v14);
                            if let Some(v16) = v15 {
                                let v20 = C::unpack_value_array_2(ctx, v19);
                                let v23 = C::put_in_reg(ctx, v20.0);
                                let v24 = C::put_in_reg(ctx, v20.1);
                                let v25 = &C::memarg_reg_plus_reg(ctx, v23, v24, 0x0, arg0);
                                // Rule at src/isa/s390x/inst.isle line 1814.
                                return v25.clone();
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryGlobalValue {
                opcode: ref v26,
                global_value: v27,
            } => {
                if let &Opcode::SymbolValue = v26 {
                    let v28 = C::symbol_value_data(ctx, v27);
                    if let Some(v29) = v28 {
                        let v33 = C::reloc_distance_near(ctx, v29.1);
                        if let Some(v34) = v33 {
                            let v6 = C::i64_from_offset(ctx, arg2);
                            let v35 = C::memarg_symbol_offset_sum(ctx, v6, v29.2);
                            if let Some(v36) = v35 {
                                let v37 = &C::memarg_symbol(ctx, v29.0, v36, arg0);
                                // Rule at src/isa/s390x/inst.isle line 1817.
                                return v37.clone();
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::ty_addr64(ctx, v2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg1);
        let v6 = C::i64_from_offset(ctx, arg2);
        let v9 = &C::memarg_reg_plus_off(ctx, v7, v6, 0x0, arg0);
        // Rule at src/isa/s390x/inst.isle line 1811.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_address", "src/isa/s390x/inst.isle line 1809"
    )
}

// Generated as internal constructor for term lower_address_bias.
pub fn constructor_lower_address_bias<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
    arg3: u8,
) -> MemArg {
    let v4 = C::i64_from_offset(ctx, arg2);
    if v4 == 0x0 {
        let v8 = C::def_inst(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::first_result(ctx, v9);
            if let Some(v11) = v10 {
                let v12 = C::value_type(ctx, v11);
                if v12 == I64 {
                    let v13 = &C::inst_data(ctx, v9);
                    if let &InstructionData::Binary {
                        opcode: ref v14,
                        args: ref v15,
                    } = v13
                    {
                        if let &Opcode::Iadd = v14 {
                            let v16 = C::unpack_value_array_2(ctx, v15);
                            let v19 = C::put_in_reg(ctx, v16.0);
                            let v20 = C::put_in_reg(ctx, v16.1);
                            let v21 = &C::memarg_reg_plus_reg(ctx, v19, v20, arg3, arg0);
                            // Rule at src/isa/s390x/inst.isle line 1831.
                            return v21.clone();
                        }
                    }
                }
            }
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &C::memarg_reg_plus_off(ctx, v6, v4, arg3, arg0);
        // Rule at src/isa/s390x/inst.isle line 1828.
        return v7.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_address_bias", "src/isa/s390x/inst.isle line 1826"
    )
}

// Generated as internal constructor for term load_sym.
pub fn constructor_load_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    // Rule at src/isa/s390x/inst.isle line 1838.
                                    return Some(arg0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term uload16_sym.
pub fn constructor_uload16_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    // Rule at src/isa/s390x/inst.isle line 1846.
                                    return Some(arg0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term memarg_pair.
pub fn constructor_memarg_pair<C: Context>(ctx: &mut C, arg0: &MemArg) -> MemArgPair {
    let v1 = &C::memarg_pair_from_memarg(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1860.
        return v2.clone();
    }
    let v3 = constructor_load_addr(ctx, arg0);
    let v4 = C::memarg_flags(ctx, arg0);
    let v5 = &C::memarg_pair_from_reg(ctx, v3, v4);
    // Rule at src/isa/s390x/inst.isle line 1861.
    return v5.clone();
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg1, arg2);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 1876.
    return v6;
}

// Generated as internal constructor for term sink_load.
pub fn constructor_sink_load<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1942.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load", "src/isa/s390x/inst.isle line 1941"
    )
}

// Generated as internal constructor for term sink_sload16.
pub fn constructor_sink_sload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1949.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload16", "src/isa/s390x/inst.isle line 1948"
    )
}

// Generated as internal constructor for term sink_sload32.
pub fn constructor_sink_sload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1956.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload32", "src/isa/s390x/inst.isle line 1955"
    )
}

// Generated as internal constructor for term sink_uload16.
pub fn constructor_sink_uload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1963.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload16", "src/isa/s390x/inst.isle line 1962"
    )
}

// Generated as internal constructor for term sink_uload32.
pub fn constructor_sink_uload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1970.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload32", "src/isa/s390x/inst.isle line 1969"
    )
}

// Generated as internal constructor for term temp_writable_regpair.
pub fn constructor_temp_writable_regpair<C: Context>(ctx: &mut C) -> WritableRegPair {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::writable_regpair(ctx, v1, v2);
    // Rule at src/isa/s390x/inst.isle line 1986.
    return v3;
}

// Generated as internal constructor for term writable_regpair_to_regpair.
pub fn constructor_writable_regpair_to_regpair<C: Context>(
    ctx: &mut C,
    arg0: WritableRegPair,
) -> RegPair {
    let v1 = C::writable_regpair_hi(ctx, arg0);
    let v3 = C::writable_regpair_lo(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    let v4 = C::writable_reg_to_reg(ctx, v3);
    let v5 = C::regpair(ctx, v2, v4);
    // Rule at src/isa/s390x/inst.isle line 2002.
    return v5;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2022.
    return v7;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2029.
    return v7;
}

// Generated as internal constructor for term alu_rrsimm16.
pub fn constructor_alu_rrsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2036.
    return v7;
}

// Generated as internal constructor for term alu_rr.
pub fn constructor_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2043.
    return v7;
}

// Generated as internal constructor for term alu_rr_with_flags_paired.
pub fn constructor_alu_rr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2050.
    return v7;
}

// Generated as internal constructor for term alu_rx.
pub fn constructor_alu_rx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2057.
    return v7;
}

// Generated as internal constructor for term alu_rx_with_flags_paired.
pub fn constructor_alu_rx_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2064.
    return v7;
}

// Generated as internal constructor for term alu_rsimm16.
pub fn constructor_alu_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2071.
    return v7;
}

// Generated as internal constructor for term alu_rsimm32.
pub fn constructor_alu_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2078.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32.
pub fn constructor_alu_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2085.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32_with_flags_paired.
pub fn constructor_alu_ruimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2092.
    return v7;
}

// Generated as internal constructor for term alu_ruimm16shifted.
pub fn constructor_alu_ruimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm16Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm16Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2099.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32shifted.
pub fn constructor_alu_ruimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm32Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2106.
    return v7;
}

// Generated as internal constructor for term smul_wide.
pub fn constructor_smul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SMulWide {
        rd: v2,
        rn: arg0,
        rm: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2113.
    return v5;
}

// Generated as internal constructor for term umul_wide.
pub fn constructor_umul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UMulWide {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2120.
    return v5;
}

// Generated as internal constructor for term sdivmod32.
pub fn constructor_sdivmod32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2127.
    return v5;
}

// Generated as internal constructor for term sdivmod64.
pub fn constructor_sdivmod64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2134.
    return v5;
}

// Generated as internal constructor for term udivmod32.
pub fn constructor_udivmod32<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2141.
    return v5;
}

// Generated as internal constructor for term udivmod64.
pub fn constructor_udivmod64<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2148.
    return v5;
}

// Generated as internal constructor for term shift_rr.
pub fn constructor_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::ShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2155.
    return v8;
}

// Generated as internal constructor for term rxsbg_test.
pub fn constructor_rxsbg_test<C: Context>(
    ctx: &mut C,
    arg0: &RxSBGOp,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: u8,
    arg5: i8,
) -> ProducesFlags {
    let v6 = MInst::RxSBGTest {
        op: arg0.clone(),
        rd: arg1,
        rn: arg2,
        start_bit: arg3,
        end_bit: arg4,
        rotate_amt: arg5,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/s390x/inst.isle line 2162.
    return v7;
}

// Generated as internal constructor for term unary_rr.
pub fn constructor_unary_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &UnaryOp, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::UnaryRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2168.
    return v6;
}

// Generated as internal constructor for term cmp_rr.
pub fn constructor_cmp_rr<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::CmpRR {
        op: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2175.
    return v4;
}

// Generated as internal constructor for term cmp_rx.
pub fn constructor_cmp_rx<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = MInst::CmpRX {
        op: arg0.clone(),
        rn: arg1,
        mem: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2180.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm16.
pub fn constructor_cmp_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm16 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2185.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm32.
pub fn constructor_cmp_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2190.
    return v4;
}

// Generated as internal constructor for term cmp_ruimm32.
pub fn constructor_cmp_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = MInst::CmpRUImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2195.
    return v4;
}

// Generated as internal constructor for term atomic_rmw_impl.
pub fn constructor_atomic_rmw_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AtomicRmw {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2200.
    return v7;
}

// Generated as internal constructor for term atomic_cas32.
pub fn constructor_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I32);
    let v5 = MInst::AtomicCas32 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2207.
    return v7;
}

// Generated as internal constructor for term atomic_cas64.
pub fn constructor_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AtomicCas64 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2214.
    return v7;
}

// Generated as internal constructor for term fence_impl.
pub fn constructor_fence_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/s390x/inst.isle line 2221.
    return v1;
}

// Generated as internal constructor for term load32.
pub fn constructor_load32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::Load32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2226.
    return v5;
}

// Generated as internal constructor for term load64.
pub fn constructor_load64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::Load64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2233.
    return v5;
}

// Generated as internal constructor for term loadrev16.
pub fn constructor_loadrev16<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev16 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2240.
    return v5;
}

// Generated as internal constructor for term loadrev32.
pub fn constructor_loadrev32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2247.
    return v5;
}

// Generated as internal constructor for term loadrev64.
pub fn constructor_loadrev64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadRev64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2254.
    return v5;
}

// Generated as internal constructor for term store8.
pub fn constructor_store8<C: Context>(ctx: &mut C, arg0: Reg, arg1: &MemArg) -> SideEffectNoResult {
    let v2 = MInst::Store8 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2261.
    return v3;
}

// Generated as internal constructor for term store16.
pub fn constructor_store16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2266.
    return v3;
}

// Generated as internal constructor for term store32.
pub fn constructor_store32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2271.
    return v3;
}

// Generated as internal constructor for term store64.
pub fn constructor_store64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2276.
    return v3;
}

// Generated as internal constructor for term store8_imm.
pub fn constructor_store8_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm8 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2281.
    return v3;
}

// Generated as internal constructor for term store16_imm.
pub fn constructor_store16_imm<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2286.
    return v3;
}

// Generated as internal constructor for term store32_simm16.
pub fn constructor_store32_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm32SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2291.
    return v3;
}

// Generated as internal constructor for term store64_simm16.
pub fn constructor_store64_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm64SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2296.
    return v3;
}

// Generated as internal constructor for term storerev16.
pub fn constructor_storerev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2301.
    return v3;
}

// Generated as internal constructor for term storerev32.
pub fn constructor_storerev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2306.
    return v3;
}

// Generated as internal constructor for term storerev64.
pub fn constructor_storerev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2311.
    return v3;
}

// Generated as internal constructor for term mvc.
pub fn constructor_mvc<C: Context>(
    ctx: &mut C,
    arg0: &MemArgPair,
    arg1: &MemArgPair,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = MInst::Mvc {
        dst: arg0.clone(),
        src: arg1.clone(),
        len_minus_one: arg2,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2316.
    return v4;
}

// Generated as internal constructor for term load_ar.
pub fn constructor_load_ar<C: Context>(ctx: &mut C, arg0: u8) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAR { rd: v2, ar: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2321.
    return v5;
}

// Generated as internal constructor for term insert_ar.
pub fn constructor_insert_ar<C: Context>(ctx: &mut C, arg0: Reg, arg1: u8) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::InsertAR {
        rd: v3,
        ri: arg0,
        ar: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2328.
    return v6;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &FPUOp1, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::FpuRR {
        fpu_op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2335.
    return v6;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp2,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRRR {
        fpu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2342.
    return v7;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp3,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::FpuRRRR {
        fpu_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2349.
    return v8;
}

// Generated as internal constructor for term fpu_cmp32.
pub fn constructor_fpu_cmp32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp32 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2356.
    return v3;
}

// Generated as internal constructor for term fpu_cmp64.
pub fn constructor_fpu_cmp64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp64 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2361.
    return v3;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundOp,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRound {
        op: arg1.clone(),
        mode: arg2.clone(),
        rd: v4,
        rn: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2366.
    return v7;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecBinaryOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecRRR {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2373.
    return v7;
}

// Generated as internal constructor for term vec_rr.
pub fn constructor_vec_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecUnaryOp,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::VecRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2380.
    return v6;
}

// Generated as internal constructor for term vec_shift_rr.
pub fn constructor_vec_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2387.
    return v8;
}

// Generated as internal constructor for term vec_select.
pub fn constructor_vec_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecSelect {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2394.
    return v7;
}

// Generated as internal constructor for term vec_permute.
pub fn constructor_vec_permute<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecPermute {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2401.
    return v7;
}

// Generated as internal constructor for term vec_permute_dw_imm.
pub fn constructor_vec_permute_dw_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecPermuteDWImm {
        rd: v5,
        rn: arg1,
        rm: arg3,
        idx1: arg2,
        idx2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2408.
    return v8;
}

// Generated as internal constructor for term vec_int_cmp.
pub fn constructor_vec_int_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2415.
    return v7;
}

// Generated as internal constructor for term vec_int_cmps.
pub fn constructor_vec_int_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2422.
    return v6;
}

// Generated as internal constructor for term vec_float_cmp.
pub fn constructor_vec_float_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2428.
    return v7;
}

// Generated as internal constructor for term vec_float_cmps.
pub fn constructor_vec_float_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2435.
    return v6;
}

// Generated as internal constructor for term vec_int128_scmphi.
pub fn constructor_vec_int128_scmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128SCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2441.
    return v8.clone();
}

// Generated as internal constructor for term vec_int128_ucmphi.
pub fn constructor_vec_int128_ucmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128UCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2448.
    return v8.clone();
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoad {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2455.
    return v5;
}

// Generated as internal constructor for term vec_loadrev.
pub fn constructor_vec_loadrev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadRev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2462.
    return v5;
}

// Generated as internal constructor for term vec_load_byte16rev.
pub fn constructor_vec_load_byte16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2469.
    return v5;
}

// Generated as internal constructor for term vec_load_byte32rev.
pub fn constructor_vec_load_byte32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2476.
    return v5;
}

// Generated as internal constructor for term vec_load_byte64rev.
pub fn constructor_vec_load_byte64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2483.
    return v5;
}

// Generated as internal constructor for term vec_load_elt16rev.
pub fn constructor_vec_load_elt16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2490.
    return v5;
}

// Generated as internal constructor for term vec_load_elt32rev.
pub fn constructor_vec_load_elt32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2497.
    return v5;
}

// Generated as internal constructor for term vec_load_elt64rev.
pub fn constructor_vec_load_elt64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2504.
    return v5;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStore {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2511.
    return v3;
}

// Generated as internal constructor for term vec_storerev.
pub fn constructor_vec_storerev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreRev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2516.
    return v3;
}

// Generated as internal constructor for term vec_store_byte16rev.
pub fn constructor_vec_store_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2521.
    return v3;
}

// Generated as internal constructor for term vec_store_byte32rev.
pub fn constructor_vec_store_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2526.
    return v3;
}

// Generated as internal constructor for term vec_store_byte64rev.
pub fn constructor_vec_store_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2531.
    return v3;
}

// Generated as internal constructor for term vec_store_elt16rev.
pub fn constructor_vec_store_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2536.
    return v3;
}

// Generated as internal constructor for term vec_store_elt32rev.
pub fn constructor_vec_store_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2541.
    return v3;
}

// Generated as internal constructor for term vec_store_elt64rev.
pub fn constructor_vec_store_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2546.
    return v3;
}

// Generated as internal constructor for term vec_load_replicate.
pub fn constructor_vec_load_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicate {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2551.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate", "src/isa/s390x/inst.isle line 2550"
    )
}

// Generated as internal constructor for term vec_load_replicate_rev.
pub fn constructor_vec_load_replicate_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicateRev {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2558.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_rev", "src/isa/s390x/inst.isle line 2557"
    )
}

// Generated as internal constructor for term mov_to_vec128.
pub fn constructor_mov_to_vec128<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::MovToVec128 {
        rd: v3,
        rn: arg1,
        rm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2565.
    return v6;
}

// Generated as internal constructor for term vec_load_const.
pub fn constructor_vec_load_const<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecLoadConst {
            rd: v4,
            const_data: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2572.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const", "src/isa/s390x/inst.isle line 2571"
    )
}

// Generated as internal constructor for term vec_load_const_replicate.
pub fn constructor_vec_load_const_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, arg0);
        let v7 = MInst::VecLoadConstReplicate {
            size: v2.0,
            rd: v6,
            const_data: arg1,
        };
        let v8 = C::emit(ctx, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2579.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const_replicate", "src/isa/s390x/inst.isle line 2578"
    )
}

// Generated as internal constructor for term vec_imm_byte_mask.
pub fn constructor_vec_imm_byte_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: u16) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecImmByteMask { rd: v4, mask: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2586.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_byte_mask", "src/isa/s390x/inst.isle line 2585"
    )
}

// Generated as internal constructor for term vec_imm_bit_mask.
pub fn constructor_vec_imm_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v9 = C::temp_writable_reg(ctx, v2);
            let v10 = MInst::VecImmBitMask {
                size: v4.0,
                rd: v9,
                start_bit: arg1,
                end_bit: arg2,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src/isa/s390x/inst.isle line 2593.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_bit_mask", "src/isa/s390x/inst.isle line 2592"
    )
}

// Generated as internal constructor for term vec_imm_replicate.
pub fn constructor_vec_imm_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: i16) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecImmReplicate {
                size: v4.0,
                rd: v8,
                imm: arg1,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2600.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_replicate", "src/isa/s390x/inst.isle line 2599"
    )
}

// Generated as internal constructor for term vec_load_lane.
pub fn constructor_vec_load_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLane {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2607.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane", "src/isa/s390x/inst.isle line 2606"
    )
}

// Generated as internal constructor for term vec_load_lane_undef.
pub fn constructor_vec_load_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2614.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_undef", "src/isa/s390x/inst.isle line 2613"
    )
}

// Generated as internal constructor for term vec_load_lane_rev.
pub fn constructor_vec_load_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLaneRev {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2621.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev", "src/isa/s390x/inst.isle line 2620"
    )
}

// Generated as internal constructor for term vec_load_lane_rev_undef.
pub fn constructor_vec_load_lane_rev_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneRevUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2628.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev_undef", "src/isa/s390x/inst.isle line 2627"
    )
}

// Generated as internal constructor for term vec_store_lane.
pub fn constructor_vec_store_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLane {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2635.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane", "src/isa/s390x/inst.isle line 2634"
    )
}

// Generated as internal constructor for term vec_store_lane_rev.
pub fn constructor_vec_store_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLaneRev {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2640.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_rev", "src/isa/s390x/inst.isle line 2639"
    )
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, arg0);
        let v10 = MInst::VecInsertLane {
            size: v2.0,
            rd: v9,
            ri: arg1,
            rn: arg2,
            lane_imm: arg3,
            lane_reg: arg4,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2645.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src/isa/s390x/inst.isle line 2644"
    )
}

// Generated as internal constructor for term vec_insert_lane_undef.
pub fn constructor_vec_insert_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneUndef {
            size: v2.0,
            rd: v8,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2652.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_undef", "src/isa/s390x/inst.isle line 2651"
    )
}

// Generated as internal constructor for term vec_extract_lane.
pub fn constructor_vec_extract_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, I64);
        let v10 = MInst::VecExtractLane {
            size: v2.0,
            rd: v9,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2659.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_extract_lane", "src/isa/s390x/inst.isle line 2658"
    )
}

// Generated as internal constructor for term vec_insert_lane_imm.
pub fn constructor_vec_insert_lane_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneImm {
            size: v2.0,
            rd: v8,
            ri: arg1,
            imm: arg2,
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2666.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_imm", "src/isa/s390x/inst.isle line 2665"
    )
}

// Generated as internal constructor for term vec_replicate_lane.
pub fn constructor_vec_replicate_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecReplicateLane {
            size: v2.0,
            rd: v7,
            rn: arg1,
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2673.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_replicate_lane", "src/isa/s390x/inst.isle line 2672"
    )
}

// Generated as internal constructor for term load_symbol_reloc.
pub fn constructor_load_symbol_reloc<C: Context>(ctx: &mut C, arg0: &SymbolReloc) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_symbol_reloc(ctx, arg0);
    let v4 = MInst::LoadSymbolReloc {
        rd: v2,
        symbol_reloc: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2680.
    return v6;
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAddr {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2687.
    return v5;
}

// Generated as internal constructor for term call_impl.
pub fn constructor_call_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallInfo,
) -> SideEffectNoResult {
    let v2 = MInst::Call {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2694.
    return v3;
}

// Generated as internal constructor for term call_ind_impl.
pub fn constructor_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallIndInfo,
) -> SideEffectNoResult {
    let v2 = MInst::CallInd {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2699.
    return v3;
}

// Generated as internal constructor for term jump_impl.
pub fn constructor_jump_impl<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 2704.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: MachLabel,
    arg2: &Cond,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        cond: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2709.
    return v4;
}

// Generated as internal constructor for term oneway_cond_br.
pub fn constructor_oneway_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: &Cond,
) -> ConsumesFlags {
    let v2 = MInst::OneWayCondBr {
        target: arg0,
        cond: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2714.
    return v3;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VecMachLabel,
) -> SideEffectNoResult {
    let v2 = MInst::JTSequence {
        ridx: arg0,
        targets: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2719.
    return v3;
}

// Generated as internal constructor for term push_alu_reg.
pub fn constructor_push_alu_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRRR {
            alu_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            rm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2757.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_reg", "src/isa/s390x/inst.isle line 2756"
    )
}

// Generated as internal constructor for term push_alu_uimm32shifted.
pub fn constructor_push_alu_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRUImm32Shifted {
            alu_op: arg1.clone(),
            rd: v4,
            ri: arg3,
            imm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2763.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_uimm32shifted", "src/isa/s390x/inst.isle line 2762"
    )
}

// Generated as internal constructor for term push_shift.
pub fn constructor_push_shift<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ShiftOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v8 = MInst::ShiftRR {
            shift_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            shift_imm: arg4,
            shift_reg: arg5,
        };
        let v9 = C::inst_builder_push(ctx, arg0, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2769.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_shift", "src/isa/s390x/inst.isle line 2768"
    )
}

// Generated as internal constructor for term push_rxsbg.
pub fn constructor_push_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &RxSBGOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
    arg5: u8,
    arg6: u8,
    arg7: i8,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v10 = C::same_reg(ctx, v4, arg3);
        if let Some(v11) = v10 {
            let v12 = MInst::RxSBG {
                op: arg1.clone(),
                rd: v4,
                ri: arg3,
                rn: arg4,
                start_bit: arg5,
                end_bit: arg6,
                rotate_amt: arg7,
            };
            let v13 = C::inst_builder_push(ctx, arg0, &v12);
            let v14 = C::writable_reg_to_reg(ctx, v4);
            // Rule at src/isa/s390x/inst.isle line 2776.
            return v14;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_rxsbg", "src/isa/s390x/inst.isle line 2775"
    )
}

// Generated as internal constructor for term push_unary.
pub fn constructor_push_unary<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &UnaryOp,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = MInst::UnaryRR {
            op: arg1.clone(),
            rd: v4,
            rn: arg3,
        };
        let v7 = C::inst_builder_push(ctx, arg0, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2784.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_unary", "src/isa/s390x/inst.isle line 2783"
    )
}

// Generated as internal constructor for term push_atomic_cas32.
pub fn constructor_push_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas32 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src/isa/s390x/inst.isle line 2790.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas32", "src/isa/s390x/inst.isle line 2789"
    )
}

// Generated as internal constructor for term push_atomic_cas64.
pub fn constructor_push_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas64 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src/isa/s390x/inst.isle line 2796.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas64", "src/isa/s390x/inst.isle line 2795"
    )
}

// Generated as internal constructor for term push_break_if.
pub fn constructor_push_break_if<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ProducesFlags,
    arg2: &Cond,
) -> Reg {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v2 } = arg1 {
        let v4 = C::inst_builder_push(ctx, arg0, v2);
        let v5 = MInst::CondBreak { cond: arg2.clone() };
        let v6 = C::inst_builder_push(ctx, arg0, &v5);
        let v7 = C::invalid_reg(ctx);
        // Rule at src/isa/s390x/inst.isle line 2802.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_break_if", "src/isa/s390x/inst.isle line 2801"
    )
}

// Generated as internal constructor for term emit_loop.
pub fn constructor_emit_loop<C: Context>(ctx: &mut C, arg0: &VecMInstBuilder, arg1: &Cond) -> Unit {
    let v2 = C::inst_builder_finish(ctx, arg0);
    let v3 = MInst::Loop {
        body: v2,
        cond: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/s390x/inst.isle line 2809.
    return v4;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = C::temp_writable_reg(ctx, v9);
        let v11 = MInst::Mov64 { rd: v10, rm: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/s390x/inst.isle line 2821.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::Mov32 { rd: v4, rm: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2817.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg", "src/isa/s390x/inst.isle line 2816"
    )
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: WritableReg,
    arg2: &MemArg,
) -> Unit {
    match arg0 {
        I32 => {
            let v3 = MInst::Load32 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v4 = C::emit(ctx, &v3);
            // Rule at src/isa/s390x/inst.isle line 2828.
            return v4;
        }
        I64 => {
            let v5 = MInst::Load64 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v6 = C::emit(ctx, &v5);
            // Rule at src/isa/s390x/inst.isle line 2830.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_load", "src/isa/s390x/inst.isle line 2827"
    )
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2835.
    return v5;
}

// Generated as internal constructor for term sp.
pub fn constructor_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_stack(ctx);
    let v1 = constructor_mov_preg(ctx, v0);
    // Rule at src/isa/s390x/inst.isle line 2848.
    return v1;
}

// Generated as internal constructor for term arg_store.
pub fn constructor_arg_store<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_store8(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2854.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_store16(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2855.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_store32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2856.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2857.
            return v6.clone();
        }
        R64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2858.
            return v6.clone();
        }
        F32 => {
            let v9 = &constructor_vec_store_lane(ctx, F32X4, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2859.
            return v9.clone();
        }
        F64 => {
            let v11 = &constructor_vec_store_lane(ctx, F64X2, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2860.
            return v11.clone();
        }
        _ => {}
    }
    let v12 = C::vr128_ty(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_vec_store(ctx, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 2861.
        return v14.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_store", "src/isa/s390x/inst.isle line 2853"
    )
}

// Generated as internal constructor for term arg_load.
pub fn constructor_arg_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_zext32_mem(ctx, I8, arg1);
            // Rule at src/isa/s390x/inst.isle line 2864.
            return v3;
        }
        I16 => {
            let v5 = constructor_zext32_mem(ctx, I16, arg1);
            // Rule at src/isa/s390x/inst.isle line 2865.
            return v5;
        }
        I32 => {
            let v6 = constructor_load32(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2866.
            return v6;
        }
        I64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2867.
            return v7;
        }
        R64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2868.
            return v7;
        }
        F32 => {
            let v10 = constructor_vec_load_lane_undef(ctx, F32X4, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2869.
            return v10;
        }
        F64 => {
            let v12 = constructor_vec_load_lane_undef(ctx, F64X2, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2870.
            return v12;
        }
        _ => {}
    }
    let v13 = C::vr128_ty(ctx, arg0);
    if let Some(v14) = v13 {
        let v15 = constructor_vec_load(ctx, v14, arg1);
        // Rule at src/isa/s390x/inst.isle line 2871.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_load", "src/isa/s390x/inst.isle line 2863"
    )
}

// Generated as internal constructor for term vec_elt_rev.
pub fn constructor_vec_elt_rev<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    let v17 = constructor_vec_rot_imm(ctx, I16X8, v14, 0x8);
                    // Rule at src/isa/s390x/inst.isle line 2883.
                    return v17;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    // Rule at src/isa/s390x/inst.isle line 2880.
                    return v14;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    // Rule at src/isa/s390x/inst.isle line 2877.
                    return v11;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    // Rule at src/isa/s390x/inst.isle line 2875.
                    return v9;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_elt_rev", "src/isa/s390x/inst.isle line 2874"
    )
}

// Generated as internal constructor for term abi_vec_elt_rev.
pub fn constructor_abi_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 2891.
        return arg2;
    }
    let v5 = C::gpr64_ty(ctx, arg1);
    if let Some(v6) = v5 {
        // Rule at src/isa/s390x/inst.isle line 2892.
        return arg2;
    }
    let v7 = C::ty_scalar_float(ctx, arg1);
    if let Some(v8) = v7 {
        // Rule at src/isa/s390x/inst.isle line 2893.
        return arg2;
    }
    let v9 = &C::lane_order(ctx);
    let v10 = constructor_lane_order_equal(ctx, arg0, v9);
    match v10 {
        true => {
            // Rule at src/isa/s390x/inst.isle line 2894.
            return arg2;
        }
        false => {
            let v11 = C::vr128_ty(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_vec_elt_rev(ctx, v12, arg2);
                // Rule at src/isa/s390x/inst.isle line 2897.
                return v13;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "abi_vec_elt_rev", "src/isa/s390x/inst.isle line 2890"
    )
}

// Generated as internal constructor for term memcpy.
pub fn constructor_memcpy<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &MemArg,
    arg2: u64,
) -> SideEffectNoResult {
    let v3 = C::len_minus_one(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = &constructor_memarg_pair(ctx, arg0);
        let v6 = &constructor_memarg_pair(ctx, arg1);
        let v7 = &constructor_mvc(ctx, v5, v6, v4);
        // Rule at src/isa/s390x/inst.isle line 2903.
        return v7.clone();
    }
    let v8 = constructor_load_addr(ctx, arg0);
    let v9 = constructor_load_addr(ctx, arg1);
    let v11 = constructor_imm(ctx, I64, arg2);
    let v12 = &C::lib_call_info_memcpy(ctx, v8, v9, v11);
    let v13 = C::lib_accumulate_outgoing_args_size(ctx, v12);
    let v14 = &constructor_lib_call(ctx, v12);
    // Rule at src/isa/s390x/inst.isle line 2905.
    return v14.clone();
}

// Generated as internal constructor for term copy_to_buffer.
pub fn constructor_copy_to_buffer<C: Context>(
    ctx: &mut C,
    arg0: i64,
    arg1: &ABIArg,
    arg2: Value,
) -> InstOutput {
    let v2 = &C::abi_arg_only_slot(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::output_none(ctx);
        // Rule at src/isa/s390x/inst.isle line 2912.
        return v5;
    }
    let v6 = C::abi_arg_struct_pointer(ctx, arg1);
    if let Some(v7) = v6 {
        let v11 = &C::memarg_stack_off(ctx, arg0, v7.1);
        let v12 = C::put_in_reg(ctx, arg2);
        let v15 = C::memflags_trusted(ctx);
        let v16 = &C::memarg_reg_plus_off(ctx, v12, 0x0, 0x0, v15);
        let v17 = &constructor_memcpy(ctx, v11, v16, v7.2);
        let v18 = constructor_side_effect(ctx, v17);
        // Rule at src/isa/s390x/inst.isle line 2913.
        return v18;
    }
    let v19 = C::abi_arg_implicit_pointer(ctx, arg1);
    if let Some(v20) = v19 {
        let v24 = C::value_type(ctx, arg2);
        if v20.2 == v24 {
            let v25 = C::put_in_reg(ctx, arg2);
            let v26 = &C::memarg_stack_off(ctx, arg0, v20.1);
            let v27 = &constructor_arg_store(ctx, v20.2, v25, v26);
            let v28 = constructor_side_effect(ctx, v27);
            // Rule at src/isa/s390x/inst.isle line 2917.
            return v28;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_buffer", "src/isa/s390x/inst.isle line 2911"
    )
}

// Generated as internal constructor for term copy_to_arg.
pub fn constructor_copy_to_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
    arg4: Value,
) -> InstOutput {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v7 = constructor_prepare_arg_val(ctx, v5, arg4);
        let v8 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, v5, v7);
        // Rule at src/isa/s390x/inst.isle line 2924.
        return v8;
    }
    let v9 = C::abi_arg_struct_pointer(ctx, arg3);
    if let Some(v10) = v9 {
        let v14 = &C::memarg_stack_off(ctx, arg2, v10.1);
        let v15 = constructor_load_addr(ctx, v14);
        let v16 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v10.0, v15);
        // Rule at src/isa/s390x/inst.isle line 2926.
        return v16;
    }
    let v17 = C::abi_arg_implicit_pointer(ctx, arg3);
    if let Some(v18) = v17 {
        let v22 = &C::memarg_stack_off(ctx, arg2, v18.1);
        let v23 = constructor_load_addr(ctx, v22);
        let v24 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v18.0, v23);
        // Rule at src/isa/s390x/inst.isle line 2929.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_arg", "src/isa/s390x/inst.isle line 2923"
    )
}

// Generated as internal constructor for term copy_from_arg.
pub fn constructor_copy_from_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
) -> ValueRegs {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = constructor_copy_reg_from_arg_slot(ctx, arg0, arg1, arg2, v5);
        let v7 = C::value_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2935.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_from_arg", "src/isa/s390x/inst.isle line 2934"
    )
}

// Generated as internal constructor for term prepare_arg_val.
pub fn constructor_prepare_arg_val<C: Context>(ctx: &mut C, arg0: &ABIArgSlot, arg1: Value) -> Reg {
    match arg0 {
        &ABIArgSlot::Reg {
            reg: v1,
            ty: v2,
            extension: ref v3,
        } => {
            match v3 {
                &ArgumentExtension::None => {
                    if v2 == R64 {
                        let v6 = C::put_in_reg(ctx, arg1);
                        let v7 = constructor_copy_reg(ctx, I64, v6);
                        // Rule at src/isa/s390x/inst.isle line 2942.
                        return v7;
                    }
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2944.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2946.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2948.
                    return v9;
                }
                _ => {}
            }
        }
        &ABIArgSlot::Stack {
            offset: v10,
            ty: v11,
            extension: ref v12,
        } => {
            match v12 {
                &ArgumentExtension::None => {
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2950.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2952.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2954.
                    return v9;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "prepare_arg_val", "src/isa/s390x/inst.isle line 2941"
    )
}

// Generated as internal constructor for term copy_reg_to_arg_slot.
pub fn constructor_copy_reg_to_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
    arg4: Reg,
) -> InstOutput {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, arg4);
            let v9 = C::args_builder_push(ctx, arg0, v8, v4);
            let v10 = C::output_none(ctx);
            // Rule at src/isa/s390x/inst.isle line 2960.
            return v10;
        }
        &ABIArgSlot::Stack {
            offset: v11,
            ty: v12,
            extension: ref v13,
        } => {
            let v14 = constructor_abi_ext_ty(ctx, v13, v12);
            let v15 = &C::memarg_stack_off(ctx, arg2, v11);
            let v16 = &constructor_arg_store(ctx, v14, arg4, v15);
            let v17 = constructor_side_effect(ctx, v16);
            // Rule at src/isa/s390x/inst.isle line 2963.
            return v17;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_to_arg_slot", "src/isa/s390x/inst.isle line 2959"
    )
}

// Generated as internal constructor for term copy_reg_from_arg_slot.
pub fn constructor_copy_reg_from_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
) -> Reg {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v7 = C::defs_lookup(ctx, arg0, v4);
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, v7);
            // Rule at src/isa/s390x/inst.isle line 2968.
            return v8;
        }
        &ABIArgSlot::Stack {
            offset: v9,
            ty: v10,
            extension: ref v11,
        } => {
            let v12 = constructor_abi_ext_ty(ctx, v11, v10);
            let v13 = &C::memarg_stack_off(ctx, arg2, v9);
            let v14 = constructor_arg_load(ctx, v12, v13);
            // Rule at src/isa/s390x/inst.isle line 2970.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_from_arg_slot", "src/isa/s390x/inst.isle line 2967"
    )
}

// Generated as internal constructor for term abi_ext_ty.
pub fn constructor_abi_ext_ty<C: Context>(
    ctx: &mut C,
    arg0: &ArgumentExtension,
    arg1: Type,
) -> Type {
    match arg0 {
        &ArgumentExtension::Uext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2976.
                return I64;
            }
        }
        &ArgumentExtension::Sext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2977.
                return I64;
            }
        }
        _ => {}
    }
    // Rule at src/isa/s390x/inst.isle line 2975.
    return arg1;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        F32 => {
            let v45 = C::temp_writable_reg(ctx, F32);
            let v17 = C::u64_truncate_to_u32(ctx, arg1);
            let v46 = MInst::LoadFpuConst32 {
                rd: v45,
                const_data: v17,
            };
            let v47 = C::emit(ctx, &v46);
            let v48 = C::writable_reg_to_reg(ctx, v45);
            // Rule at src/isa/s390x/inst.isle line 3049.
            return v48;
        }
        F64 => {
            let v50 = C::temp_writable_reg(ctx, F64);
            let v51 = MInst::LoadFpuConst64 {
                rd: v50,
                const_data: arg1,
            };
            let v52 = C::emit(ctx, &v51);
            let v53 = C::writable_reg_to_reg(ctx, v50);
            // Rule at src/isa/s390x/inst.isle line 3056.
            return v53;
        }
        _ => {}
    }
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = C::u64_as_i16(ctx, arg1);
        let v6 = MInst::Mov32SImm16 { rd: v4, imm: v5 };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2986.
        return v8;
    }
    let v9 = C::gpr32_ty(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::i16_from_u64(ctx, arg1);
        if let Some(v12) = v11 {
            let v13 = C::temp_writable_reg(ctx, v10);
            let v14 = MInst::Mov32SImm16 { rd: v13, imm: v12 };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/s390x/inst.isle line 2992.
            return v16;
        }
        let v13 = C::temp_writable_reg(ctx, v10);
        let v17 = C::u64_truncate_to_u32(ctx, arg1);
        let v18 = MInst::Mov32Imm { rd: v13, imm: v17 };
        let v19 = C::emit(ctx, &v18);
        let v16 = C::writable_reg_to_reg(ctx, v13);
        // Rule at src/isa/s390x/inst.isle line 2998.
        return v16;
    }
    let v20 = C::gpr64_ty(ctx, arg0);
    if let Some(v21) = v20 {
        let v11 = C::i16_from_u64(ctx, arg1);
        if let Some(v12) = v11 {
            let v22 = C::temp_writable_reg(ctx, v21);
            let v23 = MInst::Mov64SImm16 { rd: v22, imm: v12 };
            let v24 = C::emit(ctx, &v23);
            let v25 = C::writable_reg_to_reg(ctx, v22);
            // Rule at src/isa/s390x/inst.isle line 3004.
            return v25;
        }
        let v26 = C::i32_from_u64(ctx, arg1);
        if let Some(v27) = v26 {
            let v22 = C::temp_writable_reg(ctx, v21);
            let v28 = MInst::Mov64SImm32 { rd: v22, imm: v27 };
            let v29 = C::emit(ctx, &v28);
            let v25 = C::writable_reg_to_reg(ctx, v22);
            // Rule at src/isa/s390x/inst.isle line 3010.
            return v25;
        }
        let v30 = C::uimm16shifted_from_u64(ctx, arg1);
        if let Some(v31) = v30 {
            let v22 = C::temp_writable_reg(ctx, v21);
            let v32 = MInst::Mov64UImm16Shifted { rd: v22, imm: v31 };
            let v33 = C::emit(ctx, &v32);
            let v25 = C::writable_reg_to_reg(ctx, v22);
            // Rule at src/isa/s390x/inst.isle line 3016.
            return v25;
        }
        let v34 = C::uimm32shifted_from_u64(ctx, arg1);
        if let Some(v35) = v34 {
            let v22 = C::temp_writable_reg(ctx, v21);
            let v36 = MInst::Mov64UImm32Shifted { rd: v22, imm: v35 };
            let v37 = C::emit(ctx, &v36);
            let v25 = C::writable_reg_to_reg(ctx, v22);
            // Rule at src/isa/s390x/inst.isle line 3022.
            return v25;
        }
        let v38 = C::u64_nonzero_hipart(ctx, arg1);
        if let Some(v39) = v38 {
            let v40 = C::u64_nonzero_lopart(ctx, arg1);
            if let Some(v41) = v40 {
                let v42 = constructor_imm(ctx, v21, v39);
                let v43 = constructor_insert_imm(ctx, v21, v42, v41);
                // Rule at src/isa/s390x/inst.isle line 3028.
                return v43;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/s390x/inst.isle line 2983"
    )
}

// Generated as internal constructor for term insert_imm.
pub fn constructor_insert_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u64) -> Reg {
    let v3 = C::uimm16shifted_from_u64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v6 = MInst::Insert64UImm16Shifted {
            rd: v5,
            ri: arg1,
            imm: v4,
        };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3036.
        return v8;
    }
    let v9 = C::uimm32shifted_from_u64(ctx, arg2);
    if let Some(v10) = v9 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v11 = MInst::Insert64UImm32Shifted {
            rd: v5,
            ri: arg1,
            imm: v10,
        };
        let v12 = C::emit(ctx, &v11);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3042.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_imm", "src/isa/s390x/inst.isle line 3033"
    )
}

// Generated as internal constructor for term imm32.
pub fn constructor_imm32<C: Context>(ctx: &mut C, arg0: Type, arg1: i32) -> Reg {
    if arg0 == I64 {
        let v3 = C::temp_writable_reg(ctx, I64);
        let v4 = MInst::Mov64SImm32 { rd: v3, imm: arg1 };
        let v5 = C::emit(ctx, &v4);
        let v6 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 3063.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm32", "src/isa/s390x/inst.isle line 3062"
    )
}

// Generated as internal constructor for term vec_imm.
pub fn constructor_vec_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3070.
            return v5;
        }
        let v6 = C::u64_pair_split(ctx, arg1);
        if v6.0 == v6.1 {
            let v10 = constructor_vec_imm_splat(ctx, I64X2, v6.0);
            // Rule at src/isa/s390x/inst.isle line 3072.
            return v10;
        }
        let v11 = constructor_vec_load_const(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3074.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm", "src/isa/s390x/inst.isle line 3069"
    )
}

// Generated as internal constructor for term vec_imm_splat.
pub fn constructor_vec_imm_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3081.
                return v11;
            }
            0x10 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                let v24 = C::u8_pair_split(ctx, v21.1);
                if v24.0 == v24.1 {
                    let v28 = C::u8_as_u64(ctx, v24.0);
                    let v29 = constructor_vec_imm_splat(ctx, I8X16, v28);
                    // Rule at src/isa/s390x/inst.isle line 3089.
                    return v29;
                }
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3083.
                return v11;
            }
            0x20 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                if v21.0 == v21.1 {
                    let v31 = C::u16_as_u64(ctx, v21.0);
                    let v32 = constructor_vec_imm_splat(ctx, I16X8, v31);
                    // Rule at src/isa/s390x/inst.isle line 3091.
                    return v32;
                }
                let v15 = C::i16_from_u32(ctx, v12.1);
                if let Some(v16) = v15 {
                    let v17 = constructor_vec_imm_replicate(ctx, arg0, v16);
                    // Rule at src/isa/s390x/inst.isle line 3085.
                    return v17;
                }
            }
            0x40 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                if v12.0 == v12.1 {
                    let v34 = C::u32_as_u64(ctx, v12.0);
                    let v35 = constructor_vec_imm_splat(ctx, I32X4, v34);
                    // Rule at src/isa/s390x/inst.isle line 3093.
                    return v35;
                }
                let v18 = C::i16_from_u64(ctx, arg1);
                if let Some(v19) = v18 {
                    let v20 = constructor_vec_imm_replicate(ctx, arg0, v19);
                    // Rule at src/isa/s390x/inst.isle line 3087.
                    return v20;
                }
            }
            _ => {}
        }
    }
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3079.
            return v5;
        }
        let v36 = constructor_vec_load_const_replicate(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3095.
        return v36;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_splat", "src/isa/s390x/inst.isle line 3078"
    )
}

// Generated as internal constructor for term ty_ext32.
pub fn constructor_ty_ext32<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3103.
            return I32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3104.
            return I32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3105.
            return I32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3106.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext32", "src/isa/s390x/inst.isle line 3102"
    )
}

// Generated as internal constructor for term ty_ext64.
pub fn constructor_ty_ext64<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3110.
            return I64;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3111.
            return I64;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3112.
            return I64;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3113.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext64", "src/isa/s390x/inst.isle line 3109"
    )
}

// Generated as internal constructor for term zext32_reg.
pub fn constructor_zext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3118.
    return v9;
}

// Generated as internal constructor for term sext32_reg.
pub fn constructor_sext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3125.
    return v9;
}

// Generated as internal constructor for term zext64_reg.
pub fn constructor_zext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3132.
    return v9;
}

// Generated as internal constructor for term sext64_reg.
pub fn constructor_sext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3139.
    return v9;
}

// Generated as internal constructor for term zext32_mem.
pub fn constructor_zext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3147.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3151.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext32_mem", "src/isa/s390x/inst.isle line 3146"
    )
}

// Generated as internal constructor for term sext32_mem.
pub fn constructor_sext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3158.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3162.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext32_mem", "src/isa/s390x/inst.isle line 3157"
    )
}

// Generated as internal constructor for term zext64_mem.
pub fn constructor_zext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3169.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3173.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64ZExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3177.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext64_mem", "src/isa/s390x/inst.isle line 3168"
    )
}

// Generated as internal constructor for term sext64_mem.
pub fn constructor_sext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3184.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3188.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64SExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3192.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext64_mem", "src/isa/s390x/inst.isle line 3183"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3200.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3206.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3202.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3204.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/s390x/inst.isle line 3199"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3211.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3217.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3213.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3215.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/s390x/inst.isle line 3210"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3222.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3228.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3224.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3226.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/s390x/inst.isle line 3221"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3233.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3239.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3235.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3237.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/s390x/inst.isle line 3232"
    )
}

// Generated as internal constructor for term cmov_imm.
pub fn constructor_cmov_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: Reg,
) -> ConsumesFlags {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64SImm16 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3251.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32SImm16 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3247.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm", "src/isa/s390x/inst.isle line 3246"
    )
}

// Generated as internal constructor for term cmov_imm_imm.
pub fn constructor_cmov_imm_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: i16,
) -> ConsumesFlags {
    let v14 = C::gpr64_ty(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = C::temp_writable_reg(ctx, v15);
        let v17 = C::temp_writable_reg(ctx, v15);
        let v21 = C::writable_reg_to_reg(ctx, v17);
        let v22 = C::value_reg(ctx, v21);
        let v18 = MInst::Mov64SImm16 { rd: v16, imm: arg3 };
        let v19 = C::writable_reg_to_reg(ctx, v16);
        let v20 = MInst::CMov64SImm16 {
            rd: v17,
            cond: arg1.clone(),
            ri: v19,
            imm: arg2,
        };
        let v23 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v18,
            inst2: v20,
            result: v22,
        };
        // Rule at src/isa/s390x/inst.isle line 3265.
        return v23;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = C::temp_writable_reg(ctx, v2);
        let v11 = C::writable_reg_to_reg(ctx, v7);
        let v12 = C::value_reg(ctx, v11);
        let v8 = MInst::Mov32SImm16 { rd: v6, imm: arg3 };
        let v9 = C::writable_reg_to_reg(ctx, v6);
        let v10 = MInst::CMov32SImm16 {
            rd: v7,
            cond: arg1.clone(),
            ri: v9,
            imm: arg2,
        };
        let v13 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v8,
            inst2: v10,
            result: v12,
        };
        // Rule at src/isa/s390x/inst.isle line 3258.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm_imm", "src/isa/s390x/inst.isle line 3257"
    )
}

// Generated as internal constructor for term cmov_reg_reg.
pub fn constructor_cmov_reg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v17 = C::temp_writable_reg(ctx, F32);
            let v18 = MInst::FpuCMov32 {
                rd: v17,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src/isa/s390x/inst.isle line 3283.
            return v20;
        }
        F64 => {
            let v22 = C::temp_writable_reg(ctx, F64);
            let v23 = MInst::FpuCMov64 {
                rd: v22,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v24 = C::writable_reg_to_reg(ctx, v22);
            let v25 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v23,
                result: v24,
            };
            // Rule at src/isa/s390x/inst.isle line 3287.
            return v25;
        }
        _ => {}
    }
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3279.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3275.
        return v9;
    }
    let v26 = C::vr128_ty(ctx, arg0);
    if let Some(v27) = v26 {
        let v22 = C::temp_writable_reg(ctx, F64);
        let v28 = MInst::VecCMov {
            rd: v22,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v24 = C::writable_reg_to_reg(ctx, v22);
        let v29 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v28,
            result: v24,
        };
        // Rule at src/isa/s390x/inst.isle line 3291.
        return v29;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_reg_reg", "src/isa/s390x/inst.isle line 3274"
    )
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: &TrapCode,
) -> Reg {
    let v3 = &constructor_trap_if_impl(ctx, arg1, arg2);
    let v4 = &constructor_with_flags_side_effect(ctx, arg0, v3);
    let v5 = constructor_side_effect(ctx, v4);
    let v6 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3300.
    return v6;
}

// Generated as internal constructor for term icmps_reg_and_trap.
pub fn constructor_icmps_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3306.
    return v8;
}

// Generated as internal constructor for term icmps_simm16_and_trap.
pub fn constructor_icmps_simm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRSImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3312.
    return v8;
}

// Generated as internal constructor for term icmpu_reg_and_trap.
pub fn constructor_icmpu_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3318.
    return v8;
}

// Generated as internal constructor for term icmpu_uimm16_and_trap.
pub fn constructor_icmpu_uimm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRUImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3324.
    return v8;
}

// Generated as internal constructor for term trap_impl.
pub fn constructor_trap_impl<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Trap {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 3330.
    return v2;
}

// Generated as internal constructor for term trap_if_impl.
pub fn constructor_trap_if_impl<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cond: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 3334.
    return v3;
}

// Generated as internal constructor for term debugtrap_impl.
pub fn constructor_debugtrap_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Debugtrap,
    };
    // Rule at src/isa/s390x/inst.isle line 3338.
    return v1;
}

// Generated as internal constructor for term bool.
pub fn constructor_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
) -> ProducesBool {
    let v2 = ProducesBool::ProducesBool {
        producer: arg0.clone(),
        cond: arg1.clone(),
    };
    // Rule at src/isa/s390x/inst.isle line 3349.
    return v2;
}

// Generated as internal constructor for term invert_bool.
pub fn constructor_invert_bool<C: Context>(ctx: &mut C, arg0: &ProducesBool) -> ProducesBool {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v3 = &C::invert_cond(ctx, v2);
        let v4 = &constructor_bool(ctx, v1, v3);
        // Rule at src/isa/s390x/inst.isle line 3353.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_bool", "src/isa/s390x/inst.isle line 3352"
    )
}

// Generated as internal constructor for term select_bool_reg.
pub fn constructor_select_bool_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_reg_reg(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3358.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_reg", "src/isa/s390x/inst.isle line 3357"
    )
}

// Generated as internal constructor for term select_bool_imm.
pub fn constructor_select_bool_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: i16,
    arg3: i16,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_imm_imm(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3363.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_imm", "src/isa/s390x/inst.isle line 3362"
    )
}

// Generated as internal constructor for term lower_bool.
pub fn constructor_lower_bool<C: Context>(ctx: &mut C, arg0: Type, arg1: &ProducesBool) -> Reg {
    if arg0 == I8 {
        let v5 = constructor_select_bool_imm(ctx, I8, arg1, 0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3369.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool", "src/isa/s390x/inst.isle line 3368"
    )
}

// Generated as internal constructor for term lower_bool_to_mask.
pub fn constructor_lower_bool_to_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Reg {
    if arg0 == I128 {
        let v8 = constructor_lower_bool_to_mask(ctx, I64, arg1);
        let v10 = constructor_mov_to_vec128(ctx, I128, v8, v8);
        // Rule at src/isa/s390x/inst.isle line 3376.
        return v10;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_select_bool_imm(ctx, v2, arg1, -0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3373.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool_to_mask", "src/isa/s390x/inst.isle line 3372"
    )
}

// Generated as internal constructor for term cond_br_bool.
pub fn constructor_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v5 = &constructor_cond_br(ctx, arg1, arg2, v2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/s390x/inst.isle line 3382.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cond_br_bool", "src/isa/s390x/inst.isle line 3381"
    )
}

// Generated as internal constructor for term oneway_cond_br_bool.
pub fn constructor_oneway_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_oneway_cond_br(ctx, arg1, v2);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3387.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "oneway_cond_br_bool", "src/isa/s390x/inst.isle line 3386"
    )
}

// Generated as internal constructor for term trap_if_bool.
pub fn constructor_trap_if_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if_impl(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3392.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_bool", "src/isa/s390x/inst.isle line 3391"
    )
}

// Generated as internal constructor for term casloop_val_reg.
pub fn constructor_casloop_val_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x0);
    // Rule at src/isa/s390x/inst.isle line 3405.
    return v1;
}

// Generated as internal constructor for term casloop_tmp_reg.
pub fn constructor_casloop_tmp_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x1);
    // Rule at src/isa/s390x/inst.isle line 3409.
    return v1;
}

// Generated as internal constructor for term casloop_emit.
pub fn constructor_casloop_emit<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> PReg {
    let v7 = &C::memarg_reg_plus_off(ctx, arg3, 0x0, 0x0, arg2);
    let v8 = constructor_ty_ext32(ctx, arg1);
    let v9 = constructor_casloop_val_reg(ctx);
    let v10 = constructor_push_atomic_cas(ctx, arg0, v8, v9, arg4, v7);
    let v11 = constructor_ty_ext32(ctx, arg1);
    let v12 = constructor_casloop_val_reg(ctx);
    let v13 = constructor_emit_load(ctx, v11, v12, v7);
    let v15 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
    let v16 = constructor_emit_loop(ctx, arg0, v15);
    let v17 = C::preg_gpr_0(ctx);
    // Rule at src/isa/s390x/inst.isle line 3418.
    return v17;
}

// Generated as internal constructor for term casloop_result.
pub fn constructor_casloop_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: PReg,
) -> Reg {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::bigendian(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = constructor_mov_preg(ctx, arg2);
            // Rule at src/isa/s390x/inst.isle line 3440.
            return v7;
        }
        let v8 = C::littleendian(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::preg_to_reg(ctx, arg2);
            let v11 = constructor_bswap_reg(ctx, v2, v10);
            // Rule at src/isa/s390x/inst.isle line 3442.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_result", "src/isa/s390x/inst.isle line 3439"
    )
}

// Generated as internal constructor for term casloop.
pub fn constructor_casloop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg4);
    let v6 = constructor_casloop_result(ctx, arg1, arg2, v5);
    // Rule at src/isa/s390x/inst.isle line 3447.
    return v6;
}

// Generated as internal constructor for term casloop_bitshift.
pub fn constructor_casloop_bitshift<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_lshl_imm(ctx, I32, arg0, 0x3);
    // Rule at src/isa/s390x/inst.isle line 3462.
    return v3;
}

// Generated as internal constructor for term casloop_aligned_addr.
pub fn constructor_casloop_aligned_addr<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v4 = C::uimm16shifted(ctx, 0xFFFC, 0x0);
    let v5 = constructor_and_uimm16shifted(ctx, I64, arg0, v4);
    // Rule at src/isa/s390x/inst.isle line 3467.
    return v5;
}

// Generated as internal constructor for term casloop_rotate_in.
pub fn constructor_casloop_rotate_in<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
            // Rule at src/isa/s390x/inst.isle line 3477.
            return v8;
        }
        I16 => {
            let v9 = C::bigendian(ctx, arg2);
            if let Some(v10) = v9 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3479.
                return v8;
            }
            let v11 = C::littleendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v14 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3481.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_in", "src/isa/s390x/inst.isle line 3476"
    )
}

// Generated as internal constructor for term casloop_rotate_out.
pub fn constructor_casloop_rotate_out<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_neg_reg(ctx, I32, arg3);
            let v9 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 3490.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v12 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3492.
                return v12;
            }
            let v13 = C::littleendian(ctx, arg2);
            if let Some(v14) = v13 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v16 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3494.
                return v16;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_out", "src/isa/s390x/inst.isle line 3489"
    )
}

// Generated as internal constructor for term casloop_rotate_result.
pub fn constructor_casloop_rotate_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v6 = constructor_rot_imm_reg(ctx, I32, arg3, 0x8, arg2);
            // Rule at src/isa/s390x/inst.isle line 3505.
            return v6;
        }
        I16 => {
            let v7 = C::bigendian(ctx, arg1);
            if let Some(v8) = v7 {
                let v10 = constructor_rot_imm_reg(ctx, I32, arg3, 0x10, arg2);
                // Rule at src/isa/s390x/inst.isle line 3507.
                return v10;
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_rot_reg(ctx, I32, arg3, arg2);
                let v14 = constructor_bswap_reg(ctx, I32, v13);
                // Rule at src/isa/s390x/inst.isle line 3509.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_result", "src/isa/s390x/inst.isle line 3504"
    )
}

// Generated as internal constructor for term casloop_subword.
pub fn constructor_casloop_subword<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg5);
    let v7 = C::preg_to_reg(ctx, v6);
    let v8 = constructor_casloop_rotate_result(ctx, arg1, arg2, arg4, v7);
    // Rule at src/isa/s390x/inst.isle line 3514.
    return v8;
}

// Generated as internal constructor for term writable_link_reg.
pub fn constructor_writable_link_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0xE);
    // Rule at src/isa/s390x/inst.isle line 3560.
    return v1;
}

// Generated as internal constructor for term abi_call.
pub fn constructor_abi_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> SideEffectNoResult {
    let v5 = constructor_writable_link_reg(ctx);
    let v6 = C::abi_call_info(ctx, arg0, arg1, arg2, arg3, arg4);
    let v7 = &constructor_call_impl(ctx, v5, v6);
    // Rule at src/isa/s390x/inst.isle line 3563.
    return v7.clone();
}

// Generated as internal constructor for term abi_call_ind.
pub fn constructor_abi_call_ind<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Reg,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> SideEffectNoResult {
    let v5 = constructor_writable_link_reg(ctx);
    let v6 = C::abi_call_ind_info(ctx, arg0, arg1, arg2, arg3, arg4);
    let v7 = &constructor_call_ind_impl(ctx, v5, v6);
    // Rule at src/isa/s390x/inst.isle line 3567.
    return v7.clone();
}

// Generated as internal constructor for term lib_call.
pub fn constructor_lib_call<C: Context>(ctx: &mut C, arg0: &LibCallInfo) -> SideEffectNoResult {
    let v1 = constructor_writable_link_reg(ctx);
    let v2 = C::lib_call_info(ctx, arg0);
    let v3 = &constructor_call_impl(ctx, v1, v2);
    // Rule at src/isa/s390x/inst.isle line 3591.
    return v3.clone();
}

// Generated as internal constructor for term vec_widen_type.
pub fn constructor_vec_widen_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3601.
            return I16X8;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3602.
            return I32X4;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3603.
            return I64X2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_widen_type", "src/isa/s390x/inst.isle line 3600"
    )
}

// Generated as internal constructor for term vecop_pack.
pub fn constructor_vecop_pack<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3606.
            return VecBinaryOp::Pack16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3607.
            return VecBinaryOp::Pack32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3608.
            return VecBinaryOp::Pack64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack", "src/isa/s390x/inst.isle line 3605"
    )
}

// Generated as internal constructor for term vec_pack.
pub fn constructor_vec_pack<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3611.
    return v4;
}

// Generated as internal constructor for term vecop_pack_ssat.
pub fn constructor_vecop_pack_ssat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3614.
            return VecBinaryOp::PackSSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3615.
            return VecBinaryOp::PackSSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3616.
            return VecBinaryOp::PackSSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_ssat", "src/isa/s390x/inst.isle line 3613"
    )
}

// Generated as internal constructor for term vec_pack_ssat.
pub fn constructor_vec_pack_ssat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_ssat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3619.
    return v4;
}

// Generated as internal constructor for term vecop_pack_usat.
pub fn constructor_vecop_pack_usat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3622.
            return VecBinaryOp::PackUSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3623.
            return VecBinaryOp::PackUSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3624.
            return VecBinaryOp::PackUSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_usat", "src/isa/s390x/inst.isle line 3621"
    )
}

// Generated as internal constructor for term vec_pack_usat.
pub fn constructor_vec_pack_usat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_usat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3627.
    return v4;
}

// Generated as internal constructor for term vecop_unpacks_low.
pub fn constructor_vecop_unpacks_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3630.
            return VecUnaryOp::UnpackSLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3631.
            return VecUnaryOp::UnpackSLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3632.
            return VecUnaryOp::UnpackSLow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_low", "src/isa/s390x/inst.isle line 3629"
    )
}

// Generated as internal constructor for term vec_unpacks_low.
pub fn constructor_vec_unpacks_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3635.
    return v3;
}

// Generated as internal constructor for term vecop_unpacks_high.
pub fn constructor_vecop_unpacks_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3638.
            return VecUnaryOp::UnpackSHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3639.
            return VecUnaryOp::UnpackSHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3640.
            return VecUnaryOp::UnpackSHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_high", "src/isa/s390x/inst.isle line 3637"
    )
}

// Generated as internal constructor for term vec_unpacks_high.
pub fn constructor_vec_unpacks_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3643.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_low.
pub fn constructor_vecop_unpacku_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3646.
            return VecUnaryOp::UnpackULow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3647.
            return VecUnaryOp::UnpackULow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3648.
            return VecUnaryOp::UnpackULow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_low", "src/isa/s390x/inst.isle line 3645"
    )
}

// Generated as internal constructor for term vec_unpacku_low.
pub fn constructor_vec_unpacku_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3651.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_high.
pub fn constructor_vecop_unpacku_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3654.
            return VecUnaryOp::UnpackUHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3655.
            return VecUnaryOp::UnpackUHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3656.
            return VecUnaryOp::UnpackUHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_high", "src/isa/s390x/inst.isle line 3653"
    )
}

// Generated as internal constructor for term vec_unpacku_high.
pub fn constructor_vec_unpacku_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3659.
    return v3;
}

// Generated as internal constructor for term vec_pack_lane_order.
pub fn constructor_vec_pack_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3670.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3667.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_lane_order", "src/isa/s390x/inst.isle line 3666"
    )
}

// Generated as internal constructor for term vec_pack_ssat_lane_order.
pub fn constructor_vec_pack_ssat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_ssat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3678.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_ssat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3675.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_ssat_lane_order", "src/isa/s390x/inst.isle line 3674"
    )
}

// Generated as internal constructor for term vec_pack_usat_lane_order.
pub fn constructor_vec_pack_usat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_usat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3686.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_usat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3683.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_usat_lane_order", "src/isa/s390x/inst.isle line 3682"
    )
}

// Generated as internal constructor for term vec_unpacks_low_lane_order.
pub fn constructor_vec_unpacks_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3699.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3696.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_low_lane_order", "src/isa/s390x/inst.isle line 3695"
    )
}

// Generated as internal constructor for term vec_unpacks_high_lane_order.
pub fn constructor_vec_unpacks_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3707.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3704.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_high_lane_order", "src/isa/s390x/inst.isle line 3703"
    )
}

// Generated as internal constructor for term vec_unpacku_low_lane_order.
pub fn constructor_vec_unpacku_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3715.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3712.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_low_lane_order", "src/isa/s390x/inst.isle line 3711"
    )
}

// Generated as internal constructor for term vec_unpacku_high_lane_order.
pub fn constructor_vec_unpacku_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3723.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3720.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_high_lane_order", "src/isa/s390x/inst.isle line 3719"
    )
}

// Generated as internal constructor for term vecop_merge_low.
pub fn constructor_vecop_merge_low<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3731.
            return VecBinaryOp::MergeLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3732.
            return VecBinaryOp::MergeLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3733.
            return VecBinaryOp::MergeLow32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3734.
            return VecBinaryOp::MergeLow64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_low", "src/isa/s390x/inst.isle line 3730"
    )
}

// Generated as internal constructor for term vec_merge_low.
pub fn constructor_vec_merge_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_merge_low(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3737.
    return v4;
}

// Generated as internal constructor for term vecop_merge_high.
pub fn constructor_vecop_merge_high<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3740.
            return VecBinaryOp::MergeHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3741.
            return VecBinaryOp::MergeHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3742.
            return VecBinaryOp::MergeHigh32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3743.
            return VecBinaryOp::MergeHigh64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_high", "src/isa/s390x/inst.isle line 3739"
    )
}

// Generated as internal constructor for term vec_merge_high.
pub fn constructor_vec_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_merge_high(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3746.
    return v4;
}

// Generated as internal constructor for term vec_merge_low_lane_order.
pub fn constructor_vec_merge_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_low(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3760.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_high(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3757.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_low_lane_order", "src/isa/s390x/inst.isle line 3756"
    )
}

// Generated as internal constructor for term vec_merge_high_lane_order.
pub fn constructor_vec_merge_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_high(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3768.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_low(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3765.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_high_lane_order", "src/isa/s390x/inst.isle line 3764"
    )
}

// Generated as internal constructor for term clz_reg.
pub fn constructor_clz_reg<C: Context>(ctx: &mut C, arg0: i16, arg1: Reg) -> Reg {
    if arg0 == 0x40 {
        let v2 = constructor_temp_writable_regpair(ctx);
        let v3 = MInst::Flogr { rd: v2, rn: arg1 };
        let v4 = C::emit(ctx, &v3);
        let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
        let v6 = C::regpair_hi(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3779.
        return v6;
    }
    let v2 = constructor_temp_writable_regpair(ctx);
    let v10 = &C::intcc_as_cond(ctx, &IntCC::Equal);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    let v6 = C::regpair_hi(ctx, v5);
    let v11 = &constructor_cmov_imm(ctx, I64, v10, arg0, v6);
    let v3 = MInst::Flogr { rd: v2, rn: arg1 };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    let v12 = constructor_with_flags_reg(ctx, &v7, v11);
    // Rule at src/isa/s390x/inst.isle line 3785.
    return v12;
}

// Generated as internal constructor for term vecop_clz.
pub fn constructor_vecop_clz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3793.
            return VecUnaryOp::Clz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3794.
            return VecUnaryOp::Clz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3795.
            return VecUnaryOp::Clz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3796.
            return VecUnaryOp::Clz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_clz", "src/isa/s390x/inst.isle line 3792"
    )
}

// Generated as internal constructor for term vec_clz.
pub fn constructor_vec_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_clz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3799.
    return v3;
}

// Generated as internal constructor for term vecop_ctz.
pub fn constructor_vecop_ctz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3803.
            return VecUnaryOp::Ctz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3804.
            return VecUnaryOp::Ctz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3805.
            return VecUnaryOp::Ctz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3806.
            return VecUnaryOp::Ctz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_ctz", "src/isa/s390x/inst.isle line 3802"
    )
}

// Generated as internal constructor for term vec_ctz.
pub fn constructor_vec_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_ctz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3809.
    return v3;
}

// Generated as internal constructor for term uint_sat_reg.
pub fn constructor_uint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3815.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0x100);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v10 = &constructor_cmov_imm(ctx, v4, v8, 0xFF, arg2);
                let v11 = constructor_with_flags_reg(ctx, v6, v10);
                // Rule at src/isa/s390x/inst.isle line 3816.
                return v11;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v13 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0xFFFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v8, -0x1, arg2);
                let v16 = constructor_with_flags_reg(ctx, v13, v15);
                // Rule at src/isa/s390x/inst.isle line 3819.
                return v16;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v19 = constructor_imm(ctx, I64, 0xFFFFFFFF);
                let v20 = &constructor_icmpu_reg(ctx, I64, arg2, v19);
                let v21 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v22 = &constructor_bool(ctx, v20, v21);
                let v23 = constructor_select_bool_reg(ctx, I64, v22, v19, arg2);
                // Rule at src/isa/s390x/inst.isle line 3822.
                return v23;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "uint_sat_reg", "src/isa/s390x/inst.isle line 3814"
    )
}

// Generated as internal constructor for term sint_sat_reg.
pub fn constructor_sint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3830.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7F);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v9 = &constructor_cmov_imm(ctx, v4, v8, 0x7F, arg2);
                let v10 = constructor_with_flags_reg(ctx, v6, v9);
                let v12 = &constructor_icmps_simm16(ctx, v4, v10, -0x80);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v14, -0x80, v10);
                let v16 = constructor_with_flags_reg(ctx, v12, v15);
                // Rule at src/isa/s390x/inst.isle line 3831.
                return v16;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v18 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7FFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v19 = &constructor_cmov_imm(ctx, v4, v8, 0x7FFF, arg2);
                let v20 = constructor_with_flags_reg(ctx, v18, v19);
                let v22 = &constructor_icmps_simm16(ctx, v4, v20, -0x8000);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v23 = &constructor_cmov_imm(ctx, v4, v14, -0x8000, v20);
                let v24 = constructor_with_flags_reg(ctx, v22, v23);
                // Rule at src/isa/s390x/inst.isle line 3837.
                return v24;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v27 = constructor_imm32(ctx, I64, 0x7FFFFFFF);
                let v28 = &constructor_icmps_reg(ctx, I64, arg2, v27);
                let v29 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v30 = &constructor_bool(ctx, v28, v29);
                let v31 = constructor_select_bool_reg(ctx, I64, v30, v27, arg2);
                let v33 = constructor_imm32(ctx, I64, -0x80000000);
                let v34 = &constructor_icmps_reg(ctx, I64, v31, v33);
                let v35 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v36 = &constructor_bool(ctx, v34, v35);
                let v37 = constructor_select_bool_reg(ctx, I64, v36, v33, v31);
                // Rule at src/isa/s390x/inst.isle line 3843.
                return v37;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sint_sat_reg", "src/isa/s390x/inst.isle line 3829"
    )
}

// Generated as internal constructor for term aluop_add.
pub fn constructor_aluop_add<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3859.
            return ALUOp::Add32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3860.
            return ALUOp::Add32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3861.
            return ALUOp::Add32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3862.
            return ALUOp::Add64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add", "src/isa/s390x/inst.isle line 3858"
    )
}

// Generated as internal constructor for term aluop_add_sext16.
pub fn constructor_aluop_add_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3865.
            return ALUOp::Add32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3866.
            return ALUOp::Add32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3867.
            return ALUOp::Add64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext16", "src/isa/s390x/inst.isle line 3864"
    )
}

// Generated as internal constructor for term aluop_add_sext32.
pub fn constructor_aluop_add_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3870.
        return ALUOp::Add64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext32", "src/isa/s390x/inst.isle line 3869"
    )
}

// Generated as internal constructor for term add_reg.
pub fn constructor_add_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3873.
    return v4;
}

// Generated as internal constructor for term add_reg_sext32.
pub fn constructor_add_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3876.
    return v4;
}

// Generated as internal constructor for term add_simm16.
pub fn constructor_add_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3879.
    return v4;
}

// Generated as internal constructor for term add_simm32.
pub fn constructor_add_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3882.
    return v4;
}

// Generated as internal constructor for term add_mem.
pub fn constructor_add_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3885.
    return v4;
}

// Generated as internal constructor for term add_mem_sext16.
pub fn constructor_add_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3888.
    return v4;
}

// Generated as internal constructor for term add_mem_sext32.
pub fn constructor_add_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3891.
    return v4;
}

// Generated as internal constructor for term vecop_add.
pub fn constructor_vecop_add<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 3898.
            return VecBinaryOp::Add128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3894.
            return VecBinaryOp::Add8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3895.
            return VecBinaryOp::Add16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3896.
            return VecBinaryOp::Add32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3897.
            return VecBinaryOp::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_add", "src/isa/s390x/inst.isle line 3893"
    )
}

// Generated as internal constructor for term vec_add.
pub fn constructor_vec_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_add(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3901.
    return v4;
}

// Generated as internal constructor for term aluop_add_logical.
pub fn constructor_aluop_add_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3907.
            return ALUOp::AddLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3908.
            return ALUOp::AddLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical", "src/isa/s390x/inst.isle line 3906"
    )
}

// Generated as internal constructor for term aluop_add_logical_zext32.
pub fn constructor_aluop_add_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3911.
        return ALUOp::AddLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical_zext32", "src/isa/s390x/inst.isle line 3910"
    )
}

// Generated as internal constructor for term add_logical_reg.
pub fn constructor_add_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3914.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_with_flags_paired.
pub fn constructor_add_logical_reg_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3917.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_reg_zext32.
pub fn constructor_add_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3921.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_zext32_with_flags_paired.
pub fn constructor_add_logical_reg_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3924.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_zimm32.
pub fn constructor_add_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3928.
    return v4;
}

// Generated as internal constructor for term add_logical_zimm32_with_flags_paired.
pub fn constructor_add_logical_zimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_ruimm32_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3931.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem.
pub fn constructor_add_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3935.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_with_flags_paired.
pub fn constructor_add_logical_mem_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3938.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem_zext32.
pub fn constructor_add_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3942.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_zext32_with_flags_paired.
pub fn constructor_add_logical_mem_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3945.
    return v4.clone();
}

// Generated as internal constructor for term aluop_sub.
pub fn constructor_aluop_sub<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3952.
            return ALUOp::Sub32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3953.
            return ALUOp::Sub32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3954.
            return ALUOp::Sub32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3955.
            return ALUOp::Sub64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub", "src/isa/s390x/inst.isle line 3951"
    )
}

// Generated as internal constructor for term aluop_sub_sext16.
pub fn constructor_aluop_sub_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3958.
            return ALUOp::Sub32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3959.
            return ALUOp::Sub32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3960.
            return ALUOp::Sub64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext16", "src/isa/s390x/inst.isle line 3957"
    )
}

// Generated as internal constructor for term aluop_sub_sext32.
pub fn constructor_aluop_sub_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3963.
        return ALUOp::Sub64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext32", "src/isa/s390x/inst.isle line 3962"
    )
}

// Generated as internal constructor for term sub_reg.
pub fn constructor_sub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3966.
    return v4;
}

// Generated as internal constructor for term sub_reg_sext32.
pub fn constructor_sub_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3969.
    return v4;
}

// Generated as internal constructor for term sub_mem.
pub fn constructor_sub_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3972.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext16.
pub fn constructor_sub_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3975.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext32.
pub fn constructor_sub_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3978.
    return v4;
}

// Generated as internal constructor for term vecop_sub.
pub fn constructor_vecop_sub<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 3985.
            return VecBinaryOp::Sub128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3981.
            return VecBinaryOp::Sub8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3982.
            return VecBinaryOp::Sub16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3983.
            return VecBinaryOp::Sub32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3984.
            return VecBinaryOp::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_sub", "src/isa/s390x/inst.isle line 3980"
    )
}

// Generated as internal constructor for term vec_sub.
pub fn constructor_vec_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_sub(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3988.
    return v4;
}

// Generated as internal constructor for term aluop_sub_logical.
pub fn constructor_aluop_sub_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3994.
            return ALUOp::SubLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3995.
            return ALUOp::SubLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical", "src/isa/s390x/inst.isle line 3993"
    )
}

// Generated as internal constructor for term aluop_sub_logical_zext32.
pub fn constructor_aluop_sub_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3998.
        return ALUOp::SubLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical_zext32", "src/isa/s390x/inst.isle line 3997"
    )
}

// Generated as internal constructor for term sub_logical_reg.
pub fn constructor_sub_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4001.
    return v4;
}

// Generated as internal constructor for term sub_logical_reg_zext32.
pub fn constructor_sub_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4004.
    return v4;
}

// Generated as internal constructor for term sub_logical_zimm32.
pub fn constructor_sub_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4007.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem.
pub fn constructor_sub_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4010.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem_zext32.
pub fn constructor_sub_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4013.
    return v4;
}

// Generated as internal constructor for term aluop_mul.
pub fn constructor_aluop_mul<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4019.
            return ALUOp::Mul32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4020.
            return ALUOp::Mul32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4021.
            return ALUOp::Mul32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4022.
            return ALUOp::Mul64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul", "src/isa/s390x/inst.isle line 4018"
    )
}

// Generated as internal constructor for term aluop_mul_sext16.
pub fn constructor_aluop_mul_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4025.
            return ALUOp::Mul32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4026.
            return ALUOp::Mul32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4027.
            return ALUOp::Mul64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext16", "src/isa/s390x/inst.isle line 4024"
    )
}

// Generated as internal constructor for term aluop_mul_sext32.
pub fn constructor_aluop_mul_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4030.
        return ALUOp::Mul64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext32", "src/isa/s390x/inst.isle line 4029"
    )
}

// Generated as internal constructor for term mul_reg.
pub fn constructor_mul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4033.
    return v4;
}

// Generated as internal constructor for term mul_reg_sext32.
pub fn constructor_mul_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4036.
    return v4;
}

// Generated as internal constructor for term mul_simm16.
pub fn constructor_mul_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4039.
    return v4;
}

// Generated as internal constructor for term mul_simm32.
pub fn constructor_mul_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4042.
    return v4;
}

// Generated as internal constructor for term mul_mem.
pub fn constructor_mul_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4045.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext16.
pub fn constructor_mul_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4048.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext32.
pub fn constructor_mul_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4051.
    return v4;
}

// Generated as internal constructor for term vecop_mul.
pub fn constructor_vecop_mul<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4054.
            return VecBinaryOp::Mul8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4055.
            return VecBinaryOp::Mul16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4056.
            return VecBinaryOp::Mul32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_mul", "src/isa/s390x/inst.isle line 4053"
    )
}

// Generated as internal constructor for term vec_mul.
pub fn constructor_vec_mul<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_mul(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4060.
    return v4;
}

// Generated as internal constructor for term vecop_umulhi.
pub fn constructor_vecop_umulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4063.
            return VecBinaryOp::UMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4064.
            return VecBinaryOp::UMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4065.
            return VecBinaryOp::UMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umulhi", "src/isa/s390x/inst.isle line 4062"
    )
}

// Generated as internal constructor for term vec_umulhi.
pub fn constructor_vec_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4069.
    return v4;
}

// Generated as internal constructor for term vecop_smulhi.
pub fn constructor_vecop_smulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4072.
            return VecBinaryOp::SMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4073.
            return VecBinaryOp::SMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4074.
            return VecBinaryOp::SMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smulhi", "src/isa/s390x/inst.isle line 4071"
    )
}

// Generated as internal constructor for term vec_smulhi.
pub fn constructor_vec_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4078.
    return v4;
}

// Generated as internal constructor for term vecop_umul_even.
pub fn constructor_vecop_umul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4081.
            return VecBinaryOp::UMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4082.
            return VecBinaryOp::UMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4083.
            return VecBinaryOp::UMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_even", "src/isa/s390x/inst.isle line 4080"
    )
}

// Generated as internal constructor for term vec_umul_even.
pub fn constructor_vec_umul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4087.
    return v4;
}

// Generated as internal constructor for term vecop_smul_even.
pub fn constructor_vecop_smul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4090.
            return VecBinaryOp::SMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4091.
            return VecBinaryOp::SMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4092.
            return VecBinaryOp::SMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_even", "src/isa/s390x/inst.isle line 4089"
    )
}

// Generated as internal constructor for term vec_smul_even.
pub fn constructor_vec_smul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4096.
    return v4;
}

// Generated as internal constructor for term vecop_umul_odd.
pub fn constructor_vecop_umul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4099.
            return VecBinaryOp::UMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4100.
            return VecBinaryOp::UMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4101.
            return VecBinaryOp::UMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_odd", "src/isa/s390x/inst.isle line 4098"
    )
}

// Generated as internal constructor for term vec_umul_odd.
pub fn constructor_vec_umul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4105.
    return v4;
}

// Generated as internal constructor for term vecop_smul_odd.
pub fn constructor_vecop_smul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4108.
            return VecBinaryOp::SMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4109.
            return VecBinaryOp::SMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4110.
            return VecBinaryOp::SMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_odd", "src/isa/s390x/inst.isle line 4107"
    )
}

// Generated as internal constructor for term vec_smul_odd.
pub fn constructor_vec_smul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4114.
    return v4;
}

// Generated as internal constructor for term udivmod.
pub fn constructor_udivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: RegPair,
    arg2: Reg,
) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_udivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4120.
            return v3;
        }
        I64 => {
            let v4 = constructor_udivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4121.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "udivmod", "src/isa/s390x/inst.isle line 4119"
    )
}

// Generated as internal constructor for term sdivmod.
pub fn constructor_sdivmod<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_sdivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4127.
            return v3;
        }
        I64 => {
            let v4 = constructor_sdivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4128.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sdivmod", "src/isa/s390x/inst.isle line 4126"
    )
}

// Generated as internal constructor for term vecop_umax.
pub fn constructor_vecop_umax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4134.
            return VecBinaryOp::UMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4135.
            return VecBinaryOp::UMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4136.
            return VecBinaryOp::UMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4137.
            return VecBinaryOp::UMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umax", "src/isa/s390x/inst.isle line 4133"
    )
}

// Generated as internal constructor for term vec_umax.
pub fn constructor_vec_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4140.
    return v4;
}

// Generated as internal constructor for term vecop_smax.
pub fn constructor_vecop_smax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4146.
            return VecBinaryOp::SMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4147.
            return VecBinaryOp::SMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4148.
            return VecBinaryOp::SMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4149.
            return VecBinaryOp::SMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smax", "src/isa/s390x/inst.isle line 4145"
    )
}

// Generated as internal constructor for term vec_smax.
pub fn constructor_vec_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4152.
    return v4;
}

// Generated as internal constructor for term vecop_umin.
pub fn constructor_vecop_umin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4158.
            return VecBinaryOp::UMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4159.
            return VecBinaryOp::UMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4160.
            return VecBinaryOp::UMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4161.
            return VecBinaryOp::UMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umin", "src/isa/s390x/inst.isle line 4157"
    )
}

// Generated as internal constructor for term vec_umin.
pub fn constructor_vec_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4164.
    return v4;
}

// Generated as internal constructor for term vecop_smin.
pub fn constructor_vecop_smin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4170.
            return VecBinaryOp::SMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4171.
            return VecBinaryOp::SMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4172.
            return VecBinaryOp::SMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4173.
            return VecBinaryOp::SMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smin", "src/isa/s390x/inst.isle line 4169"
    )
}

// Generated as internal constructor for term vec_smin.
pub fn constructor_vec_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4176.
    return v4;
}

// Generated as internal constructor for term vecop_uavg.
pub fn constructor_vecop_uavg<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4182.
            return VecBinaryOp::UAvg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4183.
            return VecBinaryOp::UAvg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4184.
            return VecBinaryOp::UAvg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4185.
            return VecBinaryOp::UAvg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_uavg", "src/isa/s390x/inst.isle line 4181"
    )
}

// Generated as internal constructor for term vec_uavg.
pub fn constructor_vec_uavg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_uavg(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4188.
    return v4;
}

// Generated as internal constructor for term aluop_and.
pub fn constructor_aluop_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4195.
        return ALUOp::And64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4194.
        return ALUOp::And32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and", "src/isa/s390x/inst.isle line 4193"
    )
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4198.
    return v4;
}

// Generated as internal constructor for term and_uimm16shifted.
pub fn constructor_and_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4201.
    return v4;
}

// Generated as internal constructor for term and_uimm32shifted.
pub fn constructor_and_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4204.
    return v4;
}

// Generated as internal constructor for term and_mem.
pub fn constructor_and_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4207.
    return v4;
}

// Generated as internal constructor for term vec_and.
pub fn constructor_vec_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::And128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4210.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and", "src/isa/s390x/inst.isle line 4209"
    )
}

// Generated as internal constructor for term aluop_or.
pub fn constructor_aluop_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4217.
        return ALUOp::Orr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4216.
        return ALUOp::Orr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or", "src/isa/s390x/inst.isle line 4215"
    )
}

// Generated as internal constructor for term or_reg.
pub fn constructor_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4220.
    return v4;
}

// Generated as internal constructor for term or_uimm16shifted.
pub fn constructor_or_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4223.
    return v4;
}

// Generated as internal constructor for term or_uimm32shifted.
pub fn constructor_or_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4226.
    return v4;
}

// Generated as internal constructor for term or_mem.
pub fn constructor_or_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4229.
    return v4;
}

// Generated as internal constructor for term vec_or.
pub fn constructor_vec_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Orr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4232.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or", "src/isa/s390x/inst.isle line 4231"
    )
}

// Generated as internal constructor for term aluop_xor.
pub fn constructor_aluop_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4239.
        return ALUOp::Xor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4238.
        return ALUOp::Xor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_xor", "src/isa/s390x/inst.isle line 4237"
    )
}

// Generated as internal constructor for term xor_reg.
pub fn constructor_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4242.
    return v4;
}

// Generated as internal constructor for term xor_uimm32shifted.
pub fn constructor_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4245.
    return v4;
}

// Generated as internal constructor for term xor_mem.
pub fn constructor_xor_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4248.
    return v4;
}

// Generated as internal constructor for term push_xor_uimm32shifted.
pub fn constructor_push_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v5 = &constructor_aluop_xor(ctx, arg1);
    let v6 = constructor_push_alu_uimm32shifted(ctx, arg0, v5, arg2, arg3, arg4);
    // Rule at src/isa/s390x/inst.isle line 4251.
    return v6;
}

// Generated as internal constructor for term vec_xor.
pub fn constructor_vec_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Xor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4255.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_xor", "src/isa/s390x/inst.isle line 4254"
    )
}

// Generated as internal constructor for term not_reg.
pub fn constructor_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v10 = constructor_xor_uimm32shifted(ctx, v9, arg1, v6);
        let v12 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v13 = constructor_xor_uimm32shifted(ctx, v9, v10, v12);
        // Rule at src/isa/s390x/inst.isle line 4263.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v7 = constructor_xor_uimm32shifted(ctx, v2, arg1, v6);
        // Rule at src/isa/s390x/inst.isle line 4261.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "not_reg", "src/isa/s390x/inst.isle line 4260"
    )
}

// Generated as internal constructor for term push_not_reg.
pub fn constructor_push_not_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg1);
    if let Some(v11) = v10 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v12 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, arg3, v8);
        let v14 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v15 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, v12, v14);
        // Rule at src/isa/s390x/inst.isle line 4271.
        return v15;
    }
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, v3, arg2, arg3, v8);
        // Rule at src/isa/s390x/inst.isle line 4269.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_not_reg", "src/isa/s390x/inst.isle line 4268"
    )
}

// Generated as internal constructor for term vec_not.
pub fn constructor_vec_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_vec_not_or(ctx, arg0, arg1, arg1);
    // Rule at src/isa/s390x/inst.isle line 4276.
    return v2;
}

// Generated as internal constructor for term aluop_not_and.
pub fn constructor_aluop_not_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4283.
        return ALUOp::NotAnd64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4282.
        return ALUOp::NotAnd32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_and", "src/isa/s390x/inst.isle line 4281"
    )
}

// Generated as internal constructor for term not_and_reg.
pub fn constructor_not_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4286.
    return v4;
}

// Generated as internal constructor for term vec_not_and.
pub fn constructor_vec_not_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotAnd128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4289.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_and", "src/isa/s390x/inst.isle line 4288"
    )
}

// Generated as internal constructor for term aluop_not_or.
pub fn constructor_aluop_not_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4296.
        return ALUOp::NotOrr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4295.
        return ALUOp::NotOrr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_or", "src/isa/s390x/inst.isle line 4294"
    )
}

// Generated as internal constructor for term not_or_reg.
pub fn constructor_not_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4299.
    return v4;
}

// Generated as internal constructor for term vec_not_or.
pub fn constructor_vec_not_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotOrr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4302.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_or", "src/isa/s390x/inst.isle line 4301"
    )
}

// Generated as internal constructor for term aluop_not_xor.
pub fn constructor_aluop_not_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4309.
        return ALUOp::NotXor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4308.
        return ALUOp::NotXor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_xor", "src/isa/s390x/inst.isle line 4307"
    )
}

// Generated as internal constructor for term not_xor_reg.
pub fn constructor_not_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4312.
    return v4;
}

// Generated as internal constructor for term vec_not_xor.
pub fn constructor_vec_not_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotXor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4315.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_xor", "src/isa/s390x/inst.isle line 4314"
    )
}

// Generated as internal constructor for term aluop_and_not.
pub fn constructor_aluop_and_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4322.
        return ALUOp::AndNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4321.
        return ALUOp::AndNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and_not", "src/isa/s390x/inst.isle line 4320"
    )
}

// Generated as internal constructor for term and_not_reg.
pub fn constructor_and_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4325.
    return v4;
}

// Generated as internal constructor for term vec_and_not.
pub fn constructor_vec_and_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::AndNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4328.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and_not", "src/isa/s390x/inst.isle line 4327"
    )
}

// Generated as internal constructor for term aluop_or_not.
pub fn constructor_aluop_or_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4335.
        return ALUOp::OrrNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4334.
        return ALUOp::OrrNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or_not", "src/isa/s390x/inst.isle line 4333"
    )
}

// Generated as internal constructor for term or_not_reg.
pub fn constructor_or_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4338.
    return v4;
}

// Generated as internal constructor for term vec_or_not.
pub fn constructor_vec_or_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::OrrNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4341.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or_not", "src/isa/s390x/inst.isle line 4340"
    )
}

// Generated as internal constructor for term vec_bitpermute.
pub fn constructor_vec_bitpermute<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I64X2, &VecBinaryOp::BitPermute128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4347.
    return v4;
}

// Generated as internal constructor for term unaryop_abs.
pub fn constructor_unaryop_abs<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4353.
            return UnaryOp::Abs32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4354.
            return UnaryOp::Abs64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs", "src/isa/s390x/inst.isle line 4352"
    )
}

// Generated as internal constructor for term unaryop_abs_sext32.
pub fn constructor_unaryop_abs_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4357.
        return UnaryOp::Abs64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs_sext32", "src/isa/s390x/inst.isle line 4356"
    )
}

// Generated as internal constructor for term abs_reg.
pub fn constructor_abs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4360.
    return v3;
}

// Generated as internal constructor for term abs_reg_sext32.
pub fn constructor_abs_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4363.
    return v3;
}

// Generated as internal constructor for term vecop_abs.
pub fn constructor_vecop_abs<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4366.
            return VecUnaryOp::Abs8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4367.
            return VecUnaryOp::Abs16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4368.
            return VecUnaryOp::Abs32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4369.
            return VecUnaryOp::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_abs", "src/isa/s390x/inst.isle line 4365"
    )
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_abs(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4372.
    return v3;
}

// Generated as internal constructor for term unaryop_neg.
pub fn constructor_unaryop_neg<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4378.
            return UnaryOp::Neg32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4379.
            return UnaryOp::Neg32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4380.
            return UnaryOp::Neg32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4381.
            return UnaryOp::Neg64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg", "src/isa/s390x/inst.isle line 4377"
    )
}

// Generated as internal constructor for term unaryop_neg_sext32.
pub fn constructor_unaryop_neg_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4384.
        return UnaryOp::Neg64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg_sext32", "src/isa/s390x/inst.isle line 4383"
    )
}

// Generated as internal constructor for term neg_reg.
pub fn constructor_neg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4387.
    return v3;
}

// Generated as internal constructor for term neg_reg_sext32.
pub fn constructor_neg_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4390.
    return v3;
}

// Generated as internal constructor for term vecop_neg.
pub fn constructor_vecop_neg<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4393.
            return VecUnaryOp::Neg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4394.
            return VecUnaryOp::Neg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4395.
            return VecUnaryOp::Neg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4396.
            return VecUnaryOp::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_neg", "src/isa/s390x/inst.isle line 4392"
    )
}

// Generated as internal constructor for term vec_neg.
pub fn constructor_vec_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_neg(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4399.
    return v3;
}

// Generated as internal constructor for term unaryop_bswap.
pub fn constructor_unaryop_bswap<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4405.
            return UnaryOp::BSwap32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4406.
            return UnaryOp::BSwap64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_bswap", "src/isa/s390x/inst.isle line 4404"
    )
}

// Generated as internal constructor for term bswap_reg.
pub fn constructor_bswap_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_bswap(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4409.
    return v3;
}

// Generated as internal constructor for term push_bswap_reg.
pub fn constructor_push_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_unaryop_bswap(ctx, arg1);
    let v5 = constructor_push_unary(ctx, arg0, v4, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4412.
    return v5;
}

// Generated as internal constructor for term shiftop_rot.
pub fn constructor_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4418.
            return ShiftOp::RotL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4419.
            return ShiftOp::RotL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_rot", "src/isa/s390x/inst.isle line 4417"
    )
}

// Generated as internal constructor for term rot_reg.
pub fn constructor_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4422.
    return v5;
}

// Generated as internal constructor for term rot_imm.
pub fn constructor_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4426.
    return v5;
}

// Generated as internal constructor for term rot_imm_reg.
pub fn constructor_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4430.
    return v5;
}

// Generated as internal constructor for term push_rot_imm_reg.
pub fn constructor_push_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v6 = &constructor_shiftop_rot(ctx, arg1);
    let v7 = constructor_push_shift(ctx, arg0, v6, arg2, arg3, arg4, arg5);
    // Rule at src/isa/s390x/inst.isle line 4434.
    return v7;
}

// Generated as internal constructor for term vec_shiftop_rot.
pub fn constructor_vec_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4438.
            return VecShiftOp::RotL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4439.
            return VecShiftOp::RotL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4440.
            return VecShiftOp::RotL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4441.
            return VecShiftOp::RotL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_rot", "src/isa/s390x/inst.isle line 4437"
    )
}

// Generated as internal constructor for term vec_rot_reg.
pub fn constructor_vec_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4444.
    return v5;
}

// Generated as internal constructor for term vec_rot_imm.
pub fn constructor_vec_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4448.
    return v5;
}

// Generated as internal constructor for term shiftop_lshl.
pub fn constructor_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4455.
            return ShiftOp::LShL32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4456.
            return ShiftOp::LShL32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4457.
            return ShiftOp::LShL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4458.
            return ShiftOp::LShL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshl", "src/isa/s390x/inst.isle line 4454"
    )
}

// Generated as internal constructor for term lshl_reg.
pub fn constructor_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4461.
    return v5;
}

// Generated as internal constructor for term lshl_imm.
pub fn constructor_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4465.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshl.
pub fn constructor_vec_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4469.
            return VecShiftOp::LShL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4470.
            return VecShiftOp::LShL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4471.
            return VecShiftOp::LShL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4472.
            return VecShiftOp::LShL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshl", "src/isa/s390x/inst.isle line 4468"
    )
}

// Generated as internal constructor for term vec_lshl_reg.
pub fn constructor_vec_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4475.
    return v5;
}

// Generated as internal constructor for term vec_lshl_imm.
pub fn constructor_vec_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4479.
    return v5;
}

// Generated as internal constructor for term vec_lshl_by_byte.
pub fn constructor_vec_lshl_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4483.
    return v4;
}

// Generated as internal constructor for term vec_lshl_by_bit.
pub fn constructor_vec_lshl_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4486.
    return v4;
}

// Generated as internal constructor for term shiftop_lshr.
pub fn constructor_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4492.
            return ShiftOp::LShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4493.
            return ShiftOp::LShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshr", "src/isa/s390x/inst.isle line 4491"
    )
}

// Generated as internal constructor for term lshr_reg.
pub fn constructor_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4496.
    return v5;
}

// Generated as internal constructor for term lshr_imm.
pub fn constructor_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4500.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshr.
pub fn constructor_vec_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4504.
            return VecShiftOp::LShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4505.
            return VecShiftOp::LShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4506.
            return VecShiftOp::LShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4507.
            return VecShiftOp::LShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshr", "src/isa/s390x/inst.isle line 4503"
    )
}

// Generated as internal constructor for term vec_lshr_reg.
pub fn constructor_vec_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4510.
    return v5;
}

// Generated as internal constructor for term vec_lshr_imm.
pub fn constructor_vec_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4514.
    return v5;
}

// Generated as internal constructor for term vec_lshr_by_byte.
pub fn constructor_vec_lshr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4518.
    return v4;
}

// Generated as internal constructor for term vec_lshr_by_bit.
pub fn constructor_vec_lshr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4521.
    return v4;
}

// Generated as internal constructor for term shiftop_ashr.
pub fn constructor_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4527.
            return ShiftOp::AShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4528.
            return ShiftOp::AShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_ashr", "src/isa/s390x/inst.isle line 4526"
    )
}

// Generated as internal constructor for term ashr_reg.
pub fn constructor_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4531.
    return v5;
}

// Generated as internal constructor for term ashr_imm.
pub fn constructor_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4535.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_ashr.
pub fn constructor_vec_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4539.
            return VecShiftOp::AShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4540.
            return VecShiftOp::AShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4541.
            return VecShiftOp::AShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4542.
            return VecShiftOp::AShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_ashr", "src/isa/s390x/inst.isle line 4538"
    )
}

// Generated as internal constructor for term vec_ashr_reg.
pub fn constructor_vec_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4545.
    return v5;
}

// Generated as internal constructor for term vec_ashr_imm.
pub fn constructor_vec_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4549.
    return v5;
}

// Generated as internal constructor for term vec_ashr_by_byte.
pub fn constructor_vec_ashr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4553.
    return v4;
}

// Generated as internal constructor for term vec_ashr_by_bit.
pub fn constructor_vec_ashr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4556.
    return v4;
}

// Generated as internal constructor for term popcnt_byte.
pub fn constructor_popcnt_byte<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntByte, arg0);
    // Rule at src/isa/s390x/inst.isle line 4562.
    return v3;
}

// Generated as internal constructor for term popcnt_reg.
pub fn constructor_popcnt_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntReg, arg0);
    // Rule at src/isa/s390x/inst.isle line 4565.
    return v3;
}

// Generated as internal constructor for term vecop_popcnt.
pub fn constructor_vecop_popcnt<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4568.
            return VecUnaryOp::Popcnt8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4569.
            return VecUnaryOp::Popcnt16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4570.
            return VecUnaryOp::Popcnt32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4571.
            return VecUnaryOp::Popcnt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_popcnt", "src/isa/s390x/inst.isle line 4567"
    )
}

// Generated as internal constructor for term vec_popcnt.
pub fn constructor_vec_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_popcnt(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4574.
    return v3;
}

// Generated as internal constructor for term atomic_rmw_and.
pub fn constructor_atomic_rmw_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::And32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4580.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::And64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4581.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_and", "src/isa/s390x/inst.isle line 4579"
    )
}

// Generated as internal constructor for term atomic_rmw_or.
pub fn constructor_atomic_rmw_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Orr32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4584.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Orr64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4585.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_or", "src/isa/s390x/inst.isle line 4583"
    )
}

// Generated as internal constructor for term atomic_rmw_xor.
pub fn constructor_atomic_rmw_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Xor32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4588.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Xor64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4589.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_xor", "src/isa/s390x/inst.isle line 4587"
    )
}

// Generated as internal constructor for term atomic_rmw_add.
pub fn constructor_atomic_rmw_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Add32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4592.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Add64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4593.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_add", "src/isa/s390x/inst.isle line 4591"
    )
}

// Generated as internal constructor for term atomic_cas_impl.
pub fn constructor_atomic_cas_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v4 = constructor_atomic_cas32(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4599.
            return v4;
        }
        I64 => {
            let v5 = constructor_atomic_cas64(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4600.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_impl", "src/isa/s390x/inst.isle line 4598"
    )
}

// Generated as internal constructor for term push_atomic_cas.
pub fn constructor_push_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: &MemArg,
) -> Reg {
    match arg1 {
        I32 => {
            let v5 = constructor_push_atomic_cas32(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4603.
            return v5;
        }
        I64 => {
            let v6 = constructor_push_atomic_cas64(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4604.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas", "src/isa/s390x/inst.isle line 4602"
    )
}

// Generated as internal constructor for term fpuop2_add.
pub fn constructor_fpuop2_add<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4610.
            return FPUOp2::Add32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4611.
            return FPUOp2::Add64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4612.
            return FPUOp2::Add32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4613.
            return FPUOp2::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_add", "src/isa/s390x/inst.isle line 4609"
    )
}

// Generated as internal constructor for term fadd_reg.
pub fn constructor_fadd_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_add(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4616.
    return v4;
}

// Generated as internal constructor for term fpuop2_sub.
pub fn constructor_fpuop2_sub<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4622.
            return FPUOp2::Sub32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4623.
            return FPUOp2::Sub64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4624.
            return FPUOp2::Sub32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4625.
            return FPUOp2::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_sub", "src/isa/s390x/inst.isle line 4621"
    )
}

// Generated as internal constructor for term fsub_reg.
pub fn constructor_fsub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_sub(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4628.
    return v4;
}

// Generated as internal constructor for term fpuop2_mul.
pub fn constructor_fpuop2_mul<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4634.
            return FPUOp2::Mul32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4635.
            return FPUOp2::Mul64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4636.
            return FPUOp2::Mul32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4637.
            return FPUOp2::Mul64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_mul", "src/isa/s390x/inst.isle line 4633"
    )
}

// Generated as internal constructor for term fmul_reg.
pub fn constructor_fmul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_mul(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4640.
    return v4;
}

// Generated as internal constructor for term fpuop2_div.
pub fn constructor_fpuop2_div<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4646.
            return FPUOp2::Div32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4647.
            return FPUOp2::Div64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4648.
            return FPUOp2::Div32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4649.
            return FPUOp2::Div64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_div", "src/isa/s390x/inst.isle line 4645"
    )
}

// Generated as internal constructor for term fdiv_reg.
pub fn constructor_fdiv_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_div(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4652.
    return v4;
}

// Generated as internal constructor for term fpuop2_min.
pub fn constructor_fpuop2_min<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4658.
            return FPUOp2::Min32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4659.
            return FPUOp2::Min64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4660.
            return FPUOp2::Min32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4661.
            return FPUOp2::Min64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min", "src/isa/s390x/inst.isle line 4657"
    )
}

// Generated as internal constructor for term fmin_reg.
pub fn constructor_fmin_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_min(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4664.
    return v4;
}

// Generated as internal constructor for term fpuop2_max.
pub fn constructor_fpuop2_max<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4670.
            return FPUOp2::Max32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4671.
            return FPUOp2::Max64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4672.
            return FPUOp2::Max32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4673.
            return FPUOp2::Max64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max", "src/isa/s390x/inst.isle line 4669"
    )
}

// Generated as internal constructor for term fmax_reg.
pub fn constructor_fmax_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_max(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4676.
    return v4;
}

// Generated as internal constructor for term fpuop2_min_pseudo.
pub fn constructor_fpuop2_min_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4682.
            return FPUOp2::MinPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4683.
            return FPUOp2::MinPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4684.
            return FPUOp2::MinPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4685.
            return FPUOp2::MinPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min_pseudo", "src/isa/s390x/inst.isle line 4681"
    )
}

// Generated as internal constructor for term fmin_pseudo_reg.
pub fn constructor_fmin_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_min_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4688.
    return v4;
}

// Generated as internal constructor for term fpuop2_max_pseudo.
pub fn constructor_fpuop2_max_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4694.
            return FPUOp2::MaxPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4695.
            return FPUOp2::MaxPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4696.
            return FPUOp2::MaxPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4697.
            return FPUOp2::MaxPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max_pseudo", "src/isa/s390x/inst.isle line 4693"
    )
}

// Generated as internal constructor for term fmax_pseudo_reg.
pub fn constructor_fmax_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_max_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4700.
    return v4;
}

// Generated as internal constructor for term fpuop3_fma.
pub fn constructor_fpuop3_fma<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp3 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4706.
            return FPUOp3::MAdd32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4707.
            return FPUOp3::MAdd64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4708.
            return FPUOp3::MAdd32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4709.
            return FPUOp3::MAdd64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop3_fma", "src/isa/s390x/inst.isle line 4705"
    )
}

// Generated as internal constructor for term fma_reg.
pub fn constructor_fma_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_fpuop3_fma(ctx, arg0);
    let v5 = constructor_fpu_rrrr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4712.
    return v5;
}

// Generated as internal constructor for term fpuop1_sqrt.
pub fn constructor_fpuop1_sqrt<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4718.
            return FPUOp1::Sqrt32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4719.
            return FPUOp1::Sqrt64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4720.
            return FPUOp1::Sqrt32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4721.
            return FPUOp1::Sqrt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_sqrt", "src/isa/s390x/inst.isle line 4717"
    )
}

// Generated as internal constructor for term sqrt_reg.
pub fn constructor_sqrt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_sqrt(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4724.
    return v3;
}

// Generated as internal constructor for term fpuop1_neg.
pub fn constructor_fpuop1_neg<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4730.
            return FPUOp1::Neg32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4731.
            return FPUOp1::Neg64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4732.
            return FPUOp1::Neg32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4733.
            return FPUOp1::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_neg", "src/isa/s390x/inst.isle line 4729"
    )
}

// Generated as internal constructor for term fneg_reg.
pub fn constructor_fneg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_neg(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4736.
    return v3;
}

// Generated as internal constructor for term fpuop1_abs.
pub fn constructor_fpuop1_abs<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4742.
            return FPUOp1::Abs32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4743.
            return FPUOp1::Abs64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4744.
            return FPUOp1::Abs32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4745.
            return FPUOp1::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_abs", "src/isa/s390x/inst.isle line 4741"
    )
}

// Generated as internal constructor for term fabs_reg.
pub fn constructor_fabs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_abs(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4748.
    return v3;
}

// Generated as internal constructor for term fpuroundop_round.
pub fn constructor_fpuroundop_round<C: Context>(ctx: &mut C, arg0: Type) -> FpuRoundOp {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4754.
            return FpuRoundOp::Round32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4755.
            return FpuRoundOp::Round64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4756.
            return FpuRoundOp::Round32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4757.
            return FpuRoundOp::Round64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuroundop_round", "src/isa/s390x/inst.isle line 4753"
    )
}

// Generated as internal constructor for term ceil_reg.
pub fn constructor_ceil_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToPosInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4760.
    return v4;
}

// Generated as internal constructor for term floor_reg.
pub fn constructor_floor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNegInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4764.
    return v4;
}

// Generated as internal constructor for term trunc_reg.
pub fn constructor_trunc_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToZero, arg1);
    // Rule at src/isa/s390x/inst.isle line 4768.
    return v4;
}

// Generated as internal constructor for term nearest_reg.
pub fn constructor_nearest_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNearestTiesToEven, arg1);
    // Rule at src/isa/s390x/inst.isle line 4772.
    return v4;
}

// Generated as internal constructor for term fpromote_reg.
pub fn constructor_fpromote_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4779.
        return arg2;
    }
    match arg0 {
        F64 => {
            if arg1 == F32 {
                let v5 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32To64, arg2);
                // Rule at src/isa/s390x/inst.isle line 4780.
                return v5;
            }
        }
        F64X2 => {
            if arg1 == F32X4 {
                let v7 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32x4To64x2, arg2);
                // Rule at src/isa/s390x/inst.isle line 4782.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpromote_reg", "src/isa/s390x/inst.isle line 4778"
    )
}

// Generated as internal constructor for term fdemote_reg.
pub fn constructor_fdemote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4789.
        return arg3;
    }
    match arg0 {
        F32 => {
            if arg1 == F64 {
                let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::Cvt64To32, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4790.
                return v6;
            }
        }
        F32X4 => {
            if arg1 == F64X2 {
                let v9 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::Cvt64x2To32x4, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4792.
                return v9;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fdemote_reg", "src/isa/s390x/inst.isle line 4788"
    )
}

// Generated as internal constructor for term fcvt_from_uint_reg.
pub fn constructor_fcvt_from_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromUInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4799.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromUInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4801.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4803.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4805.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_uint_reg", "src/isa/s390x/inst.isle line 4798"
    )
}

// Generated as internal constructor for term fcvt_from_sint_reg.
pub fn constructor_fcvt_from_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromSInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4812.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromSInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4814.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4816.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4818.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_sint_reg", "src/isa/s390x/inst.isle line 4811"
    )
}

// Generated as internal constructor for term fcvt_flt_ty.
pub fn constructor_fcvt_flt_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4825.
                    return F32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4826.
                return F64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4827.
                return F64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_flt_ty", "src/isa/s390x/inst.isle line 4824"
    )
}

// Generated as internal constructor for term fcvt_int_ty.
pub fn constructor_fcvt_int_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4830.
                    return I32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4831.
                return I64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4832.
                return I64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_int_ty", "src/isa/s390x/inst.isle line 4829"
    )
}

// Generated as internal constructor for term fcvt_to_uint_reg.
pub fn constructor_fcvt_to_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToUInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, I32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4838.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToUInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, I64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4840.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4842.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4844.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_reg", "src/isa/s390x/inst.isle line 4837"
    )
}

// Generated as internal constructor for term fcvt_to_uint_ub.
pub fn constructor_fcvt_to_uint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_uint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4848.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_uint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4850.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_ub", "src/isa/s390x/inst.isle line 4847"
    )
}

// Generated as internal constructor for term fcvt_to_uint_lb.
pub fn constructor_fcvt_to_uint_lb<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        F32 => {
            let v2 = C::fcvt_to_uint_lb32(ctx);
            let v3 = constructor_imm(ctx, F32, v2);
            // Rule at src/isa/s390x/inst.isle line 4854.
            return v3;
        }
        F64 => {
            let v5 = C::fcvt_to_uint_lb64(ctx);
            let v6 = constructor_imm(ctx, F64, v5);
            // Rule at src/isa/s390x/inst.isle line 4855.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_lb", "src/isa/s390x/inst.isle line 4853"
    )
}

// Generated as internal constructor for term fcvt_to_sint_reg.
pub fn constructor_fcvt_to_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToSInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, F32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4870.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToSInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, F64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4872.
            return v14;
        }
        F32X4 => {
            let v16 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4874.
            return v16;
        }
        F64X2 => {
            let v18 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4876.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_reg", "src/isa/s390x/inst.isle line 4869"
    )
}

// Generated as internal constructor for term fcvt_to_sint_ub.
pub fn constructor_fcvt_to_sint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4880.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4882.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_ub", "src/isa/s390x/inst.isle line 4879"
    )
}

// Generated as internal constructor for term fcvt_to_sint_lb.
pub fn constructor_fcvt_to_sint_lb<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_lb32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4886.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_lb64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4888.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_lb", "src/isa/s390x/inst.isle line 4885"
    )
}

// Generated as internal constructor for term cmpop_cmps.
pub fn constructor_cmpop_cmps<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4904.
            return CmpOp::CmpS32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4905.
            return CmpOp::CmpS64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps", "src/isa/s390x/inst.isle line 4903"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext16.
pub fn constructor_cmpop_cmps_sext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4908.
            return CmpOp::CmpS32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4909.
            return CmpOp::CmpS64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext16", "src/isa/s390x/inst.isle line 4907"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext32.
pub fn constructor_cmpop_cmps_sext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4912.
        return CmpOp::CmpS64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext32", "src/isa/s390x/inst.isle line 4911"
    )
}

// Generated as internal constructor for term icmps_reg.
pub fn constructor_icmps_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4915.
    return v4.clone();
}

// Generated as internal constructor for term icmps_reg_sext32.
pub fn constructor_icmps_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4918.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm16.
pub fn constructor_icmps_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm16(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4921.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm32.
pub fn constructor_icmps_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4924.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem.
pub fn constructor_icmps_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4927.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext16.
pub fn constructor_icmps_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4930.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext32.
pub fn constructor_icmps_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4933.
    return v4.clone();
}

// Generated as internal constructor for term cmpop_cmpu.
pub fn constructor_cmpop_cmpu<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4939.
            return CmpOp::CmpL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4940.
            return CmpOp::CmpL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu", "src/isa/s390x/inst.isle line 4938"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext16.
pub fn constructor_cmpop_cmpu_zext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4943.
            return CmpOp::CmpL32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4944.
            return CmpOp::CmpL64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext16", "src/isa/s390x/inst.isle line 4942"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext32.
pub fn constructor_cmpop_cmpu_zext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4947.
        return CmpOp::CmpL64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext32", "src/isa/s390x/inst.isle line 4946"
    )
}

// Generated as internal constructor for term icmpu_reg.
pub fn constructor_icmpu_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4950.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_reg_zext32.
pub fn constructor_icmpu_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4953.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_uimm32.
pub fn constructor_icmpu_uimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_ruimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4956.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem.
pub fn constructor_icmpu_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4959.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext16.
pub fn constructor_icmpu_mem_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4962.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext32.
pub fn constructor_icmpu_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4965.
    return v4.clone();
}

// Generated as internal constructor for term vecop_int_cmpeq.
pub fn constructor_vecop_int_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4971.
                    return VecIntCmpOp::CmpEq8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4972.
                    return VecIntCmpOp::CmpEq16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4973.
                    return VecIntCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4974.
                    return VecIntCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmpeq", "src/isa/s390x/inst.isle line 4970"
    )
}

// Generated as internal constructor for term vec_cmpeq.
pub fn constructor_vec_cmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4977.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeq", "src/isa/s390x/inst.isle line 4976"
    )
}

// Generated as internal constructor for term vec_cmpeqs.
pub fn constructor_vec_cmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4979.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeqs", "src/isa/s390x/inst.isle line 4978"
    )
}

// Generated as internal constructor for term vecop_int_cmph.
pub fn constructor_vecop_int_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4982.
                    return VecIntCmpOp::SCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4983.
                    return VecIntCmpOp::SCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4984.
                    return VecIntCmpOp::SCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4985.
                    return VecIntCmpOp::SCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmph", "src/isa/s390x/inst.isle line 4981"
    )
}

// Generated as internal constructor for term vec_cmph.
pub fn constructor_vec_cmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4988.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmph", "src/isa/s390x/inst.isle line 4987"
    )
}

// Generated as internal constructor for term vec_cmphs.
pub fn constructor_vec_cmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4990.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphs", "src/isa/s390x/inst.isle line 4989"
    )
}

// Generated as internal constructor for term vecop_int_cmphl.
pub fn constructor_vecop_int_cmphl<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4993.
                    return VecIntCmpOp::UCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4994.
                    return VecIntCmpOp::UCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4995.
                    return VecIntCmpOp::UCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4996.
                    return VecIntCmpOp::UCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmphl", "src/isa/s390x/inst.isle line 4992"
    )
}

// Generated as internal constructor for term vec_cmphl.
pub fn constructor_vec_cmphl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4999.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphl", "src/isa/s390x/inst.isle line 4998"
    )
}

// Generated as internal constructor for term vec_cmphls.
pub fn constructor_vec_cmphls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5001.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphls", "src/isa/s390x/inst.isle line 5000"
    )
}

// Generated as internal constructor for term fcmp_reg.
pub fn constructor_fcmp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v3 = &constructor_fpu_cmp32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5007.
            return v3.clone();
        }
        F64 => {
            let v4 = &constructor_fpu_cmp64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5008.
            return v4.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_reg", "src/isa/s390x/inst.isle line 5006"
    )
}

// Generated as internal constructor for term vecop_float_cmpeq.
pub fn constructor_vecop_float_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5014.
                    return VecFloatCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5015.
                    return VecFloatCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmpeq", "src/isa/s390x/inst.isle line 5013"
    )
}

// Generated as internal constructor for term vec_fcmpeq.
pub fn constructor_vec_fcmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5018.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeq", "src/isa/s390x/inst.isle line 5017"
    )
}

// Generated as internal constructor for term vec_fcmpeqs.
pub fn constructor_vec_fcmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5020.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeqs", "src/isa/s390x/inst.isle line 5019"
    )
}

// Generated as internal constructor for term vecop_float_cmph.
pub fn constructor_vecop_float_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5023.
                    return VecFloatCmpOp::CmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5024.
                    return VecFloatCmpOp::CmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmph", "src/isa/s390x/inst.isle line 5022"
    )
}

// Generated as internal constructor for term vec_fcmph.
pub fn constructor_vec_fcmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5027.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmph", "src/isa/s390x/inst.isle line 5026"
    )
}

// Generated as internal constructor for term vec_fcmphs.
pub fn constructor_vec_fcmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5029.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphs", "src/isa/s390x/inst.isle line 5028"
    )
}

// Generated as internal constructor for term vecop_float_cmphe.
pub fn constructor_vecop_float_cmphe<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5032.
                    return VecFloatCmpOp::CmpHiEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5033.
                    return VecFloatCmpOp::CmpHiEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmphe", "src/isa/s390x/inst.isle line 5031"
    )
}

// Generated as internal constructor for term vec_fcmphe.
pub fn constructor_vec_fcmphe<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5036.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphe", "src/isa/s390x/inst.isle line 5035"
    )
}

// Generated as internal constructor for term vec_fcmphes.
pub fn constructor_vec_fcmphes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5038.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphes", "src/isa/s390x/inst.isle line 5037"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1664,
            args: ref v1665,
            flags: v1666,
        } => {
            if let &Opcode::AtomicCas = v1664 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v507 = C::ty_32_or_64(ctx, v3);
                    if let Some(v508) = v507 {
                        let v1671 = C::bigendian(ctx, v1666);
                        if let Some(v1672) = v1671 {
                            let v1667 = C::unpack_value_array_3(ctx, v1665);
                            let v1673 = C::put_in_reg(ctx, v1667.1);
                            let v1674 = C::put_in_reg(ctx, v1667.2);
                            let v1625 = C::zero_offset(ctx);
                            let v1675 = &constructor_lower_address(ctx, v1666, v1667.0, v1625);
                            let v1676 = constructor_atomic_cas_impl(ctx, v508, v1673, v1674, v1675);
                            let v1677 = constructor_output_reg(ctx, v1676);
                            // Rule at src/isa/s390x/lower.isle line 3131.
                            return Some(v1677);
                        }
                        let v1678 = C::littleendian(ctx, v1666);
                        if let Some(v1679) = v1678 {
                            let v1667 = C::unpack_value_array_3(ctx, v1665);
                            let v1673 = C::put_in_reg(ctx, v1667.1);
                            let v1680 = constructor_bswap_reg(ctx, v508, v1673);
                            let v1681 = C::put_in_reg(ctx, v1667.2);
                            let v1682 = constructor_bswap_reg(ctx, v508, v1681);
                            let v1683 = C::zero_offset(ctx);
                            let v1684 = &constructor_lower_address(ctx, v1666, v1667.0, v1683);
                            let v1685 = constructor_atomic_cas_impl(ctx, v508, v1680, v1682, v1684);
                            let v1686 = constructor_bswap_reg(ctx, v508, v1685);
                            let v1687 = constructor_output_reg(ctx, v1686);
                            // Rule at src/isa/s390x/lower.isle line 3138.
                            return Some(v1687);
                        }
                    }
                    let v368 = C::ty_8_or_16(ctx, v3);
                    if let Some(v369) = v368 {
                        let v1667 = C::unpack_value_array_3(ctx, v1665);
                        let v1673 = C::put_in_reg(ctx, v1667.1);
                        let v1674 = C::put_in_reg(ctx, v1667.2);
                        let v1688 = C::put_in_reg(ctx, v1667.0);
                        let v1689 = constructor_casloop_bitshift(ctx, v1688);
                        let v1690 = constructor_casloop_aligned_addr(ctx, v1688);
                        let v1691 = &C::inst_builder_new(ctx);
                        let v1692 = constructor_casloop_val_reg(ctx);
                        let v1693 = C::writable_reg_to_reg(ctx, v1692);
                        let v1694 =
                            constructor_casloop_rotate_in(ctx, v1691, v369, v1666, v1689, v1693);
                        let v1695 = constructor_casloop_tmp_reg(ctx);
                        let v1696 = constructor_atomic_cas_body(
                            ctx, v1691, v369, v1666, v1695, v1694, v1673, v1674,
                        );
                        let v1697 =
                            constructor_casloop_rotate_out(ctx, v1691, v369, v1666, v1689, v1696);
                        let v1698 = constructor_casloop_subword(
                            ctx, v1691, v369, v1666, v1690, v1689, v1697,
                        );
                        let v1699 = constructor_output_reg(ctx, v1698);
                        // Rule at src/isa/s390x/lower.isle line 3145.
                        return Some(v1699);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1608,
            args: ref v1609,
            flags: v1610,
            op: ref v1611,
        } => {
            if let &Opcode::AtomicRmw = v1608 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v507 = C::ty_32_or_64(ctx, v3);
                    if let Some(v508) = v507 {
                        match v1611 {
                            &AtomicRmwOp::Add => {
                                let v1615 = C::bigendian(ctx, v1610);
                                if let Some(v1616) = v1615 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1618 = C::zero_offset(ctx);
                                    let v1619 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1618);
                                    let v1640 = constructor_atomic_rmw_add(ctx, v508, v1617, v1619);
                                    let v1641 = constructor_output_reg(ctx, v1640);
                                    // Rule at src/isa/s390x/lower.isle line 2911.
                                    return Some(v1641);
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v1615 = C::bigendian(ctx, v1610);
                                if let Some(v1616) = v1615 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1618 = C::zero_offset(ctx);
                                    let v1619 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1618);
                                    let v1620 = constructor_atomic_rmw_and(ctx, v508, v1617, v1619);
                                    let v1621 = constructor_output_reg(ctx, v1620);
                                    // Rule at src/isa/s390x/lower.isle line 2875.
                                    return Some(v1621);
                                }
                                let v1622 = C::littleendian(ctx, v1610);
                                if let Some(v1623) = v1622 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1624 = constructor_bswap_reg(ctx, v508, v1617);
                                    let v1625 = C::zero_offset(ctx);
                                    let v1626 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1625);
                                    let v1627 = constructor_atomic_rmw_and(ctx, v508, v1624, v1626);
                                    let v1628 = constructor_bswap_reg(ctx, v508, v1627);
                                    let v1629 = constructor_output_reg(ctx, v1628);
                                    // Rule at src/isa/s390x/lower.isle line 2881.
                                    return Some(v1629);
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v1615 = C::bigendian(ctx, v1610);
                                if let Some(v1616) = v1615 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1618 = C::zero_offset(ctx);
                                    let v1619 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1618);
                                    let v1630 = constructor_atomic_rmw_or(ctx, v508, v1617, v1619);
                                    let v1631 = constructor_output_reg(ctx, v1630);
                                    // Rule at src/isa/s390x/lower.isle line 2887.
                                    return Some(v1631);
                                }
                                let v1622 = C::littleendian(ctx, v1610);
                                if let Some(v1623) = v1622 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1624 = constructor_bswap_reg(ctx, v508, v1617);
                                    let v1625 = C::zero_offset(ctx);
                                    let v1626 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1625);
                                    let v1632 = constructor_atomic_rmw_or(ctx, v508, v1624, v1626);
                                    let v1633 = constructor_bswap_reg(ctx, v508, v1632);
                                    let v1634 = constructor_output_reg(ctx, v1633);
                                    // Rule at src/isa/s390x/lower.isle line 2893.
                                    return Some(v1634);
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v1615 = C::bigendian(ctx, v1610);
                                if let Some(v1616) = v1615 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1642 = constructor_neg_reg(ctx, v508, v1617);
                                    let v1625 = C::zero_offset(ctx);
                                    let v1626 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1625);
                                    let v1643 = constructor_atomic_rmw_add(ctx, v508, v1642, v1626);
                                    let v1644 = constructor_output_reg(ctx, v1643);
                                    // Rule at src/isa/s390x/lower.isle line 2917.
                                    return Some(v1644);
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v1615 = C::bigendian(ctx, v1610);
                                if let Some(v1616) = v1615 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1618 = C::zero_offset(ctx);
                                    let v1619 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1618);
                                    let v1635 = constructor_atomic_rmw_xor(ctx, v508, v1617, v1619);
                                    let v1636 = constructor_output_reg(ctx, v1635);
                                    // Rule at src/isa/s390x/lower.isle line 2899.
                                    return Some(v1636);
                                }
                                let v1622 = C::littleendian(ctx, v1610);
                                if let Some(v1623) = v1622 {
                                    let v1612 = C::unpack_value_array_2(ctx, v1609);
                                    let v1617 = C::put_in_reg(ctx, v1612.1);
                                    let v1624 = constructor_bswap_reg(ctx, v508, v1617);
                                    let v1625 = C::zero_offset(ctx);
                                    let v1626 =
                                        &constructor_lower_address(ctx, v1610, v1612.0, v1625);
                                    let v1637 = constructor_atomic_rmw_xor(ctx, v508, v1624, v1626);
                                    let v1638 = constructor_bswap_reg(ctx, v508, v1637);
                                    let v1639 = constructor_output_reg(ctx, v1638);
                                    // Rule at src/isa/s390x/lower.isle line 2905.
                                    return Some(v1639);
                                }
                            }
                            _ => {}
                        }
                        let v1612 = C::unpack_value_array_2(ctx, v1609);
                        let v1617 = C::put_in_reg(ctx, v1612.1);
                        let v1645 = C::put_in_reg(ctx, v1612.0);
                        let v1646 = &C::inst_builder_new(ctx);
                        let v1647 = constructor_casloop_val_reg(ctx);
                        let v1649 = constructor_casloop_tmp_reg(ctx);
                        let v1648 = C::writable_reg_to_reg(ctx, v1647);
                        let v1650 = constructor_atomic_rmw_body(
                            ctx, v1646, v508, v1610, v1611, v1649, v1648, v1617,
                        );
                        let v1651 = constructor_casloop(ctx, v1646, v508, v1610, v1645, v1650);
                        let v1652 = constructor_output_reg(ctx, v1651);
                        // Rule at src/isa/s390x/lower.isle line 2926.
                        return Some(v1652);
                    }
                    let v368 = C::ty_8_or_16(ctx, v3);
                    if let Some(v369) = v368 {
                        let v1612 = C::unpack_value_array_2(ctx, v1609);
                        let v1617 = C::put_in_reg(ctx, v1612.1);
                        let v1645 = C::put_in_reg(ctx, v1612.0);
                        let v1653 = constructor_casloop_bitshift(ctx, v1645);
                        let v1654 = constructor_casloop_aligned_addr(ctx, v1645);
                        let v1655 = &C::inst_builder_new(ctx);
                        let v1656 = constructor_casloop_val_reg(ctx);
                        let v1657 = C::writable_reg_to_reg(ctx, v1656);
                        let v1658 =
                            constructor_casloop_rotate_in(ctx, v1655, v369, v1610, v1653, v1657);
                        let v1659 = constructor_casloop_tmp_reg(ctx);
                        let v1660 = constructor_atomic_rmw_body(
                            ctx, v1655, v369, v1610, v1611, v1659, v1658, v1617,
                        );
                        let v1661 =
                            constructor_casloop_rotate_out(ctx, v1655, v369, v1610, v1653, v1660);
                        let v1662 = constructor_casloop_subword(
                            ctx, v1655, v369, v1610, v1654, v1653, v1661,
                        );
                        let v1663 = constructor_output_reg(ctx, v1662);
                        // Rule at src/isa/s390x/lower.isle line 2938.
                        return Some(v1663);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v38,
            args: ref v39,
        } => {
            match v38 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v1433 = &C::lane_order(ctx);
                            match v1433 {
                                &LaneOrder::LittleEndian => {
                                    let v1440 = constructor_vec_imm(ctx, v150, 0x0);
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v44 = C::put_in_reg(ctx, v40.0);
                                    let v1442 = constructor_vec_imm_splat(ctx, I8X16, 0xEF);
                                    let v394 = C::put_in_reg(ctx, v40.1);
                                    let v1443 = constructor_vec_not(ctx, I8X16, v394);
                                    let v1444 = constructor_vec_umax(ctx, I8X16, v1442, v1443);
                                    let v1445 =
                                        constructor_vec_permute(ctx, v150, v1440, v44, v1444);
                                    let v1446 = constructor_output_reg(ctx, v1445);
                                    // Rule at src/isa/s390x/lower.isle line 2228.
                                    return Some(v1446);
                                }
                                &LaneOrder::BigEndian => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v63 = C::put_in_reg(ctx, v40.0);
                                    let v1434 = constructor_vec_imm(ctx, v150, 0x0);
                                    let v1436 = constructor_vec_imm_splat(ctx, I8X16, 0x10);
                                    let v394 = C::put_in_reg(ctx, v40.1);
                                    let v1437 = constructor_vec_umin(ctx, I8X16, v1436, v394);
                                    let v1438 =
                                        constructor_vec_permute(ctx, v150, v63, v1434, v1437);
                                    let v1439 = constructor_output_reg(ctx, v1438);
                                    // Rule at src/isa/s390x/lower.isle line 2209.
                                    return Some(v1439);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v311 = constructor_put_in_reg_sext32(ctx, v40.0);
                            let v312 = constructor_put_in_reg_sext32(ctx, v40.1);
                            let v289 = constructor_ty_ext32(ctx, v62);
                            let v313 = &constructor_icmps_reg(ctx, v289, v311, v312);
                            let v325 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                            let v326 = &constructor_bool(ctx, v313, v325);
                            let v327 = constructor_select_bool_reg(ctx, v62, v326, v312, v311);
                            let v328 = constructor_output_reg(ctx, v327);
                            // Rule at src/isa/s390x/lower.isle line 316.
                            return Some(v328);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v329 = &constructor_vec_int128_scmphi(ctx, v63, v64);
                            let v330 = constructor_select_bool_reg(ctx, I128, v329, v64, v63);
                            let v331 = constructor_output_reg(ctx, v330);
                            // Rule at src/isa/s390x/lower.isle line 324.
                            return Some(v331);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v332 = constructor_vec_smin(ctx, v150, v63, v64);
                            let v333 = constructor_output_reg(ctx, v332);
                            // Rule at src/isa/s390x/lower.isle line 331.
                            return Some(v333);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v288 = constructor_put_in_reg_zext32(ctx, v40.1);
                            let v289 = constructor_ty_ext32(ctx, v62);
                            let v290 = &constructor_icmpu_reg(ctx, v289, v287, v288);
                            let v302 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                            let v303 = &constructor_bool(ctx, v290, v302);
                            let v304 = constructor_select_bool_reg(ctx, v62, v303, v288, v287);
                            let v305 = constructor_output_reg(ctx, v304);
                            // Rule at src/isa/s390x/lower.isle line 272.
                            return Some(v305);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v306 = &constructor_vec_int128_ucmphi(ctx, v63, v64);
                            let v307 = constructor_select_bool_reg(ctx, I128, v306, v64, v63);
                            let v308 = constructor_output_reg(ctx, v307);
                            // Rule at src/isa/s390x/lower.isle line 280.
                            return Some(v308);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v309 = constructor_vec_umin(ctx, v150, v63, v64);
                            let v310 = constructor_output_reg(ctx, v309);
                            // Rule at src/isa/s390x/lower.isle line 287.
                            return Some(v310);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v311 = constructor_put_in_reg_sext32(ctx, v40.0);
                            let v312 = constructor_put_in_reg_sext32(ctx, v40.1);
                            let v289 = constructor_ty_ext32(ctx, v62);
                            let v313 = &constructor_icmps_reg(ctx, v289, v311, v312);
                            let v315 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                            let v316 = &constructor_bool(ctx, v313, v315);
                            let v317 = constructor_select_bool_reg(ctx, v62, v316, v312, v311);
                            let v318 = constructor_output_reg(ctx, v317);
                            // Rule at src/isa/s390x/lower.isle line 294.
                            return Some(v318);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v319 = &constructor_vec_int128_scmphi(ctx, v64, v63);
                            let v320 = constructor_select_bool_reg(ctx, I128, v319, v64, v63);
                            let v321 = constructor_output_reg(ctx, v320);
                            // Rule at src/isa/s390x/lower.isle line 302.
                            return Some(v321);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v322 = constructor_vec_smax(ctx, v150, v63, v64);
                            let v323 = constructor_output_reg(ctx, v322);
                            // Rule at src/isa/s390x/lower.isle line 309.
                            return Some(v323);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v288 = constructor_put_in_reg_zext32(ctx, v40.1);
                            let v289 = constructor_ty_ext32(ctx, v62);
                            let v290 = &constructor_icmpu_reg(ctx, v289, v287, v288);
                            let v292 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
                            let v293 = &constructor_bool(ctx, v290, v292);
                            let v294 = constructor_select_bool_reg(ctx, v62, v293, v288, v287);
                            let v295 = constructor_output_reg(ctx, v294);
                            // Rule at src/isa/s390x/lower.isle line 250.
                            return Some(v295);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v296 = &constructor_vec_int128_ucmphi(ctx, v64, v63);
                            let v297 = constructor_select_bool_reg(ctx, I128, v296, v64, v63);
                            let v298 = constructor_output_reg(ctx, v297);
                            // Rule at src/isa/s390x/lower.isle line 258.
                            return Some(v298);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v299 = constructor_vec_umax(ctx, v150, v63, v64);
                            let v300 = constructor_output_reg(ctx, v299);
                            // Rule at src/isa/s390x/lower.isle line 265.
                            return Some(v300);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v334 = constructor_vec_uavg(ctx, v150, v63, v64);
                            let v335 = constructor_output_reg(ctx, v334);
                            // Rule at src/isa/s390x/lower.isle line 338.
                            return Some(v335);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v151 = constructor_vec_add(ctx, v150, v63, v64);
                            let v152 = C::put_in_reg(ctx, v40.0);
                            let v153 = constructor_vec_cmphl(ctx, v150, v152, v151);
                            let v154 = constructor_vec_or(ctx, v150, v151, v153);
                            let v155 = constructor_output_reg(ctx, v154);
                            // Rule at src/isa/s390x/lower.isle line 116.
                            return Some(v155);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v156 = constructor_vec_widen_type(ctx, v150);
                            let v157 = constructor_vec_widen_type(ctx, v150);
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v158 = C::put_in_reg(ctx, v40.0);
                            let v159 = constructor_vec_unpacks_high(ctx, v150, v158);
                            let v160 = C::put_in_reg(ctx, v40.1);
                            let v161 = constructor_vec_unpacks_high(ctx, v150, v160);
                            let v162 = constructor_vec_add(ctx, v157, v159, v161);
                            let v163 = constructor_vec_widen_type(ctx, v150);
                            let v164 = C::put_in_reg(ctx, v40.0);
                            let v165 = constructor_vec_unpacks_low(ctx, v150, v164);
                            let v166 = C::put_in_reg(ctx, v40.1);
                            let v167 = constructor_vec_unpacks_low(ctx, v150, v166);
                            let v168 = constructor_vec_add(ctx, v163, v165, v167);
                            let v169 = constructor_vec_pack_ssat(ctx, v156, v162, v168);
                            let v170 = constructor_output_reg(ctx, v169);
                            // Rule at src/isa/s390x/lower.isle line 124.
                            return Some(v170);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v248 = constructor_vec_sub(ctx, v150, v63, v64);
                            let v152 = C::put_in_reg(ctx, v40.0);
                            let v160 = C::put_in_reg(ctx, v40.1);
                            let v249 = constructor_vec_cmphl(ctx, v150, v152, v160);
                            let v250 = constructor_vec_and(ctx, v150, v248, v249);
                            let v251 = constructor_output_reg(ctx, v250);
                            // Rule at src/isa/s390x/lower.isle line 188.
                            return Some(v251);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v156 = constructor_vec_widen_type(ctx, v150);
                            let v157 = constructor_vec_widen_type(ctx, v150);
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v158 = C::put_in_reg(ctx, v40.0);
                            let v159 = constructor_vec_unpacks_high(ctx, v150, v158);
                            let v160 = C::put_in_reg(ctx, v40.1);
                            let v161 = constructor_vec_unpacks_high(ctx, v150, v160);
                            let v252 = constructor_vec_sub(ctx, v157, v159, v161);
                            let v163 = constructor_vec_widen_type(ctx, v150);
                            let v164 = C::put_in_reg(ctx, v40.0);
                            let v165 = constructor_vec_unpacks_low(ctx, v150, v164);
                            let v166 = C::put_in_reg(ctx, v40.1);
                            let v167 = constructor_vec_unpacks_low(ctx, v150, v166);
                            let v253 = constructor_vec_sub(ctx, v163, v165, v167);
                            let v254 = constructor_vec_pack_ssat(ctx, v156, v252, v253);
                            let v255 = constructor_output_reg(ctx, v254);
                            // Rule at src/isa/s390x/lower.isle line 195.
                            return Some(v255);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v76 = C::def_inst(ctx, v40.0);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Sextend = v79 {
                                        let v81 = C::value_type(ctx, v80);
                                        if v81 == I32 {
                                            let v43 = C::put_in_reg(ctx, v40.1);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v83 =
                                                constructor_add_reg_sext32(ctx, v62, v43, v82);
                                            let v84 = constructor_output_reg(ctx, v83);
                                            // Rule at src/isa/s390x/lower.isle line 73.
                                            return Some(v84);
                                        }
                                    }
                                }
                            }
                            let v89 = C::i16_from_value(ctx, v40.0);
                            if let Some(v90) = v89 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v91 = constructor_add_simm16(ctx, v62, v43, v90);
                                let v92 = constructor_output_reg(ctx, v91);
                                // Rule at src/isa/s390x/lower.isle line 79.
                                return Some(v92);
                            }
                            let v97 = C::i32_from_value(ctx, v40.0);
                            if let Some(v98) = v97 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v99 = constructor_add_simm32(ctx, v62, v43, v98);
                                let v100 = constructor_output_reg(ctx, v99);
                                // Rule at src/isa/s390x/lower.isle line 83.
                                return Some(v100);
                            }
                            let v119 = C::sinkable_inst(ctx, v40.0);
                            if let Some(v120) = v119 {
                                let v121 = &C::inst_data(ctx, v120);
                                if let &InstructionData::Load {
                                    opcode: ref v122,
                                    arg: v123,
                                    flags: v124,
                                    offset: v125,
                                } = v121
                                {
                                    match v122 {
                                        &Opcode::Load => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v116 = C::value_type(ctx, v40.0);
                                                let v117 = C::ty_32_or_64(ctx, v116);
                                                if let Some(v118) = v117 {
                                                    let v43 = C::put_in_reg(ctx, v40.1);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v129 =
                                                        constructor_add_mem(ctx, v62, v43, v128);
                                                    let v130 = constructor_output_reg(ctx, v129);
                                                    // Rule at src/isa/s390x/lower.isle line 89.
                                                    return Some(v130);
                                                }
                                                if v116 == I16 {
                                                    let v43 = C::put_in_reg(ctx, v40.1);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v133 = constructor_add_mem_sext16(
                                                        ctx, v62, v43, v128,
                                                    );
                                                    let v134 = constructor_output_reg(ctx, v133);
                                                    // Rule at src/isa/s390x/lower.isle line 95.
                                                    return Some(v134);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v43 = C::put_in_reg(ctx, v40.1);
                                                let v138 = &constructor_sink_sload16(ctx, v120);
                                                let v139 =
                                                    constructor_add_mem_sext16(ctx, v62, v43, v138);
                                                let v140 = constructor_output_reg(ctx, v139);
                                                // Rule at src/isa/s390x/lower.isle line 101.
                                                return Some(v140);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v43 = C::put_in_reg(ctx, v40.1);
                                                let v144 = &constructor_sink_sload32(ctx, v120);
                                                let v145 =
                                                    constructor_add_mem_sext32(ctx, v62, v43, v144);
                                                let v146 = constructor_output_reg(ctx, v145);
                                                // Rule at src/isa/s390x/lower.isle line 105.
                                                return Some(v146);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v67 = C::def_inst(ctx, v40.1);
                            if let Some(v68) = v67 {
                                let v69 = &C::inst_data(ctx, v68);
                                if let &InstructionData::Unary {
                                    opcode: ref v70,
                                    arg: v71,
                                } = v69
                                {
                                    if let &Opcode::Sextend = v70 {
                                        let v72 = C::value_type(ctx, v71);
                                        if v72 == I32 {
                                            let v63 = C::put_in_reg(ctx, v40.0);
                                            let v73 = C::put_in_reg(ctx, v71);
                                            let v74 =
                                                constructor_add_reg_sext32(ctx, v62, v63, v73);
                                            let v75 = constructor_output_reg(ctx, v74);
                                            // Rule at src/isa/s390x/lower.isle line 71.
                                            return Some(v75);
                                        }
                                    }
                                }
                            }
                            let v85 = C::i16_from_value(ctx, v40.1);
                            if let Some(v86) = v85 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v87 = constructor_add_simm16(ctx, v62, v63, v86);
                                let v88 = constructor_output_reg(ctx, v87);
                                // Rule at src/isa/s390x/lower.isle line 77.
                                return Some(v88);
                            }
                            let v93 = C::i32_from_value(ctx, v40.1);
                            if let Some(v94) = v93 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v95 = constructor_add_simm32(ctx, v62, v63, v94);
                                let v96 = constructor_output_reg(ctx, v95);
                                // Rule at src/isa/s390x/lower.isle line 81.
                                return Some(v96);
                            }
                            let v104 = C::sinkable_inst(ctx, v40.1);
                            if let Some(v105) = v104 {
                                let v106 = &C::inst_data(ctx, v105);
                                if let &InstructionData::Load {
                                    opcode: ref v107,
                                    arg: v108,
                                    flags: v109,
                                    offset: v110,
                                } = v106
                                {
                                    match v107 {
                                        &Opcode::Load => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v101 = C::value_type(ctx, v40.1);
                                                let v102 = C::ty_32_or_64(ctx, v101);
                                                if let Some(v103) = v102 {
                                                    let v63 = C::put_in_reg(ctx, v40.0);
                                                    let v113 = &constructor_sink_load(ctx, v105);
                                                    let v114 =
                                                        constructor_add_mem(ctx, v62, v63, v113);
                                                    let v115 = constructor_output_reg(ctx, v114);
                                                    // Rule at src/isa/s390x/lower.isle line 87.
                                                    return Some(v115);
                                                }
                                                if v101 == I16 {
                                                    let v63 = C::put_in_reg(ctx, v40.0);
                                                    let v113 = &constructor_sink_load(ctx, v105);
                                                    let v131 = constructor_add_mem_sext16(
                                                        ctx, v62, v63, v113,
                                                    );
                                                    let v132 = constructor_output_reg(ctx, v131);
                                                    // Rule at src/isa/s390x/lower.isle line 93.
                                                    return Some(v132);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v135 = &constructor_sink_sload16(ctx, v105);
                                                let v136 =
                                                    constructor_add_mem_sext16(ctx, v62, v63, v135);
                                                let v137 = constructor_output_reg(ctx, v136);
                                                // Rule at src/isa/s390x/lower.isle line 99.
                                                return Some(v137);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v141 = &constructor_sink_sload32(ctx, v105);
                                                let v142 =
                                                    constructor_add_mem_sext32(ctx, v62, v63, v141);
                                                let v143 = constructor_output_reg(ctx, v142);
                                                // Rule at src/isa/s390x/lower.isle line 103.
                                                return Some(v143);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v147 = constructor_vec_add(ctx, v37, v63, v64);
                            let v148 = constructor_output_reg(ctx, v147);
                            // Rule at src/isa/s390x/lower.isle line 109.
                            return Some(v148);
                        }
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v65 = constructor_add_reg(ctx, v62, v63, v64);
                            let v66 = constructor_output_reg(ctx, v65);
                            // Rule at src/isa/s390x/lower.isle line 67.
                            return Some(v66);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v67 = C::def_inst(ctx, v40.1);
                            if let Some(v68) = v67 {
                                let v69 = &C::inst_data(ctx, v68);
                                if let &InstructionData::Unary {
                                    opcode: ref v70,
                                    arg: v71,
                                } = v69
                                {
                                    if let &Opcode::Sextend = v70 {
                                        let v72 = C::value_type(ctx, v71);
                                        if v72 == I32 {
                                            let v63 = C::put_in_reg(ctx, v40.0);
                                            let v73 = C::put_in_reg(ctx, v71);
                                            let v228 =
                                                constructor_sub_reg_sext32(ctx, v62, v63, v73);
                                            let v229 = constructor_output_reg(ctx, v228);
                                            // Rule at src/isa/s390x/lower.isle line 157.
                                            return Some(v229);
                                        }
                                    }
                                }
                            }
                            let v230 = C::i16_from_negated_value(ctx, v40.1);
                            if let Some(v231) = v230 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v232 = constructor_add_simm16(ctx, v62, v63, v231);
                                let v233 = constructor_output_reg(ctx, v232);
                                // Rule at src/isa/s390x/lower.isle line 161.
                                return Some(v233);
                            }
                            let v234 = C::i32_from_negated_value(ctx, v40.1);
                            if let Some(v235) = v234 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v236 = constructor_add_simm32(ctx, v62, v63, v235);
                                let v237 = constructor_output_reg(ctx, v236);
                                // Rule at src/isa/s390x/lower.isle line 163.
                                return Some(v237);
                            }
                            let v104 = C::sinkable_inst(ctx, v40.1);
                            if let Some(v105) = v104 {
                                let v106 = &C::inst_data(ctx, v105);
                                if let &InstructionData::Load {
                                    opcode: ref v107,
                                    arg: v108,
                                    flags: v109,
                                    offset: v110,
                                } = v106
                                {
                                    match v107 {
                                        &Opcode::Load => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v101 = C::value_type(ctx, v40.1);
                                                let v102 = C::ty_32_or_64(ctx, v101);
                                                if let Some(v103) = v102 {
                                                    let v63 = C::put_in_reg(ctx, v40.0);
                                                    let v113 = &constructor_sink_load(ctx, v105);
                                                    let v238 =
                                                        constructor_sub_mem(ctx, v62, v63, v113);
                                                    let v239 = constructor_output_reg(ctx, v238);
                                                    // Rule at src/isa/s390x/lower.isle line 167.
                                                    return Some(v239);
                                                }
                                                if v101 == I16 {
                                                    let v63 = C::put_in_reg(ctx, v40.0);
                                                    let v113 = &constructor_sink_load(ctx, v105);
                                                    let v240 = constructor_sub_mem_sext16(
                                                        ctx, v62, v63, v113,
                                                    );
                                                    let v241 = constructor_output_reg(ctx, v240);
                                                    // Rule at src/isa/s390x/lower.isle line 171.
                                                    return Some(v241);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v135 = &constructor_sink_sload16(ctx, v105);
                                                let v242 =
                                                    constructor_sub_mem_sext16(ctx, v62, v63, v135);
                                                let v243 = constructor_output_reg(ctx, v242);
                                                // Rule at src/isa/s390x/lower.isle line 175.
                                                return Some(v243);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v141 = &constructor_sink_sload32(ctx, v105);
                                                let v244 =
                                                    constructor_sub_mem_sext32(ctx, v62, v63, v141);
                                                let v245 = constructor_output_reg(ctx, v244);
                                                // Rule at src/isa/s390x/lower.isle line 177.
                                                return Some(v245);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v246 = constructor_vec_sub(ctx, v37, v63, v64);
                            let v247 = constructor_output_reg(ctx, v246);
                            // Rule at src/isa/s390x/lower.isle line 181.
                            return Some(v247);
                        }
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v226 = constructor_sub_reg(ctx, v62, v63, v64);
                            let v227 = constructor_output_reg(ctx, v226);
                            // Rule at src/isa/s390x/lower.isle line 153.
                            return Some(v227);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v76 = C::def_inst(ctx, v40.0);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Sextend = v79 {
                                        let v81 = C::value_type(ctx, v80);
                                        if v81 == I32 {
                                            let v43 = C::put_in_reg(ctx, v40.1);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v340 =
                                                constructor_mul_reg_sext32(ctx, v62, v43, v82);
                                            let v341 = constructor_output_reg(ctx, v340);
                                            // Rule at src/isa/s390x/lower.isle line 351.
                                            return Some(v341);
                                        }
                                    }
                                }
                            }
                            let v89 = C::i16_from_value(ctx, v40.0);
                            if let Some(v90) = v89 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v344 = constructor_mul_simm16(ctx, v62, v43, v90);
                                let v345 = constructor_output_reg(ctx, v344);
                                // Rule at src/isa/s390x/lower.isle line 357.
                                return Some(v345);
                            }
                            let v97 = C::i32_from_value(ctx, v40.0);
                            if let Some(v98) = v97 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v348 = constructor_mul_simm32(ctx, v62, v43, v98);
                                let v349 = constructor_output_reg(ctx, v348);
                                // Rule at src/isa/s390x/lower.isle line 361.
                                return Some(v349);
                            }
                            let v119 = C::sinkable_inst(ctx, v40.0);
                            if let Some(v120) = v119 {
                                let v121 = &C::inst_data(ctx, v120);
                                if let &InstructionData::Load {
                                    opcode: ref v122,
                                    arg: v123,
                                    flags: v124,
                                    offset: v125,
                                } = v121
                                {
                                    match v122 {
                                        &Opcode::Load => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v116 = C::value_type(ctx, v40.0);
                                                let v117 = C::ty_32_or_64(ctx, v116);
                                                if let Some(v118) = v117 {
                                                    let v43 = C::put_in_reg(ctx, v40.1);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v352 =
                                                        constructor_mul_mem(ctx, v62, v43, v128);
                                                    let v353 = constructor_output_reg(ctx, v352);
                                                    // Rule at src/isa/s390x/lower.isle line 367.
                                                    return Some(v353);
                                                }
                                                if v116 == I16 {
                                                    let v43 = C::put_in_reg(ctx, v40.1);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v356 = constructor_mul_mem_sext16(
                                                        ctx, v62, v43, v128,
                                                    );
                                                    let v357 = constructor_output_reg(ctx, v356);
                                                    // Rule at src/isa/s390x/lower.isle line 373.
                                                    return Some(v357);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v43 = C::put_in_reg(ctx, v40.1);
                                                let v138 = &constructor_sink_sload16(ctx, v120);
                                                let v360 =
                                                    constructor_mul_mem_sext16(ctx, v62, v43, v138);
                                                let v361 = constructor_output_reg(ctx, v360);
                                                // Rule at src/isa/s390x/lower.isle line 379.
                                                return Some(v361);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v43 = C::put_in_reg(ctx, v40.1);
                                                let v144 = &constructor_sink_sload32(ctx, v120);
                                                let v364 =
                                                    constructor_mul_mem_sext32(ctx, v62, v43, v144);
                                                let v365 = constructor_output_reg(ctx, v364);
                                                // Rule at src/isa/s390x/lower.isle line 383.
                                                return Some(v365);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v67 = C::def_inst(ctx, v40.1);
                            if let Some(v68) = v67 {
                                let v69 = &C::inst_data(ctx, v68);
                                if let &InstructionData::Unary {
                                    opcode: ref v70,
                                    arg: v71,
                                } = v69
                                {
                                    if let &Opcode::Sextend = v70 {
                                        let v72 = C::value_type(ctx, v71);
                                        if v72 == I32 {
                                            let v63 = C::put_in_reg(ctx, v40.0);
                                            let v73 = C::put_in_reg(ctx, v71);
                                            let v338 =
                                                constructor_mul_reg_sext32(ctx, v62, v63, v73);
                                            let v339 = constructor_output_reg(ctx, v338);
                                            // Rule at src/isa/s390x/lower.isle line 349.
                                            return Some(v339);
                                        }
                                    }
                                }
                            }
                            let v85 = C::i16_from_value(ctx, v40.1);
                            if let Some(v86) = v85 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v342 = constructor_mul_simm16(ctx, v62, v63, v86);
                                let v343 = constructor_output_reg(ctx, v342);
                                // Rule at src/isa/s390x/lower.isle line 355.
                                return Some(v343);
                            }
                            let v93 = C::i32_from_value(ctx, v40.1);
                            if let Some(v94) = v93 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v346 = constructor_mul_simm32(ctx, v62, v63, v94);
                                let v347 = constructor_output_reg(ctx, v346);
                                // Rule at src/isa/s390x/lower.isle line 359.
                                return Some(v347);
                            }
                            let v104 = C::sinkable_inst(ctx, v40.1);
                            if let Some(v105) = v104 {
                                let v106 = &C::inst_data(ctx, v105);
                                if let &InstructionData::Load {
                                    opcode: ref v107,
                                    arg: v108,
                                    flags: v109,
                                    offset: v110,
                                } = v106
                                {
                                    match v107 {
                                        &Opcode::Load => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v101 = C::value_type(ctx, v40.1);
                                                let v102 = C::ty_32_or_64(ctx, v101);
                                                if let Some(v103) = v102 {
                                                    let v63 = C::put_in_reg(ctx, v40.0);
                                                    let v113 = &constructor_sink_load(ctx, v105);
                                                    let v350 =
                                                        constructor_mul_mem(ctx, v62, v63, v113);
                                                    let v351 = constructor_output_reg(ctx, v350);
                                                    // Rule at src/isa/s390x/lower.isle line 365.
                                                    return Some(v351);
                                                }
                                                if v101 == I16 {
                                                    let v63 = C::put_in_reg(ctx, v40.0);
                                                    let v113 = &constructor_sink_load(ctx, v105);
                                                    let v354 = constructor_mul_mem_sext16(
                                                        ctx, v62, v63, v113,
                                                    );
                                                    let v355 = constructor_output_reg(ctx, v354);
                                                    // Rule at src/isa/s390x/lower.isle line 371.
                                                    return Some(v355);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v135 = &constructor_sink_sload16(ctx, v105);
                                                let v358 =
                                                    constructor_mul_mem_sext16(ctx, v62, v63, v135);
                                                let v359 = constructor_output_reg(ctx, v358);
                                                // Rule at src/isa/s390x/lower.isle line 377.
                                                return Some(v359);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v141 = &constructor_sink_sload32(ctx, v105);
                                                let v362 =
                                                    constructor_mul_mem_sext32(ctx, v62, v63, v141);
                                                let v363 = constructor_output_reg(ctx, v362);
                                                // Rule at src/isa/s390x/lower.isle line 381.
                                                return Some(v363);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v366 = constructor_vec_mul_impl(ctx, v37, v63, v64);
                            let v367 = constructor_output_reg(ctx, v366);
                            // Rule at src/isa/s390x/lower.isle line 388.
                            return Some(v367);
                        }
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v336 = constructor_mul_reg(ctx, v62, v63, v64);
                            let v337 = constructor_output_reg(ctx, v336);
                            // Rule at src/isa/s390x/lower.isle line 345.
                            return Some(v337);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v375 = constructor_put_in_reg_zext64(ctx, v40.0);
                                let v376 = constructor_put_in_reg_zext64(ctx, v40.1);
                                let v378 = constructor_mul_reg(ctx, I64, v375, v376);
                                let v380 = constructor_lshr_imm(ctx, I64, v378, 0x20);
                                let v381 = constructor_output_reg(ctx, v380);
                                // Rule at src/isa/s390x/lower.isle line 429.
                                return Some(v381);
                            }
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v382 = constructor_umul_wide(ctx, v63, v64);
                                let v383 = C::regpair_hi(ctx, v382);
                                let v384 = constructor_output_reg(ctx, v383);
                                // Rule at src/isa/s390x/lower.isle line 436.
                                return Some(v384);
                            }
                            I8X16 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v385 = constructor_vec_umulhi(ctx, I8X16, v63, v64);
                                let v386 = constructor_output_reg(ctx, v385);
                                // Rule at src/isa/s390x/lower.isle line 441.
                                return Some(v386);
                            }
                            I16X8 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v388 = constructor_vec_umulhi(ctx, I16X8, v63, v64);
                                let v389 = constructor_output_reg(ctx, v388);
                                // Rule at src/isa/s390x/lower.isle line 442.
                                return Some(v389);
                            }
                            I32X4 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v391 = constructor_vec_umulhi(ctx, I32X4, v63, v64);
                                let v392 = constructor_output_reg(ctx, v391);
                                // Rule at src/isa/s390x/lower.isle line 443.
                                return Some(v392);
                            }
                            I64X2 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v53 = C::zero_reg(ctx);
                                let v393 = constructor_vec_extract_lane(ctx, I64X2, v63, 0x0, v53);
                                let v394 = C::put_in_reg(ctx, v40.1);
                                let v395 = C::zero_reg(ctx);
                                let v396 =
                                    constructor_vec_extract_lane(ctx, I64X2, v394, 0x0, v395);
                                let v397 = constructor_umul_wide(ctx, v393, v396);
                                let v398 = C::regpair_hi(ctx, v397);
                                let v164 = C::put_in_reg(ctx, v40.0);
                                let v399 = C::zero_reg(ctx);
                                let v400 =
                                    constructor_vec_extract_lane(ctx, I64X2, v164, 0x1, v399);
                                let v401 = C::put_in_reg(ctx, v40.1);
                                let v402 = C::zero_reg(ctx);
                                let v403 =
                                    constructor_vec_extract_lane(ctx, I64X2, v401, 0x1, v402);
                                let v404 = constructor_umul_wide(ctx, v400, v403);
                                let v405 = C::regpair_hi(ctx, v404);
                                let v406 = constructor_mov_to_vec128(ctx, I64X2, v398, v405);
                                let v407 = constructor_output_reg(ctx, v406);
                                // Rule at src/isa/s390x/lower.isle line 447.
                                return Some(v407);
                            }
                            _ => {}
                        }
                        let v368 = C::ty_8_or_16(ctx, v3);
                        if let Some(v369) = v368 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v288 = constructor_put_in_reg_zext32(ctx, v40.1);
                            let v371 = constructor_mul_reg(ctx, I32, v287, v288);
                            let v372 = C::ty_bits(ctx, v369);
                            let v373 = constructor_lshr_imm(ctx, I32, v371, v372);
                            let v374 = constructor_output_reg(ctx, v373);
                            // Rule at src/isa/s390x/lower.isle line 422.
                            return Some(v374);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v411 = constructor_put_in_reg_sext64(ctx, v40.0);
                                let v412 = constructor_put_in_reg_sext64(ctx, v40.1);
                                let v413 = constructor_mul_reg(ctx, I64, v411, v412);
                                let v414 = constructor_ashr_imm(ctx, I64, v413, 0x20);
                                let v415 = constructor_output_reg(ctx, v414);
                                // Rule at src/isa/s390x/lower.isle line 467.
                                return Some(v415);
                            }
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v416 = constructor_smul_wide(ctx, v63, v64);
                                let v417 = C::regpair_hi(ctx, v416);
                                let v418 = constructor_output_reg(ctx, v417);
                                // Rule at src/isa/s390x/lower.isle line 474.
                                return Some(v418);
                            }
                            I8X16 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v419 = constructor_vec_smulhi(ctx, I8X16, v63, v64);
                                let v420 = constructor_output_reg(ctx, v419);
                                // Rule at src/isa/s390x/lower.isle line 479.
                                return Some(v420);
                            }
                            I16X8 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v421 = constructor_vec_smulhi(ctx, I16X8, v63, v64);
                                let v422 = constructor_output_reg(ctx, v421);
                                // Rule at src/isa/s390x/lower.isle line 480.
                                return Some(v422);
                            }
                            I32X4 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v423 = constructor_vec_smulhi(ctx, I32X4, v63, v64);
                                let v424 = constructor_output_reg(ctx, v423);
                                // Rule at src/isa/s390x/lower.isle line 481.
                                return Some(v424);
                            }
                            I64X2 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v53 = C::zero_reg(ctx);
                                let v393 = constructor_vec_extract_lane(ctx, I64X2, v63, 0x0, v53);
                                let v394 = C::put_in_reg(ctx, v40.1);
                                let v395 = C::zero_reg(ctx);
                                let v396 =
                                    constructor_vec_extract_lane(ctx, I64X2, v394, 0x0, v395);
                                let v425 = constructor_smul_wide(ctx, v393, v396);
                                let v426 = C::regpair_hi(ctx, v425);
                                let v427 = constructor_copy_reg(ctx, I64, v426);
                                let v428 = C::put_in_reg(ctx, v40.0);
                                let v429 = C::zero_reg(ctx);
                                let v430 =
                                    constructor_vec_extract_lane(ctx, I64X2, v428, 0x1, v429);
                                let v431 = C::put_in_reg(ctx, v40.1);
                                let v432 = C::zero_reg(ctx);
                                let v433 =
                                    constructor_vec_extract_lane(ctx, I64X2, v431, 0x1, v432);
                                let v434 = constructor_smul_wide(ctx, v430, v433);
                                let v435 = C::regpair_hi(ctx, v434);
                                let v436 = constructor_mov_to_vec128(ctx, I64X2, v427, v435);
                                let v437 = constructor_output_reg(ctx, v436);
                                // Rule at src/isa/s390x/lower.isle line 485.
                                return Some(v437);
                            }
                            _ => {}
                        }
                        let v368 = C::ty_8_or_16(ctx, v3);
                        if let Some(v369) = v368 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v311 = constructor_put_in_reg_sext32(ctx, v40.0);
                            let v312 = constructor_put_in_reg_sext32(ctx, v40.1);
                            let v408 = constructor_mul_reg(ctx, I32, v311, v312);
                            let v372 = C::ty_bits(ctx, v369);
                            let v409 = constructor_ashr_imm(ctx, I32, v408, v372);
                            let v410 = constructor_output_reg(ctx, v409);
                            // Rule at src/isa/s390x/lower.isle line 460.
                            return Some(v410);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v156 = constructor_vec_widen_type(ctx, v150);
                            let v157 = constructor_vec_widen_type(ctx, v150);
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v158 = C::put_in_reg(ctx, v40.0);
                            let v159 = constructor_vec_unpacks_high(ctx, v150, v158);
                            let v160 = C::put_in_reg(ctx, v40.1);
                            let v161 = constructor_vec_unpacks_high(ctx, v150, v160);
                            let v438 = constructor_sqmul_impl(ctx, v157, v159, v161);
                            let v163 = constructor_vec_widen_type(ctx, v150);
                            let v164 = C::put_in_reg(ctx, v40.0);
                            let v165 = constructor_vec_unpacks_low(ctx, v150, v164);
                            let v166 = C::put_in_reg(ctx, v40.1);
                            let v167 = constructor_vec_unpacks_low(ctx, v150, v166);
                            let v439 = constructor_sqmul_impl(ctx, v163, v165, v167);
                            let v440 = constructor_vec_pack_ssat(ctx, v156, v438, v439);
                            let v441 = constructor_output_reg(ctx, v440);
                            // Rule at src/isa/s390x/lower.isle line 498.
                            return Some(v441);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v256 = constructor_ty_ext32(ctx, v62);
                            let v442 = constructor_imm(ctx, v256, 0x0);
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v443 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v444 = C::regpair(ctx, v442, v443);
                            let v445 = constructor_put_in_reg_zext32(ctx, v40.1);
                            let v446 = constructor_ty_ext32(ctx, v62);
                            let v447 = constructor_udivmod(ctx, v446, v444, v445);
                            let v448 = C::regpair_lo(ctx, v447);
                            let v449 = constructor_output_reg(ctx, v448);
                            // Rule at src/isa/s390x/lower.isle line 536.
                            return Some(v449);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v452 = constructor_div_overflow_check_needed(ctx, v40.1);
                            let v453 = constructor_put_in_reg_sext64(ctx, v40.0);
                            let v454 = constructor_put_in_reg_sext32(ctx, v40.1);
                            let v455 = constructor_ty_ext32(ctx, v62);
                            let v456 = constructor_maybe_trap_if_sdiv_overflow(
                                ctx, v452, v455, v62, v453, v454,
                            );
                            let v457 = constructor_sdivmod(ctx, v455, v453, v454);
                            let v458 = C::regpair_lo(ctx, v457);
                            let v459 = constructor_output_reg(ctx, v458);
                            // Rule at src/isa/s390x/lower.isle line 580.
                            return Some(v459);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v256 = constructor_ty_ext32(ctx, v62);
                            let v442 = constructor_imm(ctx, v256, 0x0);
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v443 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v444 = C::regpair(ctx, v442, v443);
                            let v445 = constructor_put_in_reg_zext32(ctx, v40.1);
                            let v446 = constructor_ty_ext32(ctx, v62);
                            let v447 = constructor_udivmod(ctx, v446, v444, v445);
                            let v450 = C::regpair_hi(ctx, v447);
                            let v451 = constructor_output_reg(ctx, v450);
                            // Rule at src/isa/s390x/lower.isle line 554.
                            return Some(v451);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v452 = constructor_div_overflow_check_needed(ctx, v40.1);
                            let v453 = constructor_put_in_reg_sext64(ctx, v40.0);
                            let v454 = constructor_put_in_reg_sext32(ctx, v40.1);
                            let v455 = constructor_ty_ext32(ctx, v62);
                            let v460 =
                                constructor_maybe_avoid_srem_overflow(ctx, v452, v455, v453, v454);
                            let v461 = constructor_sdivmod(ctx, v455, v460, v454);
                            let v462 = C::regpair_hi(ctx, v461);
                            let v463 = constructor_output_reg(ctx, v462);
                            // Rule at src/isa/s390x/lower.isle line 599.
                            return Some(v463);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v76 = C::def_inst(ctx, v40.0);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Bnot = v79 {
                                        let v43 = C::put_in_reg(ctx, v40.1);
                                        let v82 = C::put_in_reg(ctx, v80);
                                        let v675 = constructor_vec_and_not(ctx, v37, v43, v82);
                                        let v676 = constructor_output_reg(ctx, v675);
                                        // Rule at src/isa/s390x/lower.isle line 1032.
                                        return Some(v676);
                                    }
                                }
                            }
                            let v67 = C::def_inst(ctx, v40.1);
                            if let Some(v68) = v67 {
                                let v69 = &C::inst_data(ctx, v68);
                                if let &InstructionData::Unary {
                                    opcode: ref v70,
                                    arg: v71,
                                } = v69
                                {
                                    if let &Opcode::Bnot = v70 {
                                        let v63 = C::put_in_reg(ctx, v40.0);
                                        let v73 = C::put_in_reg(ctx, v71);
                                        let v673 = constructor_vec_and_not(ctx, v37, v63, v73);
                                        let v674 = constructor_output_reg(ctx, v673);
                                        // Rule at src/isa/s390x/lower.isle line 1030.
                                        return Some(v674);
                                    }
                                }
                            }
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v624 = C::mie2_enabled(ctx, v3);
                            if let Some(v625) = v624 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v76 = C::def_inst(ctx, v40.0);
                                if let Some(v77) = v76 {
                                    let v78 = &C::inst_data(ctx, v77);
                                    if let &InstructionData::Unary {
                                        opcode: ref v79,
                                        arg: v80,
                                    } = v78
                                    {
                                        if let &Opcode::Bnot = v79 {
                                            let v43 = C::put_in_reg(ctx, v40.1);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v671 = constructor_and_not_reg(ctx, v62, v43, v82);
                                            let v672 = constructor_output_reg(ctx, v671);
                                            // Rule at src/isa/s390x/lower.isle line 1026.
                                            return Some(v672);
                                        }
                                    }
                                }
                                let v67 = C::def_inst(ctx, v40.1);
                                if let Some(v68) = v67 {
                                    let v69 = &C::inst_data(ctx, v68);
                                    if let &InstructionData::Unary {
                                        opcode: ref v70,
                                        arg: v71,
                                    } = v69
                                    {
                                        if let &Opcode::Bnot = v70 {
                                            let v63 = C::put_in_reg(ctx, v40.0);
                                            let v73 = C::put_in_reg(ctx, v71);
                                            let v669 = constructor_and_not_reg(ctx, v62, v63, v73);
                                            let v670 = constructor_output_reg(ctx, v669);
                                            // Rule at src/isa/s390x/lower.isle line 1024.
                                            return Some(v670);
                                        }
                                    }
                                }
                            }
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v651 = C::uimm16shifted_from_inverted_value(ctx, v40.0);
                            if let Some(v652) = v651 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v653 = constructor_and_uimm16shifted(ctx, v62, v43, v652);
                                let v654 = constructor_output_reg(ctx, v653);
                                // Rule at src/isa/s390x/lower.isle line 1002.
                                return Some(v654);
                            }
                            let v647 = C::uimm16shifted_from_inverted_value(ctx, v40.1);
                            if let Some(v648) = v647 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v649 = constructor_and_uimm16shifted(ctx, v62, v63, v648);
                                let v650 = constructor_output_reg(ctx, v649);
                                // Rule at src/isa/s390x/lower.isle line 1000.
                                return Some(v650);
                            }
                            let v659 = C::uimm32shifted_from_inverted_value(ctx, v40.0);
                            if let Some(v660) = v659 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v661 = constructor_and_uimm32shifted(ctx, v62, v43, v660);
                                let v662 = constructor_output_reg(ctx, v661);
                                // Rule at src/isa/s390x/lower.isle line 1006.
                                return Some(v662);
                            }
                            let v655 = C::uimm32shifted_from_inverted_value(ctx, v40.1);
                            if let Some(v656) = v655 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v657 = constructor_and_uimm32shifted(ctx, v62, v63, v656);
                                let v658 = constructor_output_reg(ctx, v657);
                                // Rule at src/isa/s390x/lower.isle line 1004.
                                return Some(v658);
                            }
                            let v116 = C::value_type(ctx, v40.0);
                            let v117 = C::ty_32_or_64(ctx, v116);
                            if let Some(v118) = v117 {
                                let v119 = C::sinkable_inst(ctx, v40.0);
                                if let Some(v120) = v119 {
                                    let v121 = &C::inst_data(ctx, v120);
                                    if let &InstructionData::Load {
                                        opcode: ref v122,
                                        arg: v123,
                                        flags: v124,
                                        offset: v125,
                                    } = v121
                                    {
                                        if let &Opcode::Load = v122 {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v43 = C::put_in_reg(ctx, v40.1);
                                                let v128 = &constructor_sink_load(ctx, v120);
                                                let v665 = constructor_and_mem(ctx, v62, v43, v128);
                                                let v666 = constructor_output_reg(ctx, v665);
                                                // Rule at src/isa/s390x/lower.isle line 1012.
                                                return Some(v666);
                                            }
                                        }
                                    }
                                }
                            }
                            let v101 = C::value_type(ctx, v40.1);
                            let v102 = C::ty_32_or_64(ctx, v101);
                            if let Some(v103) = v102 {
                                let v104 = C::sinkable_inst(ctx, v40.1);
                                if let Some(v105) = v104 {
                                    let v106 = &C::inst_data(ctx, v105);
                                    if let &InstructionData::Load {
                                        opcode: ref v107,
                                        arg: v108,
                                        flags: v109,
                                        offset: v110,
                                    } = v106
                                    {
                                        if let &Opcode::Load = v107 {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v113 = &constructor_sink_load(ctx, v105);
                                                let v663 = constructor_and_mem(ctx, v62, v63, v113);
                                                let v664 = constructor_output_reg(ctx, v663);
                                                // Rule at src/isa/s390x/lower.isle line 1010.
                                                return Some(v664);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v667 = constructor_vec_and(ctx, v37, v63, v64);
                            let v668 = constructor_output_reg(ctx, v667);
                            // Rule at src/isa/s390x/lower.isle line 1016.
                            return Some(v668);
                        }
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v645 = constructor_and_reg(ctx, v62, v63, v64);
                            let v646 = constructor_output_reg(ctx, v645);
                            // Rule at src/isa/s390x/lower.isle line 996.
                            return Some(v646);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v76 = C::def_inst(ctx, v40.0);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Bnot = v79 {
                                        let v43 = C::put_in_reg(ctx, v40.1);
                                        let v82 = C::put_in_reg(ctx, v80);
                                        let v707 = constructor_vec_or_not(ctx, v37, v43, v82);
                                        let v708 = constructor_output_reg(ctx, v707);
                                        // Rule at src/isa/s390x/lower.isle line 1074.
                                        return Some(v708);
                                    }
                                }
                            }
                            let v67 = C::def_inst(ctx, v40.1);
                            if let Some(v68) = v67 {
                                let v69 = &C::inst_data(ctx, v68);
                                if let &InstructionData::Unary {
                                    opcode: ref v70,
                                    arg: v71,
                                } = v69
                                {
                                    if let &Opcode::Bnot = v70 {
                                        let v63 = C::put_in_reg(ctx, v40.0);
                                        let v73 = C::put_in_reg(ctx, v71);
                                        let v705 = constructor_vec_or_not(ctx, v37, v63, v73);
                                        let v706 = constructor_output_reg(ctx, v705);
                                        // Rule at src/isa/s390x/lower.isle line 1072.
                                        return Some(v706);
                                    }
                                }
                            }
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v624 = C::mie2_enabled(ctx, v3);
                            if let Some(v625) = v624 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v76 = C::def_inst(ctx, v40.0);
                                if let Some(v77) = v76 {
                                    let v78 = &C::inst_data(ctx, v77);
                                    if let &InstructionData::Unary {
                                        opcode: ref v79,
                                        arg: v80,
                                    } = v78
                                    {
                                        if let &Opcode::Bnot = v79 {
                                            let v43 = C::put_in_reg(ctx, v40.1);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v703 = constructor_or_not_reg(ctx, v62, v43, v82);
                                            let v704 = constructor_output_reg(ctx, v703);
                                            // Rule at src/isa/s390x/lower.isle line 1068.
                                            return Some(v704);
                                        }
                                    }
                                }
                                let v67 = C::def_inst(ctx, v40.1);
                                if let Some(v68) = v67 {
                                    let v69 = &C::inst_data(ctx, v68);
                                    if let &InstructionData::Unary {
                                        opcode: ref v70,
                                        arg: v71,
                                    } = v69
                                    {
                                        if let &Opcode::Bnot = v70 {
                                            let v63 = C::put_in_reg(ctx, v40.0);
                                            let v73 = C::put_in_reg(ctx, v71);
                                            let v701 = constructor_or_not_reg(ctx, v62, v63, v73);
                                            let v702 = constructor_output_reg(ctx, v701);
                                            // Rule at src/isa/s390x/lower.isle line 1066.
                                            return Some(v702);
                                        }
                                    }
                                }
                            }
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v683 = C::uimm16shifted_from_value(ctx, v40.0);
                            if let Some(v684) = v683 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v685 = constructor_or_uimm16shifted(ctx, v62, v43, v684);
                                let v686 = constructor_output_reg(ctx, v685);
                                // Rule at src/isa/s390x/lower.isle line 1044.
                                return Some(v686);
                            }
                            let v679 = C::uimm16shifted_from_value(ctx, v40.1);
                            if let Some(v680) = v679 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v681 = constructor_or_uimm16shifted(ctx, v62, v63, v680);
                                let v682 = constructor_output_reg(ctx, v681);
                                // Rule at src/isa/s390x/lower.isle line 1042.
                                return Some(v682);
                            }
                            let v691 = C::uimm32shifted_from_value(ctx, v40.0);
                            if let Some(v692) = v691 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v693 = constructor_or_uimm32shifted(ctx, v62, v43, v692);
                                let v694 = constructor_output_reg(ctx, v693);
                                // Rule at src/isa/s390x/lower.isle line 1048.
                                return Some(v694);
                            }
                            let v687 = C::uimm32shifted_from_value(ctx, v40.1);
                            if let Some(v688) = v687 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v689 = constructor_or_uimm32shifted(ctx, v62, v63, v688);
                                let v690 = constructor_output_reg(ctx, v689);
                                // Rule at src/isa/s390x/lower.isle line 1046.
                                return Some(v690);
                            }
                            let v116 = C::value_type(ctx, v40.0);
                            let v117 = C::ty_32_or_64(ctx, v116);
                            if let Some(v118) = v117 {
                                let v119 = C::sinkable_inst(ctx, v40.0);
                                if let Some(v120) = v119 {
                                    let v121 = &C::inst_data(ctx, v120);
                                    if let &InstructionData::Load {
                                        opcode: ref v122,
                                        arg: v123,
                                        flags: v124,
                                        offset: v125,
                                    } = v121
                                    {
                                        if let &Opcode::Load = v122 {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v43 = C::put_in_reg(ctx, v40.1);
                                                let v128 = &constructor_sink_load(ctx, v120);
                                                let v697 = constructor_or_mem(ctx, v62, v43, v128);
                                                let v698 = constructor_output_reg(ctx, v697);
                                                // Rule at src/isa/s390x/lower.isle line 1054.
                                                return Some(v698);
                                            }
                                        }
                                    }
                                }
                            }
                            let v101 = C::value_type(ctx, v40.1);
                            let v102 = C::ty_32_or_64(ctx, v101);
                            if let Some(v103) = v102 {
                                let v104 = C::sinkable_inst(ctx, v40.1);
                                if let Some(v105) = v104 {
                                    let v106 = &C::inst_data(ctx, v105);
                                    if let &InstructionData::Load {
                                        opcode: ref v107,
                                        arg: v108,
                                        flags: v109,
                                        offset: v110,
                                    } = v106
                                    {
                                        if let &Opcode::Load = v107 {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v113 = &constructor_sink_load(ctx, v105);
                                                let v695 = constructor_or_mem(ctx, v62, v63, v113);
                                                let v696 = constructor_output_reg(ctx, v695);
                                                // Rule at src/isa/s390x/lower.isle line 1052.
                                                return Some(v696);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v699 = constructor_vec_or(ctx, v37, v63, v64);
                            let v700 = constructor_output_reg(ctx, v699);
                            // Rule at src/isa/s390x/lower.isle line 1058.
                            return Some(v700);
                        }
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v677 = constructor_or_reg(ctx, v62, v63, v64);
                            let v678 = constructor_output_reg(ctx, v677);
                            // Rule at src/isa/s390x/lower.isle line 1038.
                            return Some(v678);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v76 = C::def_inst(ctx, v40.0);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Bnot = v79 {
                                        let v43 = C::put_in_reg(ctx, v40.1);
                                        let v82 = C::put_in_reg(ctx, v80);
                                        let v727 = constructor_vec_not_xor(ctx, v37, v43, v82);
                                        let v728 = constructor_output_reg(ctx, v727);
                                        // Rule at src/isa/s390x/lower.isle line 1113.
                                        return Some(v728);
                                    }
                                }
                            }
                            let v67 = C::def_inst(ctx, v40.1);
                            if let Some(v68) = v67 {
                                let v69 = &C::inst_data(ctx, v68);
                                if let &InstructionData::Unary {
                                    opcode: ref v70,
                                    arg: v71,
                                } = v69
                                {
                                    if let &Opcode::Bnot = v70 {
                                        let v63 = C::put_in_reg(ctx, v40.0);
                                        let v73 = C::put_in_reg(ctx, v71);
                                        let v725 = constructor_vec_not_xor(ctx, v37, v63, v73);
                                        let v726 = constructor_output_reg(ctx, v725);
                                        // Rule at src/isa/s390x/lower.isle line 1111.
                                        return Some(v726);
                                    }
                                }
                            }
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v624 = C::mie2_enabled(ctx, v3);
                            if let Some(v625) = v624 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v76 = C::def_inst(ctx, v40.0);
                                if let Some(v77) = v76 {
                                    let v78 = &C::inst_data(ctx, v77);
                                    if let &InstructionData::Unary {
                                        opcode: ref v79,
                                        arg: v80,
                                    } = v78
                                    {
                                        if let &Opcode::Bnot = v79 {
                                            let v43 = C::put_in_reg(ctx, v40.1);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v723 = constructor_not_xor_reg(ctx, v62, v43, v82);
                                            let v724 = constructor_output_reg(ctx, v723);
                                            // Rule at src/isa/s390x/lower.isle line 1107.
                                            return Some(v724);
                                        }
                                    }
                                }
                                let v67 = C::def_inst(ctx, v40.1);
                                if let Some(v68) = v67 {
                                    let v69 = &C::inst_data(ctx, v68);
                                    if let &InstructionData::Unary {
                                        opcode: ref v70,
                                        arg: v71,
                                    } = v69
                                    {
                                        if let &Opcode::Bnot = v70 {
                                            let v63 = C::put_in_reg(ctx, v40.0);
                                            let v73 = C::put_in_reg(ctx, v71);
                                            let v721 = constructor_not_xor_reg(ctx, v62, v63, v73);
                                            let v722 = constructor_output_reg(ctx, v721);
                                            // Rule at src/isa/s390x/lower.isle line 1105.
                                            return Some(v722);
                                        }
                                    }
                                }
                            }
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v691 = C::uimm32shifted_from_value(ctx, v40.0);
                            if let Some(v692) = v691 {
                                let v43 = C::put_in_reg(ctx, v40.1);
                                let v713 = constructor_xor_uimm32shifted(ctx, v62, v43, v692);
                                let v714 = constructor_output_reg(ctx, v713);
                                // Rule at src/isa/s390x/lower.isle line 1087.
                                return Some(v714);
                            }
                            let v687 = C::uimm32shifted_from_value(ctx, v40.1);
                            if let Some(v688) = v687 {
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v711 = constructor_xor_uimm32shifted(ctx, v62, v63, v688);
                                let v712 = constructor_output_reg(ctx, v711);
                                // Rule at src/isa/s390x/lower.isle line 1085.
                                return Some(v712);
                            }
                            let v116 = C::value_type(ctx, v40.0);
                            let v117 = C::ty_32_or_64(ctx, v116);
                            if let Some(v118) = v117 {
                                let v119 = C::sinkable_inst(ctx, v40.0);
                                if let Some(v120) = v119 {
                                    let v121 = &C::inst_data(ctx, v120);
                                    if let &InstructionData::Load {
                                        opcode: ref v122,
                                        arg: v123,
                                        flags: v124,
                                        offset: v125,
                                    } = v121
                                    {
                                        if let &Opcode::Load = v122 {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v43 = C::put_in_reg(ctx, v40.1);
                                                let v128 = &constructor_sink_load(ctx, v120);
                                                let v717 = constructor_xor_mem(ctx, v62, v43, v128);
                                                let v718 = constructor_output_reg(ctx, v717);
                                                // Rule at src/isa/s390x/lower.isle line 1093.
                                                return Some(v718);
                                            }
                                        }
                                    }
                                }
                            }
                            let v101 = C::value_type(ctx, v40.1);
                            let v102 = C::ty_32_or_64(ctx, v101);
                            if let Some(v103) = v102 {
                                let v104 = C::sinkable_inst(ctx, v40.1);
                                if let Some(v105) = v104 {
                                    let v106 = &C::inst_data(ctx, v105);
                                    if let &InstructionData::Load {
                                        opcode: ref v107,
                                        arg: v108,
                                        flags: v109,
                                        offset: v110,
                                    } = v106
                                    {
                                        if let &Opcode::Load = v107 {
                                            let v111 = C::bigendian(ctx, v109);
                                            if let Some(v112) = v111 {
                                                let v63 = C::put_in_reg(ctx, v40.0);
                                                let v113 = &constructor_sink_load(ctx, v105);
                                                let v715 = constructor_xor_mem(ctx, v62, v63, v113);
                                                let v716 = constructor_output_reg(ctx, v715);
                                                // Rule at src/isa/s390x/lower.isle line 1091.
                                                return Some(v716);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v719 = constructor_vec_xor(ctx, v37, v63, v64);
                            let v720 = constructor_output_reg(ctx, v719);
                            // Rule at src/isa/s390x/lower.isle line 1097.
                            return Some(v720);
                        }
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v64 = C::put_in_reg(ctx, v40.1);
                            let v709 = constructor_xor_reg(ctx, v62, v63, v64);
                            let v710 = constructor_output_reg(ctx, v709);
                            // Rule at src/isa/s390x/lower.isle line 1081.
                            return Some(v710);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v535 = constructor_amt_vr(ctx, v40.1);
                            let v536 = constructor_vec_neg(ctx, I8X16, v535);
                            let v537 = constructor_vec_lshl_by_byte(ctx, v63, v535);
                            let v538 = constructor_vec_lshl_by_bit(ctx, v537, v535);
                            let v539 = constructor_vec_lshr_by_byte(ctx, v63, v536);
                            let v540 = constructor_vec_lshr_by_bit(ctx, v539, v536);
                            let v541 = constructor_vec_or(ctx, I128, v538, v540);
                            let v542 = constructor_output_reg(ctx, v541);
                            // Rule at src/isa/s390x/lower.isle line 808.
                            return Some(v542);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v476 = C::mask_amt_imm(ctx, v150, v469);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v533 = constructor_vec_rot_imm(ctx, v150, v44, v476);
                                let v534 = constructor_output_reg(ctx, v533);
                                // Rule at src/isa/s390x/lower.isle line 802.
                                return Some(v534);
                            }
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v473 = constructor_amt_reg(ctx, v40.1);
                            let v531 = constructor_vec_rot_reg(ctx, v150, v63, v473);
                            let v532 = constructor_output_reg(ctx, v531);
                            // Rule at src/isa/s390x/lower.isle line 798.
                            return Some(v532);
                        }
                        let v368 = C::ty_8_or_16(ctx, v3);
                        if let Some(v369) = v368 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v523 = C::i64_from_negated_value(ctx, v40.1);
                                if let Some(v524) = v523 {
                                    let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                                    let v514 = constructor_ty_ext32(ctx, v369);
                                    let v525 = C::mask_amt_imm(ctx, v369, v469);
                                    let v526 = C::mask_amt_imm(ctx, v369, v524);
                                    let v527 = constructor_lshl_imm(ctx, v514, v287, v525);
                                    let v528 = constructor_lshr_imm(ctx, v514, v287, v526);
                                    let v529 = constructor_or_reg(ctx, v369, v527, v528);
                                    let v530 = constructor_output_reg(ctx, v529);
                                    // Rule at src/isa/s390x/lower.isle line 788.
                                    return Some(v530);
                                }
                            }
                            let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v514 = constructor_ty_ext32(ctx, v369);
                            let v515 = constructor_amt_reg(ctx, v40.1);
                            let v516 = constructor_neg_reg(ctx, I32, v515);
                            let v517 = constructor_mask_amt_reg(ctx, v369, v515);
                            let v518 = constructor_mask_amt_reg(ctx, v369, v516);
                            let v519 = constructor_lshl_reg(ctx, v514, v287, v517);
                            let v520 = constructor_lshr_reg(ctx, v514, v287, v518);
                            let v521 = constructor_or_reg(ctx, v369, v519, v520);
                            let v522 = constructor_output_reg(ctx, v521);
                            // Rule at src/isa/s390x/lower.isle line 776.
                            return Some(v522);
                        }
                        let v507 = C::ty_32_or_64(ctx, v3);
                        if let Some(v508) = v507 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v511 = C::mask_amt_imm(ctx, v508, v469);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v512 = constructor_rot_imm(ctx, v508, v44, v511);
                                let v513 = constructor_output_reg(ctx, v512);
                                // Rule at src/isa/s390x/lower.isle line 770.
                                return Some(v513);
                            }
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v473 = constructor_amt_reg(ctx, v40.1);
                            let v509 = constructor_rot_reg(ctx, v508, v63, v473);
                            let v510 = constructor_output_reg(ctx, v509);
                            // Rule at src/isa/s390x/lower.isle line 766.
                            return Some(v510);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v535 = constructor_amt_vr(ctx, v40.1);
                            let v536 = constructor_vec_neg(ctx, I8X16, v535);
                            let v562 = constructor_vec_lshl_by_byte(ctx, v63, v536);
                            let v563 = constructor_vec_lshl_by_bit(ctx, v562, v536);
                            let v564 = constructor_vec_lshr_by_byte(ctx, v63, v535);
                            let v565 = constructor_vec_lshr_by_bit(ctx, v564, v535);
                            let v566 = constructor_vec_or(ctx, I128, v563, v565);
                            let v567 = constructor_output_reg(ctx, v566);
                            // Rule at src/isa/s390x/lower.isle line 868.
                            return Some(v567);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v523 = C::i64_from_negated_value(ctx, v40.1);
                            if let Some(v524) = v523 {
                                let v559 = C::mask_amt_imm(ctx, v150, v524);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v560 = constructor_vec_rot_imm(ctx, v150, v44, v559);
                                let v561 = constructor_output_reg(ctx, v560);
                                // Rule at src/isa/s390x/lower.isle line 862.
                                return Some(v561);
                            }
                            let v464 = constructor_amt_reg(ctx, v40.1);
                            let v543 = constructor_neg_reg(ctx, I32, v464);
                            let v158 = C::put_in_reg(ctx, v40.0);
                            let v557 = constructor_vec_rot_reg(ctx, v150, v158, v543);
                            let v558 = constructor_output_reg(ctx, v557);
                            // Rule at src/isa/s390x/lower.isle line 856.
                            return Some(v558);
                        }
                        let v368 = C::ty_8_or_16(ctx, v3);
                        if let Some(v369) = v368 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v523 = C::i64_from_negated_value(ctx, v40.1);
                                if let Some(v524) = v523 {
                                    let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                                    let v514 = constructor_ty_ext32(ctx, v369);
                                    let v525 = C::mask_amt_imm(ctx, v369, v469);
                                    let v526 = C::mask_amt_imm(ctx, v369, v524);
                                    let v553 = constructor_lshl_imm(ctx, v514, v287, v526);
                                    let v554 = constructor_lshr_imm(ctx, v514, v287, v525);
                                    let v555 = constructor_or_reg(ctx, v369, v553, v554);
                                    let v556 = constructor_output_reg(ctx, v555);
                                    // Rule at src/isa/s390x/lower.isle line 845.
                                    return Some(v556);
                                }
                            }
                            let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v514 = constructor_ty_ext32(ctx, v369);
                            let v515 = constructor_amt_reg(ctx, v40.1);
                            let v516 = constructor_neg_reg(ctx, I32, v515);
                            let v517 = constructor_mask_amt_reg(ctx, v369, v515);
                            let v518 = constructor_mask_amt_reg(ctx, v369, v516);
                            let v549 = constructor_lshl_reg(ctx, v514, v287, v518);
                            let v550 = constructor_lshr_reg(ctx, v514, v287, v517);
                            let v551 = constructor_or_reg(ctx, v369, v549, v550);
                            let v552 = constructor_output_reg(ctx, v551);
                            // Rule at src/isa/s390x/lower.isle line 833.
                            return Some(v552);
                        }
                        let v507 = C::ty_32_or_64(ctx, v3);
                        if let Some(v508) = v507 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v523 = C::i64_from_negated_value(ctx, v40.1);
                            if let Some(v524) = v523 {
                                let v546 = C::mask_amt_imm(ctx, v508, v524);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v547 = constructor_rot_imm(ctx, v508, v44, v546);
                                let v548 = constructor_output_reg(ctx, v547);
                                // Rule at src/isa/s390x/lower.isle line 827.
                                return Some(v548);
                            }
                            let v464 = constructor_amt_reg(ctx, v40.1);
                            let v543 = constructor_neg_reg(ctx, I32, v464);
                            let v158 = C::put_in_reg(ctx, v40.0);
                            let v544 = constructor_rot_reg(ctx, v508, v158, v543);
                            let v545 = constructor_output_reg(ctx, v544);
                            // Rule at src/isa/s390x/lower.isle line 821.
                            return Some(v545);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v479 = constructor_amt_vr(ctx, v40.1);
                            let v44 = C::put_in_reg(ctx, v40.0);
                            let v480 = constructor_vec_lshl_by_byte(ctx, v44, v479);
                            let v481 = constructor_vec_lshl_by_bit(ctx, v480, v479);
                            let v482 = constructor_output_reg(ctx, v481);
                            // Rule at src/isa/s390x/lower.isle line 696.
                            return Some(v482);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v476 = C::mask_amt_imm(ctx, v150, v469);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v477 = constructor_vec_lshl_imm(ctx, v150, v44, v476);
                                let v478 = constructor_output_reg(ctx, v477);
                                // Rule at src/isa/s390x/lower.isle line 691.
                                return Some(v478);
                            }
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v473 = constructor_amt_reg(ctx, v40.1);
                            let v474 = constructor_vec_lshl_reg(ctx, v150, v63, v473);
                            let v475 = constructor_output_reg(ctx, v474);
                            // Rule at src/isa/s390x/lower.isle line 687.
                            return Some(v475);
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v470 = C::mask_amt_imm(ctx, v62, v469);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v471 = constructor_lshl_imm(ctx, v62, v44, v470);
                                let v472 = constructor_output_reg(ctx, v471);
                                // Rule at src/isa/s390x/lower.isle line 682.
                                return Some(v472);
                            }
                            let v464 = constructor_amt_reg(ctx, v40.1);
                            let v465 = constructor_mask_amt_reg(ctx, v62, v464);
                            let v158 = C::put_in_reg(ctx, v40.0);
                            let v466 = constructor_lshl_reg(ctx, v62, v158, v465);
                            let v467 = constructor_output_reg(ctx, v466);
                            // Rule at src/isa/s390x/lower.isle line 677.
                            return Some(v467);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v479 = constructor_amt_vr(ctx, v40.1);
                            let v44 = C::put_in_reg(ctx, v40.0);
                            let v493 = constructor_vec_lshr_by_byte(ctx, v44, v479);
                            let v494 = constructor_vec_lshr_by_bit(ctx, v493, v479);
                            let v495 = constructor_output_reg(ctx, v494);
                            // Rule at src/isa/s390x/lower.isle line 727.
                            return Some(v495);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v476 = C::mask_amt_imm(ctx, v150, v469);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v491 = constructor_vec_lshr_imm(ctx, v150, v44, v476);
                                let v492 = constructor_output_reg(ctx, v491);
                                // Rule at src/isa/s390x/lower.isle line 722.
                                return Some(v492);
                            }
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v473 = constructor_amt_reg(ctx, v40.1);
                            let v489 = constructor_vec_lshr_reg(ctx, v150, v63, v473);
                            let v490 = constructor_output_reg(ctx, v489);
                            // Rule at src/isa/s390x/lower.isle line 718.
                            return Some(v490);
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                                let v486 = C::mask_amt_imm(ctx, v62, v469);
                                let v289 = constructor_ty_ext32(ctx, v62);
                                let v487 = constructor_lshr_imm(ctx, v289, v287, v486);
                                let v488 = constructor_output_reg(ctx, v487);
                                // Rule at src/isa/s390x/lower.isle line 712.
                                return Some(v488);
                            }
                            let v287 = constructor_put_in_reg_zext32(ctx, v40.0);
                            let v473 = constructor_amt_reg(ctx, v40.1);
                            let v483 = constructor_mask_amt_reg(ctx, v62, v473);
                            let v455 = constructor_ty_ext32(ctx, v62);
                            let v484 = constructor_lshr_reg(ctx, v455, v287, v483);
                            let v485 = constructor_output_reg(ctx, v484);
                            // Rule at src/isa/s390x/lower.isle line 705.
                            return Some(v485);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v479 = constructor_amt_vr(ctx, v40.1);
                            let v44 = C::put_in_reg(ctx, v40.0);
                            let v504 = constructor_vec_ashr_by_byte(ctx, v44, v479);
                            let v505 = constructor_vec_ashr_by_bit(ctx, v504, v479);
                            let v506 = constructor_output_reg(ctx, v505);
                            // Rule at src/isa/s390x/lower.isle line 758.
                            return Some(v506);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v476 = C::mask_amt_imm(ctx, v150, v469);
                                let v44 = C::put_in_reg(ctx, v40.0);
                                let v502 = constructor_vec_ashr_imm(ctx, v150, v44, v476);
                                let v503 = constructor_output_reg(ctx, v502);
                                // Rule at src/isa/s390x/lower.isle line 753.
                                return Some(v503);
                            }
                            let v63 = C::put_in_reg(ctx, v40.0);
                            let v473 = constructor_amt_reg(ctx, v40.1);
                            let v500 = constructor_vec_ashr_reg(ctx, v150, v63, v473);
                            let v501 = constructor_output_reg(ctx, v500);
                            // Rule at src/isa/s390x/lower.isle line 749.
                            return Some(v501);
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v468 = C::i64_from_value(ctx, v40.1);
                            if let Some(v469) = v468 {
                                let v311 = constructor_put_in_reg_sext32(ctx, v40.0);
                                let v486 = C::mask_amt_imm(ctx, v62, v469);
                                let v289 = constructor_ty_ext32(ctx, v62);
                                let v498 = constructor_ashr_imm(ctx, v289, v311, v486);
                                let v499 = constructor_output_reg(ctx, v498);
                                // Rule at src/isa/s390x/lower.isle line 743.
                                return Some(v499);
                            }
                            let v311 = constructor_put_in_reg_sext32(ctx, v40.0);
                            let v473 = constructor_amt_reg(ctx, v40.1);
                            let v483 = constructor_mask_amt_reg(ctx, v62, v473);
                            let v455 = constructor_ty_ext32(ctx, v62);
                            let v496 = constructor_ashr_reg(ctx, v455, v311, v483);
                            let v497 = constructor_output_reg(ctx, v496);
                            // Rule at src/isa/s390x/lower.isle line 736.
                            return Some(v497);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v857 = constructor_fadd_reg(ctx, v3, v63, v64);
                        let v858 = constructor_output_reg(ctx, v857);
                        // Rule at src/isa/s390x/lower.isle line 1353.
                        return Some(v858);
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v859 = constructor_fsub_reg(ctx, v3, v63, v64);
                        let v860 = constructor_output_reg(ctx, v859);
                        // Rule at src/isa/s390x/lower.isle line 1360.
                        return Some(v860);
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v861 = constructor_fmul_reg(ctx, v3, v63, v64);
                        let v862 = constructor_output_reg(ctx, v861);
                        // Rule at src/isa/s390x/lower.isle line 1367.
                        return Some(v862);
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v863 = constructor_fdiv_reg(ctx, v3, v63, v64);
                        let v864 = constructor_output_reg(ctx, v863);
                        // Rule at src/isa/s390x/lower.isle line 1374.
                        return Some(v864);
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v874 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v875 = constructor_vec_select(ctx, F32, v63, v64, v874);
                                let v876 = constructor_output_reg(ctx, v875);
                                // Rule at src/isa/s390x/lower.isle line 1409.
                                return Some(v876);
                            }
                            F64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v878 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v879 = constructor_vec_select(ctx, F64, v63, v64, v878);
                                let v880 = constructor_output_reg(ctx, v879);
                                // Rule at src/isa/s390x/lower.isle line 1411.
                                return Some(v880);
                            }
                            F32X4 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v883 = constructor_vec_imm_bit_mask(ctx, F32X4, 0x1, 0x1F);
                                let v884 = constructor_vec_select(ctx, F32X4, v63, v64, v883);
                                let v885 = constructor_output_reg(ctx, v884);
                                // Rule at src/isa/s390x/lower.isle line 1413.
                                return Some(v885);
                            }
                            F64X2 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v63 = C::put_in_reg(ctx, v40.0);
                                let v64 = C::put_in_reg(ctx, v40.1);
                                let v887 = constructor_vec_imm_bit_mask(ctx, F64X2, 0x1, 0x3F);
                                let v888 = constructor_vec_select(ctx, F64X2, v63, v64, v887);
                                let v889 = constructor_output_reg(ctx, v888);
                                // Rule at src/isa/s390x/lower.isle line 1415.
                                return Some(v889);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v865 = constructor_fmin_reg(ctx, v3, v63, v64);
                        let v866 = constructor_output_reg(ctx, v865);
                        // Rule at src/isa/s390x/lower.isle line 1381.
                        return Some(v866);
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v869 = constructor_fmin_pseudo_reg(ctx, v3, v63, v64);
                        let v870 = constructor_output_reg(ctx, v869);
                        // Rule at src/isa/s390x/lower.isle line 1395.
                        return Some(v870);
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v867 = constructor_fmax_reg(ctx, v3, v63, v64);
                        let v868 = constructor_output_reg(ctx, v867);
                        // Rule at src/isa/s390x/lower.isle line 1388.
                        return Some(v868);
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v3 = C::value_type(ctx, v2);
                        let v871 = constructor_fmax_pseudo_reg(ctx, v3, v63, v64);
                        let v872 = constructor_output_reg(ctx, v871);
                        // Rule at src/isa/s390x/lower.isle line 1402.
                        return Some(v872);
                    }
                }
                &Opcode::Snarrow => {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v116 = C::value_type(ctx, v40.0);
                    let v603 = C::ty_vec128(ctx, v116);
                    if let Some(v604) = v603 {
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v605 = constructor_vec_pack_ssat_lane_order(ctx, v604, v63, v64);
                        let v606 = constructor_output_reg(ctx, v605);
                        // Rule at src/isa/s390x/lower.isle line 927.
                        return Some(v606);
                    }
                }
                &Opcode::Unarrow => {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v116 = C::value_type(ctx, v40.0);
                    let v603 = C::ty_vec128(ctx, v116);
                    if let Some(v604) = v603 {
                        let v609 = constructor_vec_imm(ctx, v604, 0x0);
                        let v44 = C::put_in_reg(ctx, v40.0);
                        let v610 = constructor_vec_smax(ctx, v604, v44, v609);
                        let v394 = C::put_in_reg(ctx, v40.1);
                        let v611 = constructor_vec_smax(ctx, v604, v394, v609);
                        let v612 = constructor_vec_pack_usat_lane_order(ctx, v604, v610, v611);
                        let v613 = constructor_output_reg(ctx, v612);
                        // Rule at src/isa/s390x/lower.isle line 939.
                        return Some(v613);
                    }
                }
                &Opcode::Uunarrow => {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v116 = C::value_type(ctx, v40.0);
                    let v603 = C::ty_vec128(ctx, v116);
                    if let Some(v604) = v603 {
                        let v63 = C::put_in_reg(ctx, v40.0);
                        let v64 = C::put_in_reg(ctx, v40.1);
                        let v607 = constructor_vec_pack_usat_lane_order(ctx, v604, v63, v64);
                        let v608 = constructor_output_reg(ctx, v607);
                        // Rule at src/isa/s390x/lower.isle line 933.
                        return Some(v608);
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v40 = C::unpack_value_array_2(ctx, v39);
                        let v67 = C::def_inst(ctx, v40.1);
                        if let Some(v68) = v67 {
                            let v69 = &C::inst_data(ctx, v68);
                            if let &InstructionData::Binary {
                                opcode: ref v203,
                                args: ref v204,
                            } = v69
                            {
                                if let &Opcode::Imul = v203 {
                                    let v76 = C::def_inst(ctx, v40.0);
                                    if let Some(v77) = v76 {
                                        let v78 = &C::inst_data(ctx, v77);
                                        if let &InstructionData::Binary {
                                            opcode: ref v187,
                                            args: ref v188,
                                        } = v78
                                        {
                                            if let &Opcode::Imul = v187 {
                                                let v189 = C::unpack_value_array_2(ctx, v188);
                                                let v192 = C::def_inst(ctx, v189.0);
                                                if let Some(v193) = v192 {
                                                    let v194 = &C::inst_data(ctx, v193);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v195,
                                                        arg: v196,
                                                    } = v194
                                                    {
                                                        if let &Opcode::SwidenLow = v195 {
                                                            let v198 = C::def_inst(ctx, v189.1);
                                                            if let Some(v199) = v198 {
                                                                let v200 = &C::inst_data(ctx, v199);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v201,
                                                                    arg: v202,
                                                                } = v200
                                                                {
                                                                    if let &Opcode::SwidenLow = v201
                                                                    {
                                                                        let v205 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v204,
                                                                            );
                                                                        let v208 = C::def_inst(
                                                                            ctx, v205.0,
                                                                        );
                                                                        if let Some(v209) = v208 {
                                                                            let v210 =
                                                                                &C::inst_data(
                                                                                    ctx, v209,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v211,
                                                                                arg: v212,
                                                                            } = v210 {
                                                                                if let &Opcode::SwidenHigh = v211 {
                                                                                    if v196 == v212 {
                                                                                        let v213 = C::def_inst(ctx, v205.1);
                                                                                        if let Some(v214) = v213 {
                                                                                            let v215 = &C::inst_data(ctx, v214);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v216,
                                                                                                arg: v217,
                                                                                            } = v215 {
                                                                                                if let &Opcode::SwidenHigh = v216 {
                                                                                                    if v202 == v217 {
                                                                                                        let v218 = C::put_in_reg(ctx, v196);
                                                                                                        let v219 = C::put_in_reg(ctx, v202);
                                                                                                        let v197 = C::value_type(ctx, v196);
                                                                                                        let v220 = constructor_vec_smul_even(ctx, v197, v218, v219);
                                                                                                        let v221 = C::put_in_reg(ctx, v196);
                                                                                                        let v222 = C::put_in_reg(ctx, v202);
                                                                                                        let v223 = constructor_vec_smul_odd(ctx, v197, v221, v222);
                                                                                                        let v3 = C::value_type(ctx, v2);
                                                                                                        let v224 = constructor_vec_add(ctx, v3, v220, v223);
                                                                                                        let v225 = constructor_output_reg(ctx, v224);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 142.
                                                                                                        return Some(v225);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v171 = C::multi_lane(ctx, v3);
                        if let Some(v172) = v171 {
                            let v176 = C::u32_as_u64(ctx, v172.0);
                            let v177 = constructor_vec_imm_splat(ctx, I8X16, v176);
                            let v178 = constructor_vec_widen_type(ctx, v3);
                            let v158 = C::put_in_reg(ctx, v40.0);
                            let v152 = C::put_in_reg(ctx, v40.0);
                            let v179 = constructor_vec_lshr_by_byte(ctx, v152, v177);
                            let v180 = constructor_vec_add(ctx, v3, v158, v179);
                            let v181 = C::put_in_reg(ctx, v40.1);
                            let v182 = C::put_in_reg(ctx, v40.1);
                            let v183 = constructor_vec_lshr_by_byte(ctx, v182, v177);
                            let v184 = constructor_vec_add(ctx, v3, v181, v183);
                            let v185 = constructor_vec_pack_lane_order(ctx, v178, v180, v184);
                            let v186 = constructor_output_reg(ctx, v185);
                            // Rule at src/isa/s390x/lower.isle line 135.
                            return Some(v186);
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v43 = C::put_in_reg(ctx, v40.1);
                            let v44 = C::put_in_reg(ctx, v40.0);
                            let v45 = constructor_mov_to_vec128(ctx, v37, v43, v44);
                            let v46 = constructor_output_reg(ctx, v45);
                            // Rule at src/isa/s390x/lower.isle line 51.
                            return Some(v46);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1141,
            arg: v1142,
            imm: v1143,
        } => {
            if let &Opcode::Extractlane = v1141 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1146 = C::ty_int_ref_scalar_64(ctx, v3);
                    if let Some(v1147) = v1146 {
                        let v1148 = C::put_in_reg(ctx, v1142);
                        let v1144 = C::value_type(ctx, v1142);
                        let v1145 = C::u8_from_uimm8(ctx, v1143);
                        let v1149 = C::be_lane_idx(ctx, v1144, v1145);
                        let v584 = C::zero_reg(ctx);
                        let v1150 = constructor_vec_extract_lane(ctx, v1144, v1148, v1149, v584);
                        let v1151 = constructor_output_reg(ctx, v1150);
                        // Rule at src/isa/s390x/lower.isle line 1883.
                        return Some(v1151);
                    }
                    let v1074 = C::ty_scalar_float(ctx, v3);
                    if let Some(v1075) = v1074 {
                        let v1148 = C::put_in_reg(ctx, v1142);
                        let v1144 = C::value_type(ctx, v1142);
                        let v1145 = C::u8_from_uimm8(ctx, v1143);
                        let v1149 = C::be_lane_idx(ctx, v1144, v1145);
                        let v1152 = constructor_vec_replicate_lane(ctx, v1144, v1148, v1149);
                        let v1153 = constructor_output_reg(ctx, v1152);
                        // Rule at src/isa/s390x/lower.isle line 1889.
                        return Some(v1153);
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v1996,
            args: v1997,
            func_ref: v1998,
        } => {
            if let &Opcode::Call = v1996 {
                let v2000 = C::func_ref_data(ctx, v1998);
                let v2004 = C::reloc_distance_near(ctx, v2000.2);
                if let Some(v2005) = v2004 {
                    let v2006 = C::abi_sig(ctx, v2000.0);
                    let v2007 = C::abi_accumulate_outgoing_args_size(ctx, v2006);
                    let v2009 = C::abi_num_args(ctx, v2006);
                    let v2010 = C::range(ctx, 0x0, v2009);
                    let v1999 = C::value_list_slice(ctx, v1997);
                    let v2011 = &constructor_lower_call_args(ctx, v2006, v2010, v1999);
                    let v2012 = &C::defs_init(ctx, v2006);
                    let v2014 =
                        &constructor_abi_call(ctx, v2006, v2000.1, v2011, v2012, &Opcode::Call);
                    let v2015 = constructor_side_effect(ctx, v2014);
                    let v2016 = C::abi_first_ret(ctx, v2000.0, v2006);
                    let v2017 = C::abi_num_rets(ctx, v2006);
                    let v2019 = &C::output_builder_new(ctx);
                    let v2018 = C::range(ctx, v2016, v2017);
                    let v2020 = constructor_lower_call_rets(ctx, v2006, v2012, v2018, v2019);
                    // Rule at src/isa/s390x/lower.isle line 3898.
                    return Some(v2020);
                }
                let v2006 = C::abi_sig(ctx, v2000.0);
                let v2007 = C::abi_accumulate_outgoing_args_size(ctx, v2006);
                let v2009 = C::abi_num_args(ctx, v2006);
                let v2010 = C::range(ctx, 0x0, v2009);
                let v1999 = C::value_list_slice(ctx, v1997);
                let v2011 = &constructor_lower_call_args(ctx, v2006, v2010, v1999);
                let v2012 = &C::defs_init(ctx, v2006);
                let v2021 = SymbolReloc::Absolute {
                    name: v2000.1,
                    offset: 0x0,
                };
                let v2022 = constructor_load_symbol_reloc(ctx, &v2021);
                let v2023 =
                    &constructor_abi_call_ind(ctx, v2006, v2022, v2011, v2012, &Opcode::Call);
                let v2024 = constructor_side_effect(ctx, v2023);
                let v2025 = C::abi_first_ret(ctx, v2000.0, v2006);
                let v2026 = C::abi_num_rets(ctx, v2006);
                let v2028 = &C::output_builder_new(ctx);
                let v2027 = C::range(ctx, v2025, v2026);
                let v2029 = constructor_lower_call_rets(ctx, v2006, v2012, v2027, v2028);
                // Rule at src/isa/s390x/lower.isle line 3908.
                return Some(v2029);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2030,
            args: v2031,
            sig_ref: v2032,
        } => {
            if let &Opcode::CallIndirect = v2030 {
                let v2033 = C::value_list_slice(ctx, v2031);
                let v2034 = C::value_slice_unwrap(ctx, v2033);
                if let Some(v2035) = v2034 {
                    let v2038 = C::abi_sig(ctx, v2032);
                    let v2039 = C::put_in_reg(ctx, v2035.0);
                    let v2040 = C::abi_accumulate_outgoing_args_size(ctx, v2038);
                    let v2041 = C::abi_num_args(ctx, v2038);
                    let v2042 = C::range(ctx, 0x0, v2041);
                    let v2043 = &constructor_lower_call_args(ctx, v2038, v2042, v2035.1);
                    let v2044 = &C::defs_init(ctx, v2038);
                    let v2046 = &constructor_abi_call_ind(
                        ctx,
                        v2038,
                        v2039,
                        v2043,
                        v2044,
                        &Opcode::CallIndirect,
                    );
                    let v2047 = constructor_side_effect(ctx, v2046);
                    let v2048 = C::abi_first_ret(ctx, v2032, v2038);
                    let v2049 = C::abi_num_rets(ctx, v2038);
                    let v2028 = &C::output_builder_new(ctx);
                    let v2050 = C::range(ctx, v2048, v2049);
                    let v2051 = constructor_lower_call_rets(ctx, v2038, v2044, v2050, v2028);
                    // Rule at src/isa/s390x/lower.isle line 3919.
                    return Some(v2051);
                }
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v1895,
            arg: v1896,
            code: ref v1897,
        } => {
            match v1895 {
                &Opcode::Trapz => {
                    let v1898 = &constructor_value_nonzero(ctx, v1896);
                    let v1899 = &constructor_invert_bool(ctx, v1898);
                    let v1900 = &constructor_trap_if_bool(ctx, v1899, v1897);
                    let v1901 = constructor_side_effect(ctx, v1900);
                    // Rule at src/isa/s390x/lower.isle line 3799.
                    return Some(v1901);
                }
                &Opcode::Trapnz => {
                    let v1898 = &constructor_value_nonzero(ctx, v1896);
                    let v1902 = &constructor_trap_if_bool(ctx, v1898, v1897);
                    let v1903 = constructor_side_effect(ctx, v1902);
                    // Rule at src/isa/s390x/lower.isle line 3805.
                    return Some(v1903);
                }
                &Opcode::ResumableTrapnz => {
                    let v1898 = &constructor_value_nonzero(ctx, v1896);
                    let v1902 = &constructor_trap_if_bool(ctx, v1898, v1897);
                    let v1903 = constructor_side_effect(ctx, v1902);
                    // Rule at src/isa/s390x/lower.isle line 3811.
                    return Some(v1903);
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1771,
            args: ref v1772,
            cond: ref v1773,
        } => {
            if let &Opcode::Fcmp = v1771 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v1773 {
                        &FloatCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1782 = constructor_vec_fcmpeq(ctx, v150, v1780, v1781);
                                let v1783 = constructor_output_reg(ctx, v1782);
                                // Rule at src/isa/s390x/lower.isle line 3451.
                                return Some(v1783);
                            }
                        }
                        &FloatCC::GreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1786 = constructor_vec_fcmph(ctx, v150, v1780, v1781);
                                let v1787 = constructor_output_reg(ctx, v1786);
                                // Rule at src/isa/s390x/lower.isle line 3455.
                                return Some(v1787);
                            }
                        }
                        &FloatCC::GreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1790 = constructor_vec_fcmphe(ctx, v150, v1780, v1781);
                                let v1791 = constructor_output_reg(ctx, v1790);
                                // Rule at src/isa/s390x/lower.isle line 3459.
                                return Some(v1791);
                            }
                        }
                        &FloatCC::LessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1794 = C::put_in_reg(ctx, v1774.1);
                                let v1795 = C::put_in_reg(ctx, v1774.0);
                                let v1796 = constructor_vec_fcmph(ctx, v150, v1794, v1795);
                                let v1797 = constructor_output_reg(ctx, v1796);
                                // Rule at src/isa/s390x/lower.isle line 3463.
                                return Some(v1797);
                            }
                        }
                        &FloatCC::LessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1794 = C::put_in_reg(ctx, v1774.1);
                                let v1795 = C::put_in_reg(ctx, v1774.0);
                                let v1800 = constructor_vec_fcmphe(ctx, v150, v1794, v1795);
                                let v1801 = constructor_output_reg(ctx, v1800);
                                // Rule at src/isa/s390x/lower.isle line 3467.
                                return Some(v1801);
                            }
                        }
                        &FloatCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1782 = constructor_vec_fcmpeq(ctx, v150, v1780, v1781);
                                let v1784 = constructor_vec_not(ctx, v150, v1782);
                                let v1785 = constructor_output_reg(ctx, v1784);
                                // Rule at src/isa/s390x/lower.isle line 3453.
                                return Some(v1785);
                            }
                        }
                        &FloatCC::Ordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1790 = constructor_vec_fcmphe(ctx, v150, v1780, v1781);
                                let v1804 = C::put_in_reg(ctx, v1774.1);
                                let v1805 = C::put_in_reg(ctx, v1774.0);
                                let v1806 = constructor_vec_fcmphe(ctx, v150, v1804, v1805);
                                let v1807 = constructor_vec_or(ctx, v150, v1790, v1806);
                                let v1808 = constructor_output_reg(ctx, v1807);
                                // Rule at src/isa/s390x/lower.isle line 3471.
                                return Some(v1808);
                            }
                        }
                        &FloatCC::OrderedNotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1786 = constructor_vec_fcmph(ctx, v150, v1780, v1781);
                                let v1804 = C::put_in_reg(ctx, v1774.1);
                                let v1805 = C::put_in_reg(ctx, v1774.0);
                                let v1811 = constructor_vec_fcmph(ctx, v150, v1804, v1805);
                                let v1812 = constructor_vec_or(ctx, v150, v1786, v1811);
                                let v1813 = constructor_output_reg(ctx, v1812);
                                // Rule at src/isa/s390x/lower.isle line 3475.
                                return Some(v1813);
                            }
                        }
                        &FloatCC::Unordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1790 = constructor_vec_fcmphe(ctx, v150, v1780, v1781);
                                let v1804 = C::put_in_reg(ctx, v1774.1);
                                let v1805 = C::put_in_reg(ctx, v1774.0);
                                let v1806 = constructor_vec_fcmphe(ctx, v150, v1804, v1805);
                                let v1809 = constructor_vec_not_or(ctx, v150, v1790, v1806);
                                let v1810 = constructor_output_reg(ctx, v1809);
                                // Rule at src/isa/s390x/lower.isle line 3473.
                                return Some(v1810);
                            }
                        }
                        &FloatCC::UnorderedOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1786 = constructor_vec_fcmph(ctx, v150, v1780, v1781);
                                let v1804 = C::put_in_reg(ctx, v1774.1);
                                let v1805 = C::put_in_reg(ctx, v1774.0);
                                let v1811 = constructor_vec_fcmph(ctx, v150, v1804, v1805);
                                let v1814 = constructor_vec_not_or(ctx, v150, v1786, v1811);
                                let v1815 = constructor_output_reg(ctx, v1814);
                                // Rule at src/isa/s390x/lower.isle line 3477.
                                return Some(v1815);
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1794 = C::put_in_reg(ctx, v1774.1);
                                let v1795 = C::put_in_reg(ctx, v1774.0);
                                let v1800 = constructor_vec_fcmphe(ctx, v150, v1794, v1795);
                                let v1802 = constructor_vec_not(ctx, v150, v1800);
                                let v1803 = constructor_output_reg(ctx, v1802);
                                // Rule at src/isa/s390x/lower.isle line 3469.
                                return Some(v1803);
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1794 = C::put_in_reg(ctx, v1774.1);
                                let v1795 = C::put_in_reg(ctx, v1774.0);
                                let v1796 = constructor_vec_fcmph(ctx, v150, v1794, v1795);
                                let v1798 = constructor_vec_not(ctx, v150, v1796);
                                let v1799 = constructor_output_reg(ctx, v1798);
                                // Rule at src/isa/s390x/lower.isle line 3465.
                                return Some(v1799);
                            }
                        }
                        &FloatCC::UnorderedOrLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1790 = constructor_vec_fcmphe(ctx, v150, v1780, v1781);
                                let v1792 = constructor_vec_not(ctx, v150, v1790);
                                let v1793 = constructor_output_reg(ctx, v1792);
                                // Rule at src/isa/s390x/lower.isle line 3461.
                                return Some(v1793);
                            }
                        }
                        &FloatCC::UnorderedOrLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1774 = C::unpack_value_array_2(ctx, v1772);
                                let v1780 = C::put_in_reg(ctx, v1774.0);
                                let v1781 = C::put_in_reg(ctx, v1774.1);
                                let v1786 = constructor_vec_fcmph(ctx, v150, v1780, v1781);
                                let v1788 = constructor_vec_not(ctx, v150, v1786);
                                let v1789 = constructor_output_reg(ctx, v1788);
                                // Rule at src/isa/s390x/lower.isle line 3457.
                                return Some(v1789);
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v61 = C::fits_in_64(ctx, v3);
                    if let Some(v62) = v61 {
                        let v1774 = C::unpack_value_array_2(ctx, v1772);
                        let v1777 = &constructor_fcmp_val(ctx, v1773, v1774.0, v1774.1);
                        let v1778 = constructor_lower_bool(ctx, v62, v1777);
                        let v1779 = constructor_output_reg(ctx, v1778);
                        // Rule at src/isa/s390x/lower.isle line 3439.
                        return Some(v1779);
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1452,
            func_ref: v1453,
        } => {
            if let &Opcode::FuncAddr = v1452 {
                let v1454 = C::func_ref_data(ctx, v1453);
                let v1458 = C::reloc_distance_near(ctx, v1454.2);
                if let Some(v1459) = v1458 {
                    let v1461 = C::memflags_trusted(ctx);
                    let v1462 = &C::memarg_symbol(ctx, v1454.1, 0x0, v1461);
                    let v1463 = constructor_load_addr(ctx, v1462);
                    let v1464 = constructor_output_reg(ctx, v1463);
                    // Rule at src/isa/s390x/lower.isle line 2245.
                    return Some(v1464);
                }
                let v1466 = SymbolReloc::Absolute {
                    name: v1454.1,
                    offset: 0x0,
                };
                let v1467 = constructor_load_symbol_reloc(ctx, &v1466);
                let v1468 = constructor_output_reg(ctx, v1467);
                // Rule at src/isa/s390x/lower.isle line 2249.
                return Some(v1468);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1906,
            args: ref v1907,
            code: ref v1908,
        } => {
            if let &Opcode::UaddOverflowTrap = v1906 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v61 = C::fits_in_64(ctx, v3);
                    if let Some(v62) = v61 {
                        let v1909 = C::unpack_value_array_2(ctx, v1907);
                        let v1929 = C::def_inst(ctx, v1909.0);
                        if let Some(v1930) = v1929 {
                            let v1931 = &C::inst_data(ctx, v1930);
                            if let &InstructionData::Unary {
                                opcode: ref v1932,
                                arg: v1933,
                            } = v1931
                            {
                                if let &Opcode::Uextend = v1932 {
                                    let v1934 = C::value_type(ctx, v1933);
                                    if v1934 == I32 {
                                        let v1935 = C::put_in_reg(ctx, v1909.1);
                                        let v1936 = C::put_in_reg(ctx, v1933);
                                        let v1937 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v62, v1935, v1936,
                                            );
                                        let v1915 = &C::mask_as_cond(ctx, 0x3);
                                        let v1916 = &constructor_trap_if_impl(ctx, v1915, v1908);
                                        let v1938 = constructor_with_flags(ctx, v1937, v1916);
                                        let v1939 = C::output(ctx, v1938);
                                        // Rule at src/isa/s390x/lower.isle line 3847.
                                        return Some(v1939);
                                    }
                                }
                            }
                        }
                        let v1947 = C::u32_from_value(ctx, v1909.0);
                        if let Some(v1948) = v1947 {
                            let v1935 = C::put_in_reg(ctx, v1909.1);
                            let v1949 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v62, v1935, v1948,
                            );
                            let v1943 = &C::mask_as_cond(ctx, 0x3);
                            let v1944 = &constructor_trap_if_impl(ctx, v1943, v1908);
                            let v1950 = constructor_with_flags(ctx, v1949, v1944);
                            let v1951 = C::output(ctx, v1950);
                            // Rule at src/isa/s390x/lower.isle line 3859.
                            return Some(v1951);
                        }
                        let v1971 = C::sinkable_inst(ctx, v1909.0);
                        if let Some(v1972) = v1971 {
                            let v1973 = &C::inst_data(ctx, v1972);
                            if let &InstructionData::Load {
                                opcode: ref v1974,
                                arg: v1975,
                                flags: v1976,
                                offset: v1977,
                            } = v1973
                            {
                                match v1974 {
                                    &Opcode::Load => {
                                        let v1968 = C::value_type(ctx, v1909.0);
                                        let v1969 = C::ty_32_or_64(ctx, v1968);
                                        if let Some(v1970) = v1969 {
                                            let v1978 = C::bigendian(ctx, v1976);
                                            if let Some(v1979) = v1978 {
                                                let v1935 = C::put_in_reg(ctx, v1909.1);
                                                let v1980 = &constructor_sink_load(ctx, v1972);
                                                let v1981 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v62, v1935, v1980,
                                                    );
                                                let v1915 = &C::mask_as_cond(ctx, 0x3);
                                                let v1916 =
                                                    &constructor_trap_if_impl(ctx, v1915, v1908);
                                                let v1982 =
                                                    constructor_with_flags(ctx, v1981, v1916);
                                                let v1983 = C::output(ctx, v1982);
                                                // Rule at src/isa/s390x/lower.isle line 3871.
                                                return Some(v1983);
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v1978 = C::bigendian(ctx, v1976);
                                        if let Some(v1979) = v1978 {
                                            let v1935 = C::put_in_reg(ctx, v1909.1);
                                            let v1988 = &constructor_sink_uload32(ctx, v1972);
                                            let v1989 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v62, v1935, v1988);
                                            let v1915 = &C::mask_as_cond(ctx, 0x3);
                                            let v1916 =
                                                &constructor_trap_if_impl(ctx, v1915, v1908);
                                            let v1990 = constructor_with_flags(ctx, v1989, v1916);
                                            let v1991 = C::output(ctx, v1990);
                                            // Rule at src/isa/s390x/lower.isle line 3883.
                                            return Some(v1991);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1919 = C::def_inst(ctx, v1909.1);
                        if let Some(v1920) = v1919 {
                            let v1921 = &C::inst_data(ctx, v1920);
                            if let &InstructionData::Unary {
                                opcode: ref v1922,
                                arg: v1923,
                            } = v1921
                            {
                                if let &Opcode::Uextend = v1922 {
                                    let v1924 = C::value_type(ctx, v1923);
                                    if v1924 == I32 {
                                        let v1912 = C::put_in_reg(ctx, v1909.0);
                                        let v1925 = C::put_in_reg(ctx, v1923);
                                        let v1926 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v62, v1912, v1925,
                                            );
                                        let v1915 = &C::mask_as_cond(ctx, 0x3);
                                        let v1916 = &constructor_trap_if_impl(ctx, v1915, v1908);
                                        let v1927 = constructor_with_flags(ctx, v1926, v1916);
                                        let v1928 = C::output(ctx, v1927);
                                        // Rule at src/isa/s390x/lower.isle line 3842.
                                        return Some(v1928);
                                    }
                                }
                            }
                        }
                        let v1940 = C::u32_from_value(ctx, v1909.1);
                        if let Some(v1941) = v1940 {
                            let v1912 = C::put_in_reg(ctx, v1909.0);
                            let v1942 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v62, v1912, v1941,
                            );
                            let v1943 = &C::mask_as_cond(ctx, 0x3);
                            let v1944 = &constructor_trap_if_impl(ctx, v1943, v1908);
                            let v1945 = constructor_with_flags(ctx, v1942, v1944);
                            let v1946 = C::output(ctx, v1945);
                            // Rule at src/isa/s390x/lower.isle line 3854.
                            return Some(v1946);
                        }
                        let v1955 = C::sinkable_inst(ctx, v1909.1);
                        if let Some(v1956) = v1955 {
                            let v1957 = &C::inst_data(ctx, v1956);
                            if let &InstructionData::Load {
                                opcode: ref v1958,
                                arg: v1959,
                                flags: v1960,
                                offset: v1961,
                            } = v1957
                            {
                                match v1958 {
                                    &Opcode::Load => {
                                        let v1952 = C::value_type(ctx, v1909.1);
                                        let v1953 = C::ty_32_or_64(ctx, v1952);
                                        if let Some(v1954) = v1953 {
                                            let v1962 = C::bigendian(ctx, v1960);
                                            if let Some(v1963) = v1962 {
                                                let v1912 = C::put_in_reg(ctx, v1909.0);
                                                let v1964 = &constructor_sink_load(ctx, v1956);
                                                let v1965 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v62, v1912, v1964,
                                                    );
                                                let v1915 = &C::mask_as_cond(ctx, 0x3);
                                                let v1916 =
                                                    &constructor_trap_if_impl(ctx, v1915, v1908);
                                                let v1966 =
                                                    constructor_with_flags(ctx, v1965, v1916);
                                                let v1967 = C::output(ctx, v1966);
                                                // Rule at src/isa/s390x/lower.isle line 3866.
                                                return Some(v1967);
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v1962 = C::bigendian(ctx, v1960);
                                        if let Some(v1963) = v1962 {
                                            let v1912 = C::put_in_reg(ctx, v1909.0);
                                            let v1984 = &constructor_sink_uload32(ctx, v1956);
                                            let v1985 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v62, v1912, v1984);
                                            let v1915 = &C::mask_as_cond(ctx, 0x3);
                                            let v1916 =
                                                &constructor_trap_if_impl(ctx, v1915, v1908);
                                            let v1986 = constructor_with_flags(ctx, v1985, v1916);
                                            let v1987 = C::output(ctx, v1986);
                                            // Rule at src/isa/s390x/lower.isle line 3878.
                                            return Some(v1987);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1912 = C::put_in_reg(ctx, v1909.0);
                        let v1913 = C::put_in_reg(ctx, v1909.1);
                        let v1914 =
                            &constructor_add_logical_reg_with_flags_paired(ctx, v62, v1912, v1913);
                        let v1915 = &C::mask_as_cond(ctx, 0x3);
                        let v1916 = &constructor_trap_if_impl(ctx, v1915, v1908);
                        let v1917 = constructor_with_flags(ctx, v1914, v1916);
                        let v1918 = C::output(ctx, v1917);
                        // Rule at src/isa/s390x/lower.isle line 3836.
                        return Some(v1918);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1737,
            args: ref v1738,
            cond: ref v1739,
        } => {
            if let &Opcode::Icmp = v1737 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v1739 {
                        &IntCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1747 = C::put_in_reg(ctx, v1740.0);
                                let v1748 = C::put_in_reg(ctx, v1740.1);
                                let v1749 = constructor_vec_cmpeq(ctx, v150, v1747, v1748);
                                let v1750 = constructor_output_reg(ctx, v1749);
                                // Rule at src/isa/s390x/lower.isle line 3413.
                                return Some(v1750);
                            }
                        }
                        &IntCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1747 = C::put_in_reg(ctx, v1740.0);
                                let v1748 = C::put_in_reg(ctx, v1740.1);
                                let v1749 = constructor_vec_cmpeq(ctx, v150, v1747, v1748);
                                let v1751 = constructor_vec_not(ctx, v150, v1749);
                                let v1752 = constructor_output_reg(ctx, v1751);
                                // Rule at src/isa/s390x/lower.isle line 3415.
                                return Some(v1752);
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1747 = C::put_in_reg(ctx, v1740.0);
                                let v1748 = C::put_in_reg(ctx, v1740.1);
                                let v1753 = constructor_vec_cmph(ctx, v150, v1747, v1748);
                                let v1754 = constructor_output_reg(ctx, v1753);
                                // Rule at src/isa/s390x/lower.isle line 3417.
                                return Some(v1754);
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1757 = C::put_in_reg(ctx, v1740.1);
                                let v1758 = C::put_in_reg(ctx, v1740.0);
                                let v1759 = constructor_vec_cmph(ctx, v150, v1757, v1758);
                                let v1761 = constructor_vec_not(ctx, v150, v1759);
                                let v1762 = constructor_output_reg(ctx, v1761);
                                // Rule at src/isa/s390x/lower.isle line 3423.
                                return Some(v1762);
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1757 = C::put_in_reg(ctx, v1740.1);
                                let v1758 = C::put_in_reg(ctx, v1740.0);
                                let v1759 = constructor_vec_cmph(ctx, v150, v1757, v1758);
                                let v1760 = constructor_output_reg(ctx, v1759);
                                // Rule at src/isa/s390x/lower.isle line 3421.
                                return Some(v1760);
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1747 = C::put_in_reg(ctx, v1740.0);
                                let v1748 = C::put_in_reg(ctx, v1740.1);
                                let v1753 = constructor_vec_cmph(ctx, v150, v1747, v1748);
                                let v1755 = constructor_vec_not(ctx, v150, v1753);
                                let v1756 = constructor_output_reg(ctx, v1755);
                                // Rule at src/isa/s390x/lower.isle line 3419.
                                return Some(v1756);
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1747 = C::put_in_reg(ctx, v1740.0);
                                let v1748 = C::put_in_reg(ctx, v1740.1);
                                let v1763 = constructor_vec_cmphl(ctx, v150, v1747, v1748);
                                let v1764 = constructor_output_reg(ctx, v1763);
                                // Rule at src/isa/s390x/lower.isle line 3425.
                                return Some(v1764);
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1757 = C::put_in_reg(ctx, v1740.1);
                                let v1758 = C::put_in_reg(ctx, v1740.0);
                                let v1767 = constructor_vec_cmphl(ctx, v150, v1757, v1758);
                                let v1769 = constructor_vec_not(ctx, v150, v1767);
                                let v1770 = constructor_output_reg(ctx, v1769);
                                // Rule at src/isa/s390x/lower.isle line 3431.
                                return Some(v1770);
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1757 = C::put_in_reg(ctx, v1740.1);
                                let v1758 = C::put_in_reg(ctx, v1740.0);
                                let v1767 = constructor_vec_cmphl(ctx, v150, v1757, v1758);
                                let v1768 = constructor_output_reg(ctx, v1767);
                                // Rule at src/isa/s390x/lower.isle line 3429.
                                return Some(v1768);
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v149 = C::ty_vec128(ctx, v3);
                            if let Some(v150) = v149 {
                                let v1740 = C::unpack_value_array_2(ctx, v1738);
                                let v1747 = C::put_in_reg(ctx, v1740.0);
                                let v1748 = C::put_in_reg(ctx, v1740.1);
                                let v1763 = constructor_vec_cmphl(ctx, v150, v1747, v1748);
                                let v1765 = constructor_vec_not(ctx, v150, v1763);
                                let v1766 = constructor_output_reg(ctx, v1765);
                                // Rule at src/isa/s390x/lower.isle line 3427.
                                return Some(v1766);
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v61 = C::fits_in_64(ctx, v3);
                    if let Some(v62) = v61 {
                        let v1740 = C::unpack_value_array_2(ctx, v1738);
                        let v1744 = &constructor_icmp_val(ctx, true, v1739, v1740.0, v1740.1);
                        let v1745 = constructor_lower_bool(ctx, v62, v1744);
                        let v1746 = constructor_output_reg(ctx, v1745);
                        // Rule at src/isa/s390x/lower.isle line 3291.
                        return Some(v1746);
                    }
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1496,
            arg: v1497,
            flags: v1498,
            offset: v1499,
        } => {
            match v1496 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v1433 = &C::lane_order(ctx);
                            match v1433 {
                                &LaneOrder::LittleEndian => {
                                    let v1504 = C::bigendian(ctx, v1498);
                                    if let Some(v1505) = v1504 {
                                        let v1533 = constructor_vec_load_elt_rev(
                                            ctx, v37, v1498, v1497, v1499,
                                        );
                                        let v1534 = constructor_output_reg(ctx, v1533);
                                        // Rule at src/isa/s390x/lower.isle line 2357.
                                        return Some(v1534);
                                    }
                                    let v1509 = C::littleendian(ctx, v1498);
                                    if let Some(v1510) = v1509 {
                                        let v1535 = constructor_vec_load_full_rev(
                                            ctx, v37, v1498, v1497, v1499,
                                        );
                                        let v1536 = constructor_output_reg(ctx, v1535);
                                        // Rule at src/isa/s390x/lower.isle line 2362.
                                        return Some(v1536);
                                    }
                                }
                                &LaneOrder::BigEndian => {
                                    let v1504 = C::bigendian(ctx, v1498);
                                    if let Some(v1505) = v1504 {
                                        let v1501 =
                                            &constructor_lower_address(ctx, v1498, v1497, v1499);
                                        let v1529 = constructor_vec_load(ctx, v37, v1501);
                                        let v1530 = constructor_output_reg(ctx, v1529);
                                        // Rule at src/isa/s390x/lower.isle line 2347.
                                        return Some(v1530);
                                    }
                                    let v1509 = C::littleendian(ctx, v1498);
                                    if let Some(v1510) = v1509 {
                                        let v1531 = constructor_vec_load_byte_rev(
                                            ctx, v37, v1498, v1497, v1499,
                                        );
                                        let v1532 = constructor_output_reg(ctx, v1531);
                                        // Rule at src/isa/s390x/lower.isle line 2352.
                                        return Some(v1532);
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8 => {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1502 = constructor_zext32_mem(ctx, I8, v1501);
                                let v1503 = constructor_output_reg(ctx, v1502);
                                // Rule at src/isa/s390x/lower.isle line 2295.
                                return Some(v1503);
                            }
                            I16 => {
                                let v1504 = C::bigendian(ctx, v1498);
                                if let Some(v1505) = v1504 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1507 = constructor_zext32_mem(ctx, I16, v1501);
                                    let v1508 = constructor_output_reg(ctx, v1507);
                                    // Rule at src/isa/s390x/lower.isle line 2299.
                                    return Some(v1508);
                                }
                                let v1509 = C::littleendian(ctx, v1498);
                                if let Some(v1510) = v1509 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1511 = constructor_loadrev16(ctx, v1501);
                                    let v1512 = constructor_output_reg(ctx, v1511);
                                    // Rule at src/isa/s390x/lower.isle line 2303.
                                    return Some(v1512);
                                }
                            }
                            I32 => {
                                let v1504 = C::bigendian(ctx, v1498);
                                if let Some(v1505) = v1504 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1513 = constructor_load32(ctx, v1501);
                                    let v1514 = constructor_output_reg(ctx, v1513);
                                    // Rule at src/isa/s390x/lower.isle line 2307.
                                    return Some(v1514);
                                }
                                let v1509 = C::littleendian(ctx, v1498);
                                if let Some(v1510) = v1509 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1515 = constructor_loadrev32(ctx, v1501);
                                    let v1516 = constructor_output_reg(ctx, v1515);
                                    // Rule at src/isa/s390x/lower.isle line 2311.
                                    return Some(v1516);
                                }
                            }
                            I64 => {
                                let v1504 = C::bigendian(ctx, v1498);
                                if let Some(v1505) = v1504 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1517 = constructor_load64(ctx, v1501);
                                    let v1518 = constructor_output_reg(ctx, v1517);
                                    // Rule at src/isa/s390x/lower.isle line 2315.
                                    return Some(v1518);
                                }
                                let v1509 = C::littleendian(ctx, v1498);
                                if let Some(v1510) = v1509 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1519 = constructor_loadrev64(ctx, v1501);
                                    let v1520 = constructor_output_reg(ctx, v1519);
                                    // Rule at src/isa/s390x/lower.isle line 2319.
                                    return Some(v1520);
                                }
                            }
                            R64 => {
                                let v1504 = C::bigendian(ctx, v1498);
                                if let Some(v1505) = v1504 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1517 = constructor_load64(ctx, v1501);
                                    let v1518 = constructor_output_reg(ctx, v1517);
                                    // Rule at src/isa/s390x/lower.isle line 2323.
                                    return Some(v1518);
                                }
                                let v1509 = C::littleendian(ctx, v1498);
                                if let Some(v1510) = v1509 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1519 = constructor_loadrev64(ctx, v1501);
                                    let v1520 = constructor_output_reg(ctx, v1519);
                                    // Rule at src/isa/s390x/lower.isle line 2327.
                                    return Some(v1520);
                                }
                            }
                            F32 => {
                                let v1504 = C::bigendian(ctx, v1498);
                                if let Some(v1505) = v1504 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1521 =
                                        constructor_vec_load_lane_undef(ctx, F32X4, v1501, 0x0);
                                    let v1522 = constructor_output_reg(ctx, v1521);
                                    // Rule at src/isa/s390x/lower.isle line 2331.
                                    return Some(v1522);
                                }
                                let v1509 = C::littleendian(ctx, v1498);
                                if let Some(v1510) = v1509 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1523 = constructor_vec_load_lane_little_undef(
                                        ctx, F32X4, v1501, 0x0,
                                    );
                                    let v1524 = constructor_output_reg(ctx, v1523);
                                    // Rule at src/isa/s390x/lower.isle line 2335.
                                    return Some(v1524);
                                }
                            }
                            F64 => {
                                let v1504 = C::bigendian(ctx, v1498);
                                if let Some(v1505) = v1504 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1525 =
                                        constructor_vec_load_lane_undef(ctx, F64X2, v1501, 0x0);
                                    let v1526 = constructor_output_reg(ctx, v1525);
                                    // Rule at src/isa/s390x/lower.isle line 2339.
                                    return Some(v1526);
                                }
                                let v1509 = C::littleendian(ctx, v1498);
                                if let Some(v1510) = v1509 {
                                    let v1501 =
                                        &constructor_lower_address(ctx, v1498, v1497, v1499);
                                    let v1527 = constructor_vec_load_lane_little_undef(
                                        ctx, F64X2, v1501, 0x0,
                                    );
                                    let v1528 = constructor_output_reg(ctx, v1527);
                                    // Rule at src/isa/s390x/lower.isle line 2343.
                                    return Some(v1528);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                            let v1537 = constructor_zext64_mem(ctx, I8, v1501);
                            let v1538 = constructor_output_reg(ctx, v1537);
                            // Rule at src/isa/s390x/lower.isle line 2459.
                            return Some(v1538);
                        }
                        let v575 = C::gpr32_ty(ctx, v3);
                        if let Some(v576) = v575 {
                            let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                            let v1502 = constructor_zext32_mem(ctx, I8, v1501);
                            let v1503 = constructor_output_reg(ctx, v1502);
                            // Rule at src/isa/s390x/lower.isle line 2455.
                            return Some(v1503);
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                            let v1541 = constructor_sext64_mem(ctx, I8, v1501);
                            let v1542 = constructor_output_reg(ctx, v1541);
                            // Rule at src/isa/s390x/lower.isle line 2470.
                            return Some(v1542);
                        }
                        let v575 = C::gpr32_ty(ctx, v3);
                        if let Some(v576) = v575 {
                            let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                            let v1539 = constructor_sext32_mem(ctx, I8, v1501);
                            let v1540 = constructor_output_reg(ctx, v1539);
                            // Rule at src/isa/s390x/lower.isle line 2466.
                            return Some(v1540);
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1504 = C::bigendian(ctx, v1498);
                        if let Some(v1505) = v1504 {
                            let v3 = C::value_type(ctx, v2);
                            let v579 = C::gpr64_ty(ctx, v3);
                            if let Some(v580) = v579 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1545 = constructor_zext64_mem(ctx, I16, v1501);
                                let v1546 = constructor_output_reg(ctx, v1545);
                                // Rule at src/isa/s390x/lower.isle line 2488.
                                return Some(v1546);
                            }
                            let v575 = C::gpr32_ty(ctx, v3);
                            if let Some(v576) = v575 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1507 = constructor_zext32_mem(ctx, I16, v1501);
                                let v1508 = constructor_output_reg(ctx, v1507);
                                // Rule at src/isa/s390x/lower.isle line 2477.
                                return Some(v1508);
                            }
                        }
                        let v1509 = C::littleendian(ctx, v1498);
                        if let Some(v1510) = v1509 {
                            let v3 = C::value_type(ctx, v2);
                            let v579 = C::gpr64_ty(ctx, v3);
                            if let Some(v580) = v579 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1511 = constructor_loadrev16(ctx, v1501);
                                let v1547 = constructor_zext64_reg(ctx, I16, v1511);
                                let v1548 = constructor_output_reg(ctx, v1547);
                                // Rule at src/isa/s390x/lower.isle line 2493.
                                return Some(v1548);
                            }
                            let v575 = C::gpr32_ty(ctx, v3);
                            if let Some(v576) = v575 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1511 = constructor_loadrev16(ctx, v1501);
                                let v1543 = constructor_zext32_reg(ctx, I16, v1511);
                                let v1544 = constructor_output_reg(ctx, v1543);
                                // Rule at src/isa/s390x/lower.isle line 2482.
                                return Some(v1544);
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1504 = C::bigendian(ctx, v1498);
                        if let Some(v1505) = v1504 {
                            let v3 = C::value_type(ctx, v2);
                            let v579 = C::gpr64_ty(ctx, v3);
                            if let Some(v580) = v579 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1553 = constructor_sext64_mem(ctx, I16, v1501);
                                let v1554 = constructor_output_reg(ctx, v1553);
                                // Rule at src/isa/s390x/lower.isle line 2513.
                                return Some(v1554);
                            }
                            let v575 = C::gpr32_ty(ctx, v3);
                            if let Some(v576) = v575 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1549 = constructor_sext32_mem(ctx, I16, v1501);
                                let v1550 = constructor_output_reg(ctx, v1549);
                                // Rule at src/isa/s390x/lower.isle line 2502.
                                return Some(v1550);
                            }
                        }
                        let v1509 = C::littleendian(ctx, v1498);
                        if let Some(v1510) = v1509 {
                            let v3 = C::value_type(ctx, v2);
                            let v579 = C::gpr64_ty(ctx, v3);
                            if let Some(v580) = v579 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1511 = constructor_loadrev16(ctx, v1501);
                                let v1555 = constructor_sext64_reg(ctx, I16, v1511);
                                let v1556 = constructor_output_reg(ctx, v1555);
                                // Rule at src/isa/s390x/lower.isle line 2518.
                                return Some(v1556);
                            }
                            let v575 = C::gpr32_ty(ctx, v3);
                            if let Some(v576) = v575 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1511 = constructor_loadrev16(ctx, v1501);
                                let v1551 = constructor_sext32_reg(ctx, I16, v1511);
                                let v1552 = constructor_output_reg(ctx, v1551);
                                // Rule at src/isa/s390x/lower.isle line 2507.
                                return Some(v1552);
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v1504 = C::bigendian(ctx, v1498);
                            if let Some(v1505) = v1504 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1557 = constructor_zext64_mem(ctx, I32, v1501);
                                let v1558 = constructor_output_reg(ctx, v1557);
                                // Rule at src/isa/s390x/lower.isle line 2527.
                                return Some(v1558);
                            }
                            let v1509 = C::littleendian(ctx, v1498);
                            if let Some(v1510) = v1509 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1515 = constructor_loadrev32(ctx, v1501);
                                let v1559 = constructor_zext64_reg(ctx, I32, v1515);
                                let v1560 = constructor_output_reg(ctx, v1559);
                                // Rule at src/isa/s390x/lower.isle line 2532.
                                return Some(v1560);
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v1504 = C::bigendian(ctx, v1498);
                            if let Some(v1505) = v1504 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1561 = constructor_sext64_mem(ctx, I32, v1501);
                                let v1562 = constructor_output_reg(ctx, v1561);
                                // Rule at src/isa/s390x/lower.isle line 2541.
                                return Some(v1562);
                            }
                            let v1509 = C::littleendian(ctx, v1498);
                            if let Some(v1510) = v1509 {
                                let v1501 = &constructor_lower_address(ctx, v1498, v1497, v1499);
                                let v1515 = constructor_loadrev32(ctx, v1501);
                                let v1563 = constructor_sext64_reg(ctx, I32, v1515);
                                let v1564 = constructor_output_reg(ctx, v1563);
                                // Rule at src/isa/s390x/lower.isle line 2546.
                                return Some(v1564);
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1565 = constructor_load_v64(ctx, I8X16, v1498, v1497, v1499);
                            let v1566 = constructor_vec_unpacku_high(ctx, I8X16, v1565);
                            let v1567 = constructor_output_reg(ctx, v1566);
                            // Rule at src/isa/s390x/lower.isle line 2555.
                            return Some(v1567);
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1565 = constructor_load_v64(ctx, I8X16, v1498, v1497, v1499);
                            let v1568 = constructor_vec_unpacks_high(ctx, I8X16, v1565);
                            let v1569 = constructor_output_reg(ctx, v1568);
                            // Rule at src/isa/s390x/lower.isle line 2559.
                            return Some(v1569);
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1570 = constructor_load_v64(ctx, I16X8, v1498, v1497, v1499);
                            let v1571 = constructor_vec_unpacku_high(ctx, I16X8, v1570);
                            let v1572 = constructor_output_reg(ctx, v1571);
                            // Rule at src/isa/s390x/lower.isle line 2563.
                            return Some(v1572);
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1570 = constructor_load_v64(ctx, I16X8, v1498, v1497, v1499);
                            let v1573 = constructor_vec_unpacks_high(ctx, I16X8, v1570);
                            let v1574 = constructor_output_reg(ctx, v1573);
                            // Rule at src/isa/s390x/lower.isle line 2567.
                            return Some(v1574);
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1575 = constructor_load_v64(ctx, I32X4, v1498, v1497, v1499);
                            let v1576 = constructor_vec_unpacku_high(ctx, I32X4, v1575);
                            let v1577 = constructor_output_reg(ctx, v1576);
                            // Rule at src/isa/s390x/lower.isle line 2571.
                            return Some(v1577);
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1575 = constructor_load_v64(ctx, I32X4, v1498, v1497, v1499);
                            let v1578 = constructor_vec_unpacks_high(ctx, I32X4, v1575);
                            let v1579 = constructor_output_reg(ctx, v1578);
                            // Rule at src/isa/s390x/lower.isle line 2575.
                            return Some(v1579);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1056,
            arg: v1057,
            flags: v1058,
        } => {
            match v1056 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v171 = C::multi_lane(ctx, v3);
                        if let Some(v172) = v171 {
                            let v1059 = C::value_type(ctx, v1057);
                            let v1078 = C::multi_lane(ctx, v1059);
                            if let Some(v1079) = v1078 {
                                if v172.0 == v1079.0 {
                                    if v172.1 == v1079.1 {
                                        let v1071 = constructor_output_value(ctx, v1057);
                                        // Rule at src/isa/s390x/lower.isle line 1747.
                                        return Some(v1071);
                                    }
                                }
                            }
                        }
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v1059 = C::value_type(ctx, v1057);
                            let v1082 = C::vr128_ty(ctx, v1059);
                            if let Some(v1083) = v1082 {
                                let v1060 = C::put_in_reg(ctx, v1057);
                                let v1084 = &constructor_lane_order_from_memflags(ctx, v1058);
                                let v1085 = constructor_abi_vec_elt_rev(ctx, v1084, v1083, v1060);
                                let v1086 = constructor_abi_vec_elt_rev(ctx, v1084, v37, v1085);
                                let v1087 = constructor_output_reg(ctx, v1086);
                                // Rule at src/isa/s390x/lower.isle line 1757.
                                return Some(v1087);
                            }
                        }
                        let v1074 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1075) = v1074 {
                            let v1059 = C::value_type(ctx, v1057);
                            let v1076 = C::ty_scalar_float(ctx, v1059);
                            if let Some(v1077) = v1076 {
                                let v1071 = constructor_output_value(ctx, v1057);
                                // Rule at src/isa/s390x/lower.isle line 1743.
                                return Some(v1071);
                            }
                        }
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v1059 = C::value_type(ctx, v1057);
                            let v1072 = C::gpr64_ty(ctx, v1059);
                            if let Some(v1073) = v1072 {
                                let v1071 = constructor_output_value(ctx, v1057);
                                // Rule at src/isa/s390x/lower.isle line 1739.
                                return Some(v1071);
                            }
                        }
                        let v575 = C::gpr32_ty(ctx, v3);
                        if let Some(v576) = v575 {
                            let v1059 = C::value_type(ctx, v1057);
                            let v1069 = C::gpr32_ty(ctx, v1059);
                            if let Some(v1070) = v1069 {
                                let v1071 = constructor_output_value(ctx, v1057);
                                // Rule at src/isa/s390x/lower.isle line 1737.
                                return Some(v1071);
                            }
                        }
                        match v3 {
                            I32 => {
                                let v1059 = C::value_type(ctx, v1057);
                                if v1059 == F32 {
                                    let v1060 = C::put_in_reg(ctx, v1057);
                                    let v53 = C::zero_reg(ctx);
                                    let v1067 =
                                        constructor_vec_extract_lane(ctx, F32X4, v1060, 0x0, v53);
                                    let v1068 = constructor_output_reg(ctx, v1067);
                                    // Rule at src/isa/s390x/lower.isle line 1733.
                                    return Some(v1068);
                                }
                            }
                            I64 => {
                                let v1059 = C::value_type(ctx, v1057);
                                if v1059 == F64 {
                                    let v1060 = C::put_in_reg(ctx, v1057);
                                    let v53 = C::zero_reg(ctx);
                                    let v1063 =
                                        constructor_vec_extract_lane(ctx, F64X2, v1060, 0x0, v53);
                                    let v1064 = constructor_output_reg(ctx, v1063);
                                    // Rule at src/isa/s390x/lower.isle line 1725.
                                    return Some(v1064);
                                }
                            }
                            F32 => {
                                let v1059 = C::value_type(ctx, v1057);
                                if v1059 == I32 {
                                    let v1060 = C::put_in_reg(ctx, v1057);
                                    let v53 = C::zero_reg(ctx);
                                    let v1065 = constructor_vec_insert_lane_undef(
                                        ctx, F32X4, v1060, 0x0, v53,
                                    );
                                    let v1066 = constructor_output_reg(ctx, v1065);
                                    // Rule at src/isa/s390x/lower.isle line 1729.
                                    return Some(v1066);
                                }
                            }
                            F64 => {
                                let v1059 = C::value_type(ctx, v1057);
                                if v1059 == I64 {
                                    let v1060 = C::put_in_reg(ctx, v1057);
                                    let v53 = C::zero_reg(ctx);
                                    let v1061 = constructor_vec_insert_lane_undef(
                                        ctx, F64X2, v1060, 0x0, v53,
                                    );
                                    let v1062 = constructor_output_reg(ctx, v1061);
                                    // Rule at src/isa/s390x/lower.isle line 1721.
                                    return Some(v1062);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1700 = C::zero_offset(ctx);
                                let v1701 = &constructor_lower_address(ctx, v1058, v1057, v1700);
                                let v1702 = constructor_zext32_mem(ctx, I8, v1701);
                                let v1703 = constructor_output_reg(ctx, v1702);
                                // Rule at src/isa/s390x/lower.isle line 3202.
                                return Some(v1703);
                            }
                            I16 => {
                                let v1704 = C::bigendian(ctx, v1058);
                                if let Some(v1705) = v1704 {
                                    let v1700 = C::zero_offset(ctx);
                                    let v1701 =
                                        &constructor_lower_address(ctx, v1058, v1057, v1700);
                                    let v1706 = constructor_zext32_mem(ctx, I16, v1701);
                                    let v1707 = constructor_output_reg(ctx, v1706);
                                    // Rule at src/isa/s390x/lower.isle line 3206.
                                    return Some(v1707);
                                }
                                let v1708 = C::littleendian(ctx, v1058);
                                if let Some(v1709) = v1708 {
                                    let v1700 = C::zero_offset(ctx);
                                    let v1701 =
                                        &constructor_lower_address(ctx, v1058, v1057, v1700);
                                    let v1710 = constructor_loadrev16(ctx, v1701);
                                    let v1711 = constructor_output_reg(ctx, v1710);
                                    // Rule at src/isa/s390x/lower.isle line 3210.
                                    return Some(v1711);
                                }
                            }
                            I32 => {
                                let v1704 = C::bigendian(ctx, v1058);
                                if let Some(v1705) = v1704 {
                                    let v1700 = C::zero_offset(ctx);
                                    let v1701 =
                                        &constructor_lower_address(ctx, v1058, v1057, v1700);
                                    let v1712 = constructor_load32(ctx, v1701);
                                    let v1713 = constructor_output_reg(ctx, v1712);
                                    // Rule at src/isa/s390x/lower.isle line 3214.
                                    return Some(v1713);
                                }
                                let v1708 = C::littleendian(ctx, v1058);
                                if let Some(v1709) = v1708 {
                                    let v1700 = C::zero_offset(ctx);
                                    let v1701 =
                                        &constructor_lower_address(ctx, v1058, v1057, v1700);
                                    let v1714 = constructor_loadrev32(ctx, v1701);
                                    let v1715 = constructor_output_reg(ctx, v1714);
                                    // Rule at src/isa/s390x/lower.isle line 3218.
                                    return Some(v1715);
                                }
                            }
                            I64 => {
                                let v1704 = C::bigendian(ctx, v1058);
                                if let Some(v1705) = v1704 {
                                    let v1700 = C::zero_offset(ctx);
                                    let v1701 =
                                        &constructor_lower_address(ctx, v1058, v1057, v1700);
                                    let v1716 = constructor_load64(ctx, v1701);
                                    let v1717 = constructor_output_reg(ctx, v1716);
                                    // Rule at src/isa/s390x/lower.isle line 3222.
                                    return Some(v1717);
                                }
                                let v1708 = C::littleendian(ctx, v1058);
                                if let Some(v1709) = v1708 {
                                    let v1700 = C::zero_offset(ctx);
                                    let v1701 =
                                        &constructor_lower_address(ctx, v1058, v1057, v1700);
                                    let v1718 = constructor_loadrev64(ctx, v1701);
                                    let v1719 = constructor_output_reg(ctx, v1718);
                                    // Rule at src/isa/s390x/lower.isle line 3226.
                                    return Some(v1719);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1992,
            args: v1993,
        } => {
            if let &Opcode::Return = v1992 {
                let v1994 = C::value_list_slice(ctx, v1993);
                let v1995 = constructor_lower_return(ctx, v1994);
                // Rule at src/isa/s390x/lower.isle line 3891.
                return Some(v1995);
            }
        }
        &InstructionData::NullAry { opcode: ref v30 } => {
            match v30 {
                &Opcode::Debugtrap => {
                    let v1904 = &constructor_debugtrap_impl(ctx);
                    let v1905 = constructor_side_effect(ctx, v1904);
                    // Rule at src/isa/s390x/lower.isle line 3817.
                    return Some(v1905);
                }
                &Opcode::GetFramePointer => {
                    let v2054 = &C::memarg_stack_off(ctx, 0x0, 0x0);
                    let v2055 = constructor_load64(ctx, v2054);
                    let v2056 = constructor_output_reg(ctx, v2055);
                    // Rule at src/isa/s390x/lower.isle line 3977.
                    return Some(v2056);
                }
                &Opcode::GetStackPointer => {
                    let v2052 = constructor_sp(ctx);
                    let v2053 = constructor_output_reg(ctx, v2052);
                    // Rule at src/isa/s390x/lower.isle line 3974.
                    return Some(v2053);
                }
                &Opcode::GetReturnAddress => {
                    let v2058 = &C::memarg_initial_sp_offset(ctx, 0x70);
                    let v2059 = constructor_load64(ctx, v2058);
                    let v2060 = constructor_output_reg(ctx, v2059);
                    // Rule at src/isa/s390x/lower.isle line 3980.
                    return Some(v2060);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = constructor_imm(ctx, v3, 0x0);
                        let v33 = constructor_output_reg(ctx, v32);
                        // Rule at src/isa/s390x/lower.isle line 39.
                        return Some(v33);
                    }
                }
                &Opcode::Nop => {
                    let v34 = C::invalid_reg(ctx);
                    let v35 = constructor_output_reg(ctx, v34);
                    // Rule at src/isa/s390x/lower.isle line 45.
                    return Some(v35);
                }
                &Opcode::Fence => {
                    let v1735 = &constructor_fence_impl(ctx);
                    let v1736 = constructor_side_effect(ctx, v1735);
                    // Rule at src/isa/s390x/lower.isle line 3258.
                    return Some(v1736);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1236,
            args: ref v1237,
            imm: v1238,
        } => {
            if let &Opcode::Shuffle = v1236 {
                let v1242 = C::u128_from_immediate(ctx, v1238);
                if let Some(v1243) = v1242 {
                    let v1244 = C::shuffle_mask_from_u128(ctx, v1243);
                    match v1244.1 {
                        0xF0F => {
                            let v1259 = C::u64_pair_split(ctx, v1244.0);
                            let v1262 = C::u32_pair_split(ctx, v1259.0);
                            let v1274 = C::u16_pair_split(ctx, v1262.1);
                            let v1277 = C::u8_pair_split(ctx, v1274.0);
                            match v1277.0 {
                                0x0 => {
                                    if v1277.1 == 0x1 {
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0x2 {
                                            if v1280.1 == 0x3 {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                if v1298.0 == 0x4 {
                                                    if v1298.1 == 0x5 {
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0x6 {
                                                            if v1301.1 == 0x7 {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1254 =
                                                                    C::put_in_reg(ctx, v1239.0);
                                                                let v1393 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1254,
                                                                    );
                                                                let v1394 = constructor_output_reg(
                                                                    ctx, v1393,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2154.
                                                                return Some(v1394);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1277.1 == 0x9 {
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0xA {
                                            if v1280.1 == 0xB {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                if v1298.0 == 0xC {
                                                    if v1298.1 == 0xD {
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0xE {
                                                            if v1301.1 == 0xF {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1254 =
                                                                    C::put_in_reg(ctx, v1239.0);
                                                                let v1405 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1254,
                                                                    );
                                                                let v1406 = constructor_output_reg(
                                                                    ctx, v1405,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2168.
                                                                return Some(v1406);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1277.1 == 0x11 {
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0x12 {
                                            if v1280.1 == 0x13 {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                if v1298.0 == 0x14 {
                                                    if v1298.1 == 0x15 {
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0x16 {
                                                            if v1301.1 == 0x17 {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1312 =
                                                                    C::put_in_reg(ctx, v1239.1);
                                                                let v1399 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1312,
                                                                    );
                                                                let v1400 = constructor_output_reg(
                                                                    ctx, v1399,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2160.
                                                                return Some(v1400);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1277.1 == 0x19 {
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0x1A {
                                            if v1280.1 == 0x1B {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                if v1298.0 == 0x1C {
                                                    if v1298.1 == 0x1D {
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0x1E {
                                                            if v1301.1 == 0x1F {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1312 =
                                                                    C::put_in_reg(ctx, v1239.1);
                                                                let v1411 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1312,
                                                                    );
                                                                let v1412 = constructor_output_reg(
                                                                    ctx, v1411,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2174.
                                                                return Some(v1412);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x3333 => {
                            let v1259 = C::u64_pair_split(ctx, v1244.0);
                            let v1262 = C::u32_pair_split(ctx, v1259.0);
                            let v1265 = C::u16_pair_split(ctx, v1262.0);
                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                            match v1271.0 {
                                0x0 => {
                                    if v1271.1 == 0x1 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0x2 {
                                            if v1280.1 == 0x3 {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                if v1292.0 == 0x4 {
                                                    if v1292.1 == 0x5 {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0x6 {
                                                            if v1301.1 == 0x7 {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1254 =
                                                                    C::put_in_reg(ctx, v1239.0);
                                                                let v1395 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1254,
                                                                    );
                                                                let v1396 = constructor_output_reg(
                                                                    ctx, v1395,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2156.
                                                                return Some(v1396);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1271.1 == 0x9 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0xA {
                                            if v1280.1 == 0xB {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                if v1292.0 == 0xC {
                                                    if v1292.1 == 0xD {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0xE {
                                                            if v1301.1 == 0xF {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1254 =
                                                                    C::put_in_reg(ctx, v1239.0);
                                                                let v1407 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1254,
                                                                    );
                                                                let v1408 = constructor_output_reg(
                                                                    ctx, v1407,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2170.
                                                                return Some(v1408);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1271.1 == 0x11 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0x12 {
                                            if v1280.1 == 0x13 {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                if v1292.0 == 0x14 {
                                                    if v1292.1 == 0x15 {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0x16 {
                                                            if v1301.1 == 0x17 {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1312 =
                                                                    C::put_in_reg(ctx, v1239.1);
                                                                let v1401 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1312,
                                                                    );
                                                                let v1402 = constructor_output_reg(
                                                                    ctx, v1401,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2162.
                                                                return Some(v1402);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1271.1 == 0x19 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                        if v1280.0 == 0x1A {
                                            if v1280.1 == 0x1B {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                if v1292.0 == 0x1C {
                                                    if v1292.1 == 0x1D {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                        if v1301.0 == 0x1E {
                                                            if v1301.1 == 0x1F {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1312 =
                                                                    C::put_in_reg(ctx, v1239.1);
                                                                let v1413 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1312,
                                                                    );
                                                                let v1414 = constructor_output_reg(
                                                                    ctx, v1413,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2176.
                                                                return Some(v1414);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x5555 => {
                            let v1259 = C::u64_pair_split(ctx, v1244.0);
                            let v1262 = C::u32_pair_split(ctx, v1259.0);
                            let v1265 = C::u16_pair_split(ctx, v1262.0);
                            let v1268 = C::u8_pair_split(ctx, v1265.0);
                            match v1268.1 {
                                0x0 => {
                                    let v1271 = C::u8_pair_split(ctx, v1265.1);
                                    if v1271.1 == 0x1 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                        if v1277.1 == 0x2 {
                                            let v1280 = C::u8_pair_split(ctx, v1274.1);
                                            if v1280.1 == 0x3 {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1289 = C::u8_pair_split(ctx, v1286.0);
                                                if v1289.1 == 0x4 {
                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                    if v1292.1 == 0x5 {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                        if v1298.1 == 0x6 {
                                                            let v1301 =
                                                                C::u8_pair_split(ctx, v1295.1);
                                                            if v1301.1 == 0x7 {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1254 =
                                                                    C::put_in_reg(ctx, v1239.0);
                                                                let v1397 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1254,
                                                                    );
                                                                let v1398 = constructor_output_reg(
                                                                    ctx, v1397,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2158.
                                                                return Some(v1398);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    let v1271 = C::u8_pair_split(ctx, v1265.1);
                                    if v1271.1 == 0x9 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                        if v1277.1 == 0xA {
                                            let v1280 = C::u8_pair_split(ctx, v1274.1);
                                            if v1280.1 == 0xB {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1289 = C::u8_pair_split(ctx, v1286.0);
                                                if v1289.1 == 0xC {
                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                    if v1292.1 == 0xD {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                        if v1298.1 == 0xE {
                                                            let v1301 =
                                                                C::u8_pair_split(ctx, v1295.1);
                                                            if v1301.1 == 0xF {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1254 =
                                                                    C::put_in_reg(ctx, v1239.0);
                                                                let v1409 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1254,
                                                                    );
                                                                let v1410 = constructor_output_reg(
                                                                    ctx, v1409,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2172.
                                                                return Some(v1410);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    let v1271 = C::u8_pair_split(ctx, v1265.1);
                                    if v1271.1 == 0x11 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                        if v1277.1 == 0x12 {
                                            let v1280 = C::u8_pair_split(ctx, v1274.1);
                                            if v1280.1 == 0x13 {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1289 = C::u8_pair_split(ctx, v1286.0);
                                                if v1289.1 == 0x14 {
                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                    if v1292.1 == 0x15 {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                        if v1298.1 == 0x16 {
                                                            let v1301 =
                                                                C::u8_pair_split(ctx, v1295.1);
                                                            if v1301.1 == 0x17 {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1312 =
                                                                    C::put_in_reg(ctx, v1239.1);
                                                                let v1403 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1312,
                                                                    );
                                                                let v1404 = constructor_output_reg(
                                                                    ctx, v1403,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2164.
                                                                return Some(v1404);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    let v1271 = C::u8_pair_split(ctx, v1265.1);
                                    if v1271.1 == 0x19 {
                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                        if v1277.1 == 0x1A {
                                            let v1280 = C::u8_pair_split(ctx, v1274.1);
                                            if v1280.1 == 0x1B {
                                                let v1283 = C::u32_pair_split(ctx, v1259.1);
                                                let v1286 = C::u16_pair_split(ctx, v1283.0);
                                                let v1289 = C::u8_pair_split(ctx, v1286.0);
                                                if v1289.1 == 0x1C {
                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                    if v1292.1 == 0x1D {
                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                        if v1298.1 == 0x1E {
                                                            let v1301 =
                                                                C::u8_pair_split(ctx, v1295.1);
                                                            if v1301.1 == 0x1F {
                                                                let v1239 = C::unpack_value_array_2(
                                                                    ctx, v1237,
                                                                );
                                                                let v1312 =
                                                                    C::put_in_reg(ctx, v1239.1);
                                                                let v1415 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1312,
                                                                    );
                                                                let v1416 = constructor_output_reg(
                                                                    ctx, v1415,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2178.
                                                                return Some(v1416);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0xFFFF => {
                            let v1259 = C::u64_pair_split(ctx, v1244.0);
                            let v1262 = C::u32_pair_split(ctx, v1259.0);
                            let v1265 = C::u16_pair_split(ctx, v1262.0);
                            let v1268 = C::u8_pair_split(ctx, v1265.0);
                            match v1268.0 {
                                0x0 => {
                                    match v1268.1 {
                                        0x0 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x1 {
                                                if v1271.1 == 0x1 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0x2 {
                                                        if v1277.1 == 0x2 {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0x3 {
                                                                if v1280.1 == 0x3 {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0x4 {
                                                                        if v1289.1 == 0x4 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x5 {
                                                                                if v1292.1 == 0x5 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x7 {
                                                                                                if v1301.1 == 0x7 {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1327 = constructor_vec_merge_high(ctx, I8X16, v1254, v1248);
                                                                                                    let v1328 = constructor_output_reg(ctx, v1327);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2082.
                                                                                                    return Some(v1328);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            match v1271.0 {
                                                0x0 => {
                                                    if v1271.1 == 0x1 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0x2 {
                                                            if v1277.1 == 0x3 {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0x2 {
                                                                    if v1280.1 == 0x3 {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0x4 {
                                                                            if v1289.1 == 0x5 {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0x4 {
                                                                                    if v1292.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1298.1 == 0x7 {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0x6 {
                                                                                                    if v1301.1 == 0x7 {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1325 = constructor_vec_merge_high(ctx, I16X8, v1254, v1248);
                                                                                                        let v1326 = constructor_output_reg(ctx, v1325);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2080.
                                                                                                        return Some(v1326);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x2 => {
                                                    if v1271.1 == 0x3 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        match v1277.0 {
                                                            0x0 => {
                                                                if v1277.1 == 0x1 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x2 {
                                                                        if v1280.1 == 0x3 {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0x4 {
                                                                                if v1289.1 == 0x5 {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0x4 {
                                                                                                if v1298.1 == 0x5 {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0x6 {
                                                                                                        if v1301.1 == 0x7 {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1323 = constructor_vec_merge_high(ctx, I32X4, v1254, v1248);
                                                                                                            let v1324 = constructor_output_reg(ctx, v1323);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2078.
                                                                                                            return Some(v1324);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x4 => {
                                                                if v1277.1 == 0x5 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x6 {
                                                                        if v1280.1 == 0x7 {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            match v1289.0 {
                                                                                0x0 => {
                                                                                    if v1289.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1292.1 == 0x3 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x4 {
                                                                                                    if v1298.1 == 0x5 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x6 {
                                                                                                            if v1301.1 == 0x7 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1321 = constructor_vec_merge_high(ctx, I64X2, v1254, v1248);
                                                                                                                let v1322 = constructor_output_reg(ctx, v1321);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2076.
                                                                                                                return Some(v1322);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1289.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1292.1 == 0xB {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0xC {
                                                                                                    if v1298.1 == 0xD {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0xE {
                                                                                                            if v1301.1 == 0xF {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1425 = constructor_vec_permute_dw_imm(ctx, I8X16, v1254, 0x0, v1248, 0x1);
                                                                                                                let v1426 = constructor_output_reg(ctx, v1425);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2190.
                                                                                                                return Some(v1426);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1289.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1292.1 == 0x13 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x14 {
                                                                                                    if v1298.1 == 0x15 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x16 {
                                                                                                            if v1301.1 == 0x17 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1304 = constructor_vec_merge_high(ctx, I64X2, v1254, v1255);
                                                                                                                let v1305 = constructor_output_reg(ctx, v1304);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2060.
                                                                                                                return Some(v1305);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1289.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1292.1 == 0x1B {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x1C {
                                                                                                    if v1298.1 == 0x1D {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x1E {
                                                                                                            if v1301.1 == 0x1F {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1417 = constructor_vec_permute_dw_imm(ctx, I8X16, v1254, 0x0, v1255, 0x1);
                                                                                                                let v1418 = constructor_output_reg(ctx, v1417);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2182.
                                                                                                                return Some(v1418);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1277.1 == 0x11 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x12 {
                                                                        if v1280.1 == 0x13 {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0x4 {
                                                                                if v1289.1 == 0x5 {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0x14 {
                                                                                                if v1298.1 == 0x15 {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0x16 {
                                                                                                        if v1301.1 == 0x17 {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1306 = constructor_vec_merge_high(ctx, I32X4, v1254, v1255);
                                                                                                            let v1307 = constructor_output_reg(ctx, v1306);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2062.
                                                                                                            return Some(v1307);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1271.1 == 0x11 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0x2 {
                                                            if v1277.1 == 0x3 {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0x12 {
                                                                    if v1280.1 == 0x13 {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0x4 {
                                                                            if v1289.1 == 0x5 {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0x14 {
                                                                                    if v1292.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1298.1 == 0x7 {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0x16 {
                                                                                                    if v1301.1 == 0x17 {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1308 = constructor_vec_merge_high(ctx, I16X8, v1254, v1255);
                                                                                                        let v1309 = constructor_output_reg(ctx, v1308);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2064.
                                                                                                        return Some(v1309);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x10 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x1 {
                                                if v1271.1 == 0x11 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0x2 {
                                                        if v1277.1 == 0x12 {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0x3 {
                                                                if v1280.1 == 0x13 {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0x4 {
                                                                        if v1289.1 == 0x14 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x5 {
                                                                                if v1292.1 == 0x15 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x7 {
                                                                                                if v1301.1 == 0x17 {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1310 = constructor_vec_merge_high(ctx, I8X16, v1254, v1255);
                                                                                                    let v1311 = constructor_output_reg(ctx, v1310);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2066.
                                                                                                    return Some(v1311);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x1 => {
                                    if v1268.1 == 0x3 {
                                        let v1271 = C::u8_pair_split(ctx, v1265.1);
                                        if v1271.0 == 0x5 {
                                            if v1271.1 == 0x7 {
                                                let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                if v1277.0 == 0x9 {
                                                    if v1277.1 == 0xB {
                                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                                        if v1280.0 == 0xD {
                                                            if v1280.1 == 0xF {
                                                                let v1283 =
                                                                    C::u32_pair_split(ctx, v1259.1);
                                                                let v1286 =
                                                                    C::u16_pair_split(ctx, v1283.0);
                                                                let v1289 =
                                                                    C::u8_pair_split(ctx, v1286.0);
                                                                match v1289.0 {
                                                                    0x1 => {
                                                                        if v1289.1 == 0x3 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x5 {
                                                                                if v1292.1 == 0x7 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xD {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1385 = constructor_vec_pack(ctx, I16X8, v1254, v1248);
                                                                                                    let v1386 = constructor_output_reg(ctx, v1385);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2144.
                                                                                                    return Some(v1386);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1289.1 == 0x13 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x15 {
                                                                                if v1292.1 == 0x17 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1D {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1373 = constructor_vec_pack(ctx, I16X8, v1254, v1255);
                                                                                                    let v1374 = constructor_output_reg(ctx, v1373);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2132.
                                                                                                    return Some(v1374);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x2 => {
                                    if v1268.1 == 0x3 {
                                        let v1271 = C::u8_pair_split(ctx, v1265.1);
                                        if v1271.0 == 0x6 {
                                            if v1271.1 == 0x7 {
                                                let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                if v1277.0 == 0xA {
                                                    if v1277.1 == 0xB {
                                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                                        if v1280.0 == 0xE {
                                                            if v1280.1 == 0xF {
                                                                let v1283 =
                                                                    C::u32_pair_split(ctx, v1259.1);
                                                                let v1286 =
                                                                    C::u16_pair_split(ctx, v1283.0);
                                                                let v1289 =
                                                                    C::u8_pair_split(ctx, v1286.0);
                                                                match v1289.0 {
                                                                    0x2 => {
                                                                        if v1289.1 == 0x3 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x6 {
                                                                                if v1292.1 == 0x7 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xE {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1383 = constructor_vec_pack(ctx, I32X4, v1254, v1248);
                                                                                                    let v1384 = constructor_output_reg(ctx, v1383);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2142.
                                                                                                    return Some(v1384);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1289.1 == 0x13 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x16 {
                                                                                if v1292.1 == 0x17 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1E {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1371 = constructor_vec_pack(ctx, I32X4, v1254, v1255);
                                                                                                    let v1372 = constructor_output_reg(ctx, v1371);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2130.
                                                                                                    return Some(v1372);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x4 => {
                                    if v1268.1 == 0x5 {
                                        let v1271 = C::u8_pair_split(ctx, v1265.1);
                                        if v1271.0 == 0x6 {
                                            if v1271.1 == 0x7 {
                                                let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                if v1277.0 == 0xC {
                                                    if v1277.1 == 0xD {
                                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                                        if v1280.0 == 0xE {
                                                            if v1280.1 == 0xF {
                                                                let v1283 =
                                                                    C::u32_pair_split(ctx, v1259.1);
                                                                let v1286 =
                                                                    C::u16_pair_split(ctx, v1283.0);
                                                                let v1289 =
                                                                    C::u8_pair_split(ctx, v1286.0);
                                                                match v1289.0 {
                                                                    0x4 => {
                                                                        if v1289.1 == 0x5 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x6 {
                                                                                if v1292.1 == 0x7 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xE {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1381 = constructor_vec_pack(ctx, I64X2, v1254, v1248);
                                                                                                    let v1382 = constructor_output_reg(ctx, v1381);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2140.
                                                                                                    return Some(v1382);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1289.1 == 0x15 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x16 {
                                                                                if v1292.1 == 0x17 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1E {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1369 = constructor_vec_pack(ctx, I64X2, v1254, v1255);
                                                                                                    let v1370 = constructor_output_reg(ctx, v1369);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2128.
                                                                                                    return Some(v1370);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    match v1268.1 {
                                        0x8 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x9 {
                                                if v1271.1 == 0x9 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0xA {
                                                        if v1277.1 == 0xA {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0xB {
                                                                if v1280.1 == 0xB {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0xC {
                                                                        if v1289.1 == 0xC {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0xD {
                                                                                if v1292.1 == 0xD {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xF {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1359 = constructor_vec_merge_low(ctx, I8X16, v1254, v1248);
                                                                                                    let v1360 = constructor_output_reg(ctx, v1359);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2116.
                                                                                                    return Some(v1360);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x9 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            match v1271.0 {
                                                0x8 => {
                                                    if v1271.1 == 0x9 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0xA {
                                                            if v1277.1 == 0xB {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0xA {
                                                                    if v1280.1 == 0xB {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0xC {
                                                                            if v1289.1 == 0xD {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0xC {
                                                                                    if v1292.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1298.1 == 0xF {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0xE {
                                                                                                    if v1301.1 == 0xF {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1357 = constructor_vec_merge_low(ctx, I16X8, v1254, v1248);
                                                                                                        let v1358 = constructor_output_reg(ctx, v1357);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2114.
                                                                                                        return Some(v1358);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0xA => {
                                                    if v1271.1 == 0xB {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        match v1277.0 {
                                                            0x8 => {
                                                                if v1277.1 == 0x9 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0xA {
                                                                        if v1280.1 == 0xB {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0xC {
                                                                                if v1289.1 == 0xD {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0xC {
                                                                                                if v1298.1 == 0xD {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0xE {
                                                                                                        if v1301.1 == 0xF {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1355 = constructor_vec_merge_low(ctx, I32X4, v1254, v1248);
                                                                                                            let v1356 = constructor_output_reg(ctx, v1355);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2112.
                                                                                                            return Some(v1356);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0xC => {
                                                                if v1277.1 == 0xD {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0xE {
                                                                        if v1280.1 == 0xF {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            match v1289.0 {
                                                                                0x0 => {
                                                                                    if v1289.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1292.1 == 0x3 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x4 {
                                                                                                    if v1298.1 == 0x5 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x6 {
                                                                                                            if v1301.1 == 0x7 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1427 = constructor_vec_permute_dw_imm(ctx, I8X16, v1254, 0x1, v1248, 0x0);
                                                                                                                let v1428 = constructor_output_reg(ctx, v1427);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2192.
                                                                                                                return Some(v1428);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1289.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1292.1 == 0xB {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0xC {
                                                                                                    if v1298.1 == 0xD {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0xE {
                                                                                                            if v1301.1 == 0xF {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1353 = constructor_vec_merge_low(ctx, I64X2, v1254, v1248);
                                                                                                                let v1354 = constructor_output_reg(ctx, v1353);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2110.
                                                                                                                return Some(v1354);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1289.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1292.1 == 0x13 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x14 {
                                                                                                    if v1298.1 == 0x15 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x16 {
                                                                                                            if v1301.1 == 0x17 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1419 = constructor_vec_permute_dw_imm(ctx, I8X16, v1254, 0x1, v1255, 0x0);
                                                                                                                let v1420 = constructor_output_reg(ctx, v1419);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2184.
                                                                                                                return Some(v1420);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1289.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1292.1 == 0x1B {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x1C {
                                                                                                    if v1298.1 == 0x1D {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x1E {
                                                                                                            if v1301.1 == 0x1F {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1337 = constructor_vec_merge_low(ctx, I64X2, v1254, v1255);
                                                                                                                let v1338 = constructor_output_reg(ctx, v1337);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2094.
                                                                                                                return Some(v1338);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1277.1 == 0x19 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x1A {
                                                                        if v1280.1 == 0x1B {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0xC {
                                                                                if v1289.1 == 0xD {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0x1C {
                                                                                                if v1298.1 == 0x1D {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0x1E {
                                                                                                        if v1301.1 == 0x1F {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1339 = constructor_vec_merge_low(ctx, I32X4, v1254, v1255);
                                                                                                            let v1340 = constructor_output_reg(ctx, v1339);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2096.
                                                                                                            return Some(v1340);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1271.1 == 0x19 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0xA {
                                                            if v1277.1 == 0xB {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0x1A {
                                                                    if v1280.1 == 0x1B {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0xC {
                                                                            if v1289.1 == 0xD {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0x1C {
                                                                                    if v1292.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1298.1 == 0xF {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0x1E {
                                                                                                    if v1301.1 == 0x1F {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1341 = constructor_vec_merge_low(ctx, I16X8, v1254, v1255);
                                                                                                        let v1342 = constructor_output_reg(ctx, v1341);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2098.
                                                                                                        return Some(v1342);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x18 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x9 {
                                                if v1271.1 == 0x19 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0xA {
                                                        if v1277.1 == 0x1A {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0xB {
                                                                if v1280.1 == 0x1B {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0xC {
                                                                        if v1289.1 == 0x1C {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0xD {
                                                                                if v1292.1 == 0x1D {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xF {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1254 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1343 = constructor_vec_merge_low(ctx, I8X16, v1254, v1255);
                                                                                                    let v1344 = constructor_output_reg(ctx, v1343);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2100.
                                                                                                    return Some(v1344);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x10 => {
                                    match v1268.1 {
                                        0x0 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x11 {
                                                if v1271.1 == 0x1 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0x12 {
                                                        if v1277.1 == 0x2 {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0x13 {
                                                                if v1280.1 == 0x3 {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0x14 {
                                                                        if v1289.1 == 0x4 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x15 {
                                                                                if v1292.1 == 0x5 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x17 {
                                                                                                if v1301.1 == 0x7 {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1319 = constructor_vec_merge_high(ctx, I8X16, v1312, v1248);
                                                                                                    let v1320 = constructor_output_reg(ctx, v1319);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2074.
                                                                                                    return Some(v1320);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x10 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x11 {
                                                if v1271.1 == 0x11 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0x12 {
                                                        if v1277.1 == 0x12 {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0x13 {
                                                                if v1280.1 == 0x13 {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0x14 {
                                                                        if v1289.1 == 0x14 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x15 {
                                                                                if v1292.1 == 0x15 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x17 {
                                                                                                if v1301.1 == 0x17 {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1335 = constructor_vec_merge_high(ctx, I8X16, v1312, v1255);
                                                                                                    let v1336 = constructor_output_reg(ctx, v1335);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2090.
                                                                                                    return Some(v1336);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x11 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            match v1271.0 {
                                                0x0 => {
                                                    if v1271.1 == 0x1 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0x12 {
                                                            if v1277.1 == 0x13 {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0x2 {
                                                                    if v1280.1 == 0x3 {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0x14 {
                                                                            if v1289.1 == 0x15 {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0x4 {
                                                                                    if v1292.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1298.1 == 0x17 {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0x6 {
                                                                                                    if v1301.1 == 0x7 {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1317 = constructor_vec_merge_high(ctx, I16X8, v1312, v1248);
                                                                                                        let v1318 = constructor_output_reg(ctx, v1317);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2072.
                                                                                                        return Some(v1318);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1271.1 == 0x11 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0x12 {
                                                            if v1277.1 == 0x13 {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0x12 {
                                                                    if v1280.1 == 0x13 {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0x14 {
                                                                            if v1289.1 == 0x15 {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0x14 {
                                                                                    if v1292.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1298.1 == 0x17 {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0x16 {
                                                                                                    if v1301.1 == 0x17 {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1333 = constructor_vec_merge_high(ctx, I16X8, v1312, v1255);
                                                                                                        let v1334 = constructor_output_reg(ctx, v1333);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2088.
                                                                                                        return Some(v1334);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x12 => {
                                                    if v1271.1 == 0x13 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        match v1277.0 {
                                                            0x0 => {
                                                                if v1277.1 == 0x1 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x2 {
                                                                        if v1280.1 == 0x3 {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0x14 {
                                                                                if v1289.1 == 0x15 {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0x4 {
                                                                                                if v1298.1 == 0x5 {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0x6 {
                                                                                                        if v1301.1 == 0x7 {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1315 = constructor_vec_merge_high(ctx, I32X4, v1312, v1248);
                                                                                                            let v1316 = constructor_output_reg(ctx, v1315);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2070.
                                                                                                            return Some(v1316);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1277.1 == 0x11 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x12 {
                                                                        if v1280.1 == 0x13 {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0x14 {
                                                                                if v1289.1 == 0x15 {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0x14 {
                                                                                                if v1298.1 == 0x15 {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0x16 {
                                                                                                        if v1301.1 == 0x17 {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1331 = constructor_vec_merge_high(ctx, I32X4, v1312, v1255);
                                                                                                            let v1332 = constructor_output_reg(ctx, v1331);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2086.
                                                                                                            return Some(v1332);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x14 => {
                                                                if v1277.1 == 0x15 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x16 {
                                                                        if v1280.1 == 0x17 {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            match v1289.0 {
                                                                                0x0 => {
                                                                                    if v1289.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1292.1 == 0x3 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x4 {
                                                                                                    if v1298.1 == 0x5 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x6 {
                                                                                                            if v1301.1 == 0x7 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1313 = constructor_vec_merge_high(ctx, I64X2, v1312, v1248);
                                                                                                                let v1314 = constructor_output_reg(ctx, v1313);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2068.
                                                                                                                return Some(v1314);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1289.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1292.1 == 0xB {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0xC {
                                                                                                    if v1298.1 == 0xD {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0xE {
                                                                                                            if v1301.1 == 0xF {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1421 = constructor_vec_permute_dw_imm(ctx, I8X16, v1312, 0x0, v1248, 0x1);
                                                                                                                let v1422 = constructor_output_reg(ctx, v1421);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2186.
                                                                                                                return Some(v1422);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1289.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1292.1 == 0x13 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x14 {
                                                                                                    if v1298.1 == 0x15 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x16 {
                                                                                                            if v1301.1 == 0x17 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1329 = constructor_vec_merge_high(ctx, I64X2, v1312, v1255);
                                                                                                                let v1330 = constructor_output_reg(ctx, v1329);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2084.
                                                                                                                return Some(v1330);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1289.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1292.1 == 0x1B {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x1C {
                                                                                                    if v1298.1 == 0x1D {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x1E {
                                                                                                            if v1301.1 == 0x1F {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1429 = constructor_vec_permute_dw_imm(ctx, I8X16, v1312, 0x0, v1255, 0x1);
                                                                                                                let v1430 = constructor_output_reg(ctx, v1429);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2194.
                                                                                                                return Some(v1430);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x11 => {
                                    if v1268.1 == 0x13 {
                                        let v1271 = C::u8_pair_split(ctx, v1265.1);
                                        if v1271.0 == 0x15 {
                                            if v1271.1 == 0x17 {
                                                let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                if v1277.0 == 0x19 {
                                                    if v1277.1 == 0x1B {
                                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                                        if v1280.0 == 0x1D {
                                                            if v1280.1 == 0x1F {
                                                                let v1283 =
                                                                    C::u32_pair_split(ctx, v1259.1);
                                                                let v1286 =
                                                                    C::u16_pair_split(ctx, v1283.0);
                                                                let v1289 =
                                                                    C::u8_pair_split(ctx, v1286.0);
                                                                match v1289.0 {
                                                                    0x1 => {
                                                                        if v1289.1 == 0x3 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x5 {
                                                                                if v1292.1 == 0x7 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xD {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1379 = constructor_vec_pack(ctx, I16X8, v1312, v1248);
                                                                                                    let v1380 = constructor_output_reg(ctx, v1379);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2138.
                                                                                                    return Some(v1380);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1289.1 == 0x13 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x15 {
                                                                                if v1292.1 == 0x17 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1D {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1391 = constructor_vec_pack(ctx, I16X8, v1312, v1255);
                                                                                                    let v1392 = constructor_output_reg(ctx, v1391);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2150.
                                                                                                    return Some(v1392);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x12 => {
                                    if v1268.1 == 0x13 {
                                        let v1271 = C::u8_pair_split(ctx, v1265.1);
                                        if v1271.0 == 0x16 {
                                            if v1271.1 == 0x17 {
                                                let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                if v1277.0 == 0x1A {
                                                    if v1277.1 == 0x1B {
                                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                                        if v1280.0 == 0x1E {
                                                            if v1280.1 == 0x1F {
                                                                let v1283 =
                                                                    C::u32_pair_split(ctx, v1259.1);
                                                                let v1286 =
                                                                    C::u16_pair_split(ctx, v1283.0);
                                                                let v1289 =
                                                                    C::u8_pair_split(ctx, v1286.0);
                                                                match v1289.0 {
                                                                    0x2 => {
                                                                        if v1289.1 == 0x3 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x6 {
                                                                                if v1292.1 == 0x7 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xE {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1377 = constructor_vec_pack(ctx, I32X4, v1312, v1248);
                                                                                                    let v1378 = constructor_output_reg(ctx, v1377);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2136.
                                                                                                    return Some(v1378);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1289.1 == 0x13 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x16 {
                                                                                if v1292.1 == 0x17 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1E {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1389 = constructor_vec_pack(ctx, I32X4, v1312, v1255);
                                                                                                    let v1390 = constructor_output_reg(ctx, v1389);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2148.
                                                                                                    return Some(v1390);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x14 => {
                                    if v1268.1 == 0x15 {
                                        let v1271 = C::u8_pair_split(ctx, v1265.1);
                                        if v1271.0 == 0x16 {
                                            if v1271.1 == 0x17 {
                                                let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                if v1277.0 == 0x1C {
                                                    if v1277.1 == 0x1D {
                                                        let v1280 = C::u8_pair_split(ctx, v1274.1);
                                                        if v1280.0 == 0x1E {
                                                            if v1280.1 == 0x1F {
                                                                let v1283 =
                                                                    C::u32_pair_split(ctx, v1259.1);
                                                                let v1286 =
                                                                    C::u16_pair_split(ctx, v1283.0);
                                                                let v1289 =
                                                                    C::u8_pair_split(ctx, v1286.0);
                                                                match v1289.0 {
                                                                    0x4 => {
                                                                        if v1289.1 == 0x5 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x6 {
                                                                                if v1292.1 == 0x7 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0xE {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1375 = constructor_vec_pack(ctx, I64X2, v1312, v1248);
                                                                                                    let v1376 = constructor_output_reg(ctx, v1375);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2134.
                                                                                                    return Some(v1376);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1289.1 == 0x15 {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x16 {
                                                                                if v1292.1 == 0x17 {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1E {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1387 = constructor_vec_pack(ctx, I64X2, v1312, v1255);
                                                                                                    let v1388 = constructor_output_reg(ctx, v1387);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2146.
                                                                                                    return Some(v1388);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    match v1268.1 {
                                        0x8 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x19 {
                                                if v1271.1 == 0x9 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0x1A {
                                                        if v1277.1 == 0xA {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0x1B {
                                                                if v1280.1 == 0xB {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0x1C {
                                                                        if v1289.1 == 0xC {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x1D {
                                                                                if v1292.1 == 0xD {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1F {
                                                                                                if v1301.1 == 0xF {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                    let v1351 = constructor_vec_merge_low(ctx, I8X16, v1312, v1248);
                                                                                                    let v1352 = constructor_output_reg(ctx, v1351);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2108.
                                                                                                    return Some(v1352);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x18 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            if v1271.0 == 0x19 {
                                                if v1271.1 == 0x19 {
                                                    let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                    let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                    if v1277.0 == 0x1A {
                                                        if v1277.1 == 0x1A {
                                                            let v1280 =
                                                                C::u8_pair_split(ctx, v1274.1);
                                                            if v1280.0 == 0x1B {
                                                                if v1280.1 == 0x1B {
                                                                    let v1283 = C::u32_pair_split(
                                                                        ctx, v1259.1,
                                                                    );
                                                                    let v1286 = C::u16_pair_split(
                                                                        ctx, v1283.0,
                                                                    );
                                                                    let v1289 = C::u8_pair_split(
                                                                        ctx, v1286.0,
                                                                    );
                                                                    if v1289.0 == 0x1C {
                                                                        if v1289.1 == 0x1C {
                                                                            let v1292 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.1,
                                                                                );
                                                                            if v1292.0 == 0x1D {
                                                                                if v1292.1 == 0x1D {
                                                                                    let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                    let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                    if v1298.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1298.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                            if v1301.0 == 0x1F {
                                                                                                if v1301.1 == 0x1F {
                                                                                                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                    let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                    let v1367 = constructor_vec_merge_low(ctx, I8X16, v1312, v1255);
                                                                                                    let v1368 = constructor_output_reg(ctx, v1367);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2124.
                                                                                                    return Some(v1368);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x19 => {
                                            let v1271 = C::u8_pair_split(ctx, v1265.1);
                                            match v1271.0 {
                                                0x8 => {
                                                    if v1271.1 == 0x9 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0x1A {
                                                            if v1277.1 == 0x1B {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0xA {
                                                                    if v1280.1 == 0xB {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0x1C {
                                                                            if v1289.1 == 0x1D {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0xC {
                                                                                    if v1292.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1298.1 == 0x1F {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0xE {
                                                                                                    if v1301.1 == 0xF {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                        let v1349 = constructor_vec_merge_low(ctx, I16X8, v1312, v1248);
                                                                                                        let v1350 = constructor_output_reg(ctx, v1349);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2106.
                                                                                                        return Some(v1350);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1271.1 == 0x19 {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        if v1277.0 == 0x1A {
                                                            if v1277.1 == 0x1B {
                                                                let v1280 =
                                                                    C::u8_pair_split(ctx, v1274.1);
                                                                if v1280.0 == 0x1A {
                                                                    if v1280.1 == 0x1B {
                                                                        let v1283 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1259.1,
                                                                            );
                                                                        let v1286 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1283.0,
                                                                            );
                                                                        let v1289 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1286.0,
                                                                            );
                                                                        if v1289.0 == 0x1C {
                                                                            if v1289.1 == 0x1D {
                                                                                let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                if v1292.0 == 0x1C {
                                                                                    if v1292.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                        let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                        if v1298.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1298.1 == 0x1F {
                                                                                                let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                if v1301.0 == 0x1E {
                                                                                                    if v1301.1 == 0x1F {
                                                                                                        let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                        let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                        let v1365 = constructor_vec_merge_low(ctx, I16X8, v1312, v1255);
                                                                                                        let v1366 = constructor_output_reg(ctx, v1365);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2122.
                                                                                                        return Some(v1366);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x1A => {
                                                    if v1271.1 == 0x1B {
                                                        let v1274 = C::u16_pair_split(ctx, v1262.1);
                                                        let v1277 = C::u8_pair_split(ctx, v1274.0);
                                                        match v1277.0 {
                                                            0x8 => {
                                                                if v1277.1 == 0x9 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0xA {
                                                                        if v1280.1 == 0xB {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0x1C {
                                                                                if v1289.1 == 0x1D {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0xC {
                                                                                                if v1298.1 == 0xD {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0xE {
                                                                                                        if v1301.1 == 0xF {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                            let v1347 = constructor_vec_merge_low(ctx, I32X4, v1312, v1248);
                                                                                                            let v1348 = constructor_output_reg(ctx, v1347);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2104.
                                                                                                            return Some(v1348);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1277.1 == 0x19 {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x1A {
                                                                        if v1280.1 == 0x1B {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            if v1289.0 == 0x1C {
                                                                                if v1289.1 == 0x1D {
                                                                                    let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                    if v1292.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1292.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                            let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                            if v1298.0 == 0x1C {
                                                                                                if v1298.1 == 0x1D {
                                                                                                    let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                    if v1301.0 == 0x1E {
                                                                                                        if v1301.1 == 0x1F {
                                                                                                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                            let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                            let v1363 = constructor_vec_merge_low(ctx, I32X4, v1312, v1255);
                                                                                                            let v1364 = constructor_output_reg(ctx, v1363);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2120.
                                                                                                            return Some(v1364);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1C => {
                                                                if v1277.1 == 0x1D {
                                                                    let v1280 = C::u8_pair_split(
                                                                        ctx, v1274.1,
                                                                    );
                                                                    if v1280.0 == 0x1E {
                                                                        if v1280.1 == 0x1F {
                                                                            let v1283 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1259.1,
                                                                                );
                                                                            let v1286 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1283.0,
                                                                                );
                                                                            let v1289 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1286.0,
                                                                                );
                                                                            match v1289.0 {
                                                                                0x0 => {
                                                                                    if v1289.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1292.1 == 0x3 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x4 {
                                                                                                    if v1298.1 == 0x5 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x6 {
                                                                                                            if v1301.1 == 0x7 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1423 = constructor_vec_permute_dw_imm(ctx, I8X16, v1312, 0x1, v1248, 0x0);
                                                                                                                let v1424 = constructor_output_reg(ctx, v1423);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2188.
                                                                                                                return Some(v1424);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1289.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1292.1 == 0xB {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0xC {
                                                                                                    if v1298.1 == 0xD {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0xE {
                                                                                                            if v1301.1 == 0xF {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1248 = C::put_in_reg(ctx, v1239.0);
                                                                                                                let v1345 = constructor_vec_merge_low(ctx, I64X2, v1312, v1248);
                                                                                                                let v1346 = constructor_output_reg(ctx, v1345);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2102.
                                                                                                                return Some(v1346);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1289.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1292.1 == 0x13 {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x14 {
                                                                                                    if v1298.1 == 0x15 {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x16 {
                                                                                                            if v1301.1 == 0x17 {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1431 = constructor_vec_permute_dw_imm(ctx, I8X16, v1312, 0x1, v1255, 0x0);
                                                                                                                let v1432 = constructor_output_reg(ctx, v1431);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2196.
                                                                                                                return Some(v1432);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1289.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1292 = C::u8_pair_split(ctx, v1286.1);
                                                                                        if v1292.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1292.1 == 0x1B {
                                                                                                let v1295 = C::u16_pair_split(ctx, v1283.1);
                                                                                                let v1298 = C::u8_pair_split(ctx, v1295.0);
                                                                                                if v1298.0 == 0x1C {
                                                                                                    if v1298.1 == 0x1D {
                                                                                                        let v1301 = C::u8_pair_split(ctx, v1295.1);
                                                                                                        if v1301.0 == 0x1E {
                                                                                                            if v1301.1 == 0x1F {
                                                                                                                let v1239 = C::unpack_value_array_2(ctx, v1237);
                                                                                                                let v1312 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1255 = C::put_in_reg(ctx, v1239.1);
                                                                                                                let v1361 = constructor_vec_merge_low(ctx, I64X2, v1312, v1255);
                                                                                                                let v1362 = constructor_output_reg(ctx, v1361);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2118.
                                                                                                                return Some(v1362);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                            let v1239 = C::unpack_value_array_2(ctx, v1237);
                            let v1254 = C::put_in_reg(ctx, v1239.0);
                            let v1255 = C::put_in_reg(ctx, v1239.1);
                            let v1256 = constructor_vec_imm(ctx, I8X16, v1244.0);
                            let v1257 = constructor_vec_permute(ctx, I8X16, v1254, v1255, v1256);
                            let v1258 = constructor_output_reg(ctx, v1257);
                            // Rule at src/isa/s390x/lower.isle line 2056.
                            return Some(v1258);
                        }
                        _ => {}
                    }
                    let v1247 = constructor_vec_imm_byte_mask(ctx, I8X16, v1244.1);
                    let v1239 = C::unpack_value_array_2(ctx, v1237);
                    let v1248 = C::put_in_reg(ctx, v1239.0);
                    let v1249 = C::put_in_reg(ctx, v1239.1);
                    let v1250 = constructor_vec_imm(ctx, I8X16, v1244.0);
                    let v1251 = constructor_vec_permute(ctx, I8X16, v1248, v1249, v1250);
                    let v1252 = constructor_vec_and(ctx, I8X16, v1247, v1251);
                    let v1253 = constructor_output_reg(ctx, v1252);
                    // Rule at src/isa/s390x/lower.isle line 2051.
                    return Some(v1253);
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1447,
            stack_slot: v1448,
            offset: v1449,
        } => {
            if let &Opcode::StackAddr = v1447 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1450 = constructor_stack_addr_impl(ctx, v3, v1448, v1449);
                    let v1451 = constructor_output_reg(ctx, v1450);
                    // Rule at src/isa/s390x/lower.isle line 2238.
                    return Some(v1451);
                }
            }
        }
        &InstructionData::Store {
            opcode: ref v1154,
            args: ref v1155,
            flags: v1156,
            offset: v1157,
        } => {
            match v1154 {
                &Opcode::Store => {
                    let v1158 = C::unpack_value_array_2(ctx, v1155);
                    let v1161 = C::def_inst(ctx, v1158.0);
                    if let Some(v1162) = v1161 {
                        let v1163 = &C::inst_data(ctx, v1162);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref v1164,
                            arg: v1165,
                            imm: v1166,
                        } = v1163
                        {
                            if let &Opcode::Extractlane = v1164 {
                                let v1169 = C::bigendian(ctx, v1156);
                                if let Some(v1170) = v1169 {
                                    let v1171 = C::put_in_reg(ctx, v1165);
                                    let v1172 =
                                        &constructor_lower_address(ctx, v1156, v1158.1, v1157);
                                    let v1167 = C::value_type(ctx, v1165);
                                    let v1168 = C::u8_from_uimm8(ctx, v1166);
                                    let v1173 = C::be_lane_idx(ctx, v1167, v1168);
                                    let v1174 = &constructor_vec_store_lane(
                                        ctx, v1167, v1171, v1172, v1173,
                                    );
                                    let v1175 = constructor_side_effect(ctx, v1174);
                                    // Rule at src/isa/s390x/lower.isle line 1894.
                                    return Some(v1175);
                                }
                                let v1176 = C::littleendian(ctx, v1156);
                                if let Some(v1177) = v1176 {
                                    let v1171 = C::put_in_reg(ctx, v1165);
                                    let v1172 =
                                        &constructor_lower_address(ctx, v1156, v1158.1, v1157);
                                    let v1167 = C::value_type(ctx, v1165);
                                    let v1168 = C::u8_from_uimm8(ctx, v1166);
                                    let v1173 = C::be_lane_idx(ctx, v1167, v1168);
                                    let v1178 = &constructor_vec_store_lane_little(
                                        ctx, v1167, v1171, v1172, v1173,
                                    );
                                    let v1179 = constructor_side_effect(ctx, v1178);
                                    // Rule at src/isa/s390x/lower.isle line 1901.
                                    return Some(v1179);
                                }
                            }
                        }
                    }
                    let v1433 = &C::lane_order(ctx);
                    match v1433 {
                        &LaneOrder::LittleEndian => {
                            let v1580 = C::value_type(ctx, v1158.0);
                            let v1598 = C::vr128_ty(ctx, v1580);
                            if let Some(v1599) = v1598 {
                                let v1169 = C::bigendian(ctx, v1156);
                                if let Some(v1170) = v1169 {
                                    let v1589 = C::put_in_reg(ctx, v1158.0);
                                    let v1604 = &constructor_vec_store_elt_rev(
                                        ctx, v1599, v1589, v1156, v1158.1, v1157,
                                    );
                                    let v1605 = constructor_side_effect(ctx, v1604);
                                    // Rule at src/isa/s390x/lower.isle line 2689.
                                    return Some(v1605);
                                }
                                let v1176 = C::littleendian(ctx, v1156);
                                if let Some(v1177) = v1176 {
                                    let v1589 = C::put_in_reg(ctx, v1158.0);
                                    let v1606 = &constructor_vec_store_full_rev(
                                        ctx, v1599, v1589, v1156, v1158.1, v1157,
                                    );
                                    let v1607 = constructor_side_effect(ctx, v1606);
                                    // Rule at src/isa/s390x/lower.isle line 2695.
                                    return Some(v1607);
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v1580 = C::value_type(ctx, v1158.0);
                            let v1598 = C::vr128_ty(ctx, v1580);
                            if let Some(v1599) = v1598 {
                                let v1169 = C::bigendian(ctx, v1156);
                                if let Some(v1170) = v1169 {
                                    let v1589 = C::put_in_reg(ctx, v1158.0);
                                    let v1172 =
                                        &constructor_lower_address(ctx, v1156, v1158.1, v1157);
                                    let v1600 = &constructor_vec_store(ctx, v1589, v1172);
                                    let v1601 = constructor_side_effect(ctx, v1600);
                                    // Rule at src/isa/s390x/lower.isle line 2677.
                                    return Some(v1601);
                                }
                                let v1176 = C::littleendian(ctx, v1156);
                                if let Some(v1177) = v1176 {
                                    let v1589 = C::put_in_reg(ctx, v1158.0);
                                    let v1602 = &constructor_vec_store_byte_rev(
                                        ctx, v1599, v1589, v1156, v1158.1, v1157,
                                    );
                                    let v1603 = constructor_side_effect(ctx, v1602);
                                    // Rule at src/isa/s390x/lower.isle line 2683.
                                    return Some(v1603);
                                }
                            }
                        }
                        _ => {}
                    }
                    let v1580 = C::value_type(ctx, v1158.0);
                    match v1580 {
                        I8 => {
                            let v1581 =
                                &constructor_istore8_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                            let v1582 = constructor_side_effect(ctx, v1581);
                            // Rule at src/isa/s390x/lower.isle line 2633.
                            return Some(v1582);
                        }
                        I16 => {
                            let v1583 =
                                &constructor_istore16_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                            let v1584 = constructor_side_effect(ctx, v1583);
                            // Rule at src/isa/s390x/lower.isle line 2637.
                            return Some(v1584);
                        }
                        I32 => {
                            let v1585 =
                                &constructor_istore32_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                            let v1586 = constructor_side_effect(ctx, v1585);
                            // Rule at src/isa/s390x/lower.isle line 2641.
                            return Some(v1586);
                        }
                        I64 => {
                            let v1587 =
                                &constructor_istore64_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                            let v1588 = constructor_side_effect(ctx, v1587);
                            // Rule at src/isa/s390x/lower.isle line 2645.
                            return Some(v1588);
                        }
                        R64 => {
                            let v1587 =
                                &constructor_istore64_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                            let v1588 = constructor_side_effect(ctx, v1587);
                            // Rule at src/isa/s390x/lower.isle line 2649.
                            return Some(v1588);
                        }
                        F32 => {
                            let v1176 = C::littleendian(ctx, v1156);
                            if let Some(v1177) = v1176 {
                                let v1589 = C::put_in_reg(ctx, v1158.0);
                                let v1172 = &constructor_lower_address(ctx, v1156, v1158.1, v1157);
                                let v1592 = &constructor_vec_store_lane_little(
                                    ctx, F32X4, v1589, v1172, 0x0,
                                );
                                let v1593 = constructor_side_effect(ctx, v1592);
                                // Rule at src/isa/s390x/lower.isle line 2659.
                                return Some(v1593);
                            }
                            let v1169 = C::bigendian(ctx, v1156);
                            if let Some(v1170) = v1169 {
                                let v1589 = C::put_in_reg(ctx, v1158.0);
                                let v1172 = &constructor_lower_address(ctx, v1156, v1158.1, v1157);
                                let v1590 =
                                    &constructor_vec_store_lane(ctx, F32X4, v1589, v1172, 0x0);
                                let v1591 = constructor_side_effect(ctx, v1590);
                                // Rule at src/isa/s390x/lower.isle line 2653.
                                return Some(v1591);
                            }
                        }
                        F64 => {
                            let v1176 = C::littleendian(ctx, v1156);
                            if let Some(v1177) = v1176 {
                                let v1589 = C::put_in_reg(ctx, v1158.0);
                                let v1172 = &constructor_lower_address(ctx, v1156, v1158.1, v1157);
                                let v1596 = &constructor_vec_store_lane_little(
                                    ctx, F64X2, v1589, v1172, 0x0,
                                );
                                let v1597 = constructor_side_effect(ctx, v1596);
                                // Rule at src/isa/s390x/lower.isle line 2671.
                                return Some(v1597);
                            }
                            let v1169 = C::bigendian(ctx, v1156);
                            if let Some(v1170) = v1169 {
                                let v1589 = C::put_in_reg(ctx, v1158.0);
                                let v1172 = &constructor_lower_address(ctx, v1156, v1158.1, v1157);
                                let v1594 =
                                    &constructor_vec_store_lane(ctx, F64X2, v1589, v1172, 0x0);
                                let v1595 = constructor_side_effect(ctx, v1594);
                                // Rule at src/isa/s390x/lower.isle line 2665.
                                return Some(v1595);
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Istore8 => {
                    let v1158 = C::unpack_value_array_2(ctx, v1155);
                    let v1581 = &constructor_istore8_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                    let v1582 = constructor_side_effect(ctx, v1581);
                    // Rule at src/isa/s390x/lower.isle line 2789.
                    return Some(v1582);
                }
                &Opcode::Istore16 => {
                    let v1158 = C::unpack_value_array_2(ctx, v1155);
                    let v1583 = &constructor_istore16_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                    let v1584 = constructor_side_effect(ctx, v1583);
                    // Rule at src/isa/s390x/lower.isle line 2807.
                    return Some(v1584);
                }
                &Opcode::Istore32 => {
                    let v1158 = C::unpack_value_array_2(ctx, v1155);
                    let v1585 = &constructor_istore32_impl(ctx, v1156, v1158.0, v1158.1, v1157);
                    let v1586 = constructor_side_effect(ctx, v1585);
                    // Rule at src/isa/s390x/lower.isle line 2833.
                    return Some(v1586);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1720,
            args: ref v1721,
            flags: v1722,
        } => {
            if let &Opcode::AtomicStore = v1720 {
                let v1723 = C::unpack_value_array_2(ctx, v1721);
                let v1726 = C::value_type(ctx, v1723.0);
                match v1726 {
                    I8 => {
                        let v1700 = C::zero_offset(ctx);
                        let v1727 = &constructor_istore8_impl(ctx, v1722, v1723.0, v1723.1, v1700);
                        let v1728 = constructor_atomic_store_impl(ctx, v1727);
                        // Rule at src/isa/s390x/lower.isle line 3239.
                        return Some(v1728);
                    }
                    I16 => {
                        let v1700 = C::zero_offset(ctx);
                        let v1729 = &constructor_istore16_impl(ctx, v1722, v1723.0, v1723.1, v1700);
                        let v1730 = constructor_atomic_store_impl(ctx, v1729);
                        // Rule at src/isa/s390x/lower.isle line 3243.
                        return Some(v1730);
                    }
                    I32 => {
                        let v1700 = C::zero_offset(ctx);
                        let v1731 = &constructor_istore32_impl(ctx, v1722, v1723.0, v1723.1, v1700);
                        let v1732 = constructor_atomic_store_impl(ctx, v1731);
                        // Rule at src/isa/s390x/lower.isle line 3247.
                        return Some(v1732);
                    }
                    I64 => {
                        let v1700 = C::zero_offset(ctx);
                        let v1733 = &constructor_istore64_impl(ctx, v1722, v1723.0, v1723.1, v1700);
                        let v1734 = constructor_atomic_store_impl(ctx, v1733);
                        // Rule at src/isa/s390x/lower.isle line 3251.
                        return Some(v1734);
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v729,
            args: ref v730,
        } => {
            match v729 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v731 = C::unpack_value_array_3(ctx, v730);
                        let v1888 = &constructor_value_nonzero(ctx, v731.0);
                        let v736 = C::put_in_reg(ctx, v731.1);
                        let v890 = C::put_in_reg(ctx, v731.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1889 = constructor_select_bool_reg(ctx, v3, v1888, v736, v890);
                        let v1890 = constructor_output_reg(ctx, v1889);
                        // Rule at src/isa/s390x/lower.isle line 3718.
                        return Some(v1890);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v731 = C::unpack_value_array_3(ctx, v730);
                        let v1888 = &constructor_value_nonzero(ctx, v731.0);
                        let v736 = C::put_in_reg(ctx, v731.1);
                        let v890 = C::put_in_reg(ctx, v731.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1889 = constructor_select_bool_reg(ctx, v3, v1888, v736, v890);
                        let v1890 = constructor_output_reg(ctx, v1889);
                        // Rule at src/isa/s390x/lower.isle line 3728.
                        return Some(v1890);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v624 = C::mie2_enabled(ctx, v3);
                            if let Some(v625) = v624 {
                                let v731 = C::unpack_value_array_3(ctx, v730);
                                let v735 = C::put_in_reg(ctx, v731.0);
                                let v736 = C::put_in_reg(ctx, v731.1);
                                let v737 = constructor_and_reg(ctx, v62, v736, v735);
                                let v738 = C::put_in_reg(ctx, v731.2);
                                let v739 = constructor_and_not_reg(ctx, v62, v738, v735);
                                let v740 = constructor_or_reg(ctx, v62, v739, v737);
                                let v741 = constructor_output_reg(ctx, v740);
                                // Rule at src/isa/s390x/lower.isle line 1120.
                                return Some(v741);
                            }
                            let v628 = C::mie2_disabled(ctx, v3);
                            if let Some(v629) = v628 {
                                let v731 = C::unpack_value_array_3(ctx, v730);
                                let v735 = C::put_in_reg(ctx, v731.0);
                                let v736 = C::put_in_reg(ctx, v731.1);
                                let v737 = constructor_and_reg(ctx, v62, v736, v735);
                                let v738 = C::put_in_reg(ctx, v731.2);
                                let v742 = constructor_not_reg(ctx, v62, v735);
                                let v743 = constructor_and_reg(ctx, v62, v738, v742);
                                let v744 = constructor_or_reg(ctx, v62, v743, v737);
                                let v745 = constructor_output_reg(ctx, v744);
                                // Rule at src/isa/s390x/lower.isle line 1127.
                                return Some(v745);
                            }
                        }
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v731 = C::unpack_value_array_3(ctx, v730);
                            let v746 = C::put_in_reg(ctx, v731.1);
                            let v747 = C::put_in_reg(ctx, v731.2);
                            let v748 = C::put_in_reg(ctx, v731.0);
                            let v749 = constructor_vec_select(ctx, v37, v746, v747, v748);
                            let v750 = constructor_output_reg(ctx, v749);
                            // Rule at src/isa/s390x/lower.isle line 1134.
                            return Some(v750);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v731 = C::unpack_value_array_3(ctx, v730);
                        let v735 = C::put_in_reg(ctx, v731.0);
                        let v736 = C::put_in_reg(ctx, v731.1);
                        let v890 = C::put_in_reg(ctx, v731.2);
                        let v3 = C::value_type(ctx, v2);
                        let v891 = constructor_fma_reg(ctx, v3, v735, v736, v890);
                        let v892 = constructor_output_reg(ctx, v891);
                        // Rule at src/isa/s390x/lower.isle line 1422.
                        return Some(v892);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1088,
            args: ref v1089,
            imm: v1090,
        } => {
            if let &Opcode::Insertlane = v1088 {
                let v1091 = C::unpack_value_array_2(ctx, v1089);
                let v1125 = C::sinkable_inst(ctx, v1091.1);
                if let Some(v1126) = v1125 {
                    let v1127 = &C::inst_data(ctx, v1126);
                    if let &InstructionData::Load {
                        opcode: ref v1128,
                        arg: v1129,
                        flags: v1130,
                        offset: v1131,
                    } = v1127
                    {
                        if let &Opcode::Load = v1128 {
                            let v1137 = C::littleendian(ctx, v1130);
                            if let Some(v1138) = v1137 {
                                let v1099 = C::put_in_reg(ctx, v1091.0);
                                let v1134 = &constructor_sink_load(ctx, v1126);
                                let v1094 = C::value_type(ctx, v1091.0);
                                let v1096 = C::u8_from_uimm8(ctx, v1090);
                                let v1101 = C::be_lane_idx(ctx, v1094, v1096);
                                let v1139 = constructor_vec_load_lane_little(
                                    ctx, v1094, v1099, v1134, v1101,
                                );
                                let v1140 = constructor_output_reg(ctx, v1139);
                                // Rule at src/isa/s390x/lower.isle line 1796.
                                return Some(v1140);
                            }
                            let v1132 = C::bigendian(ctx, v1130);
                            if let Some(v1133) = v1132 {
                                let v1099 = C::put_in_reg(ctx, v1091.0);
                                let v1134 = &constructor_sink_load(ctx, v1126);
                                let v1094 = C::value_type(ctx, v1091.0);
                                let v1096 = C::u8_from_uimm8(ctx, v1090);
                                let v1101 = C::be_lane_idx(ctx, v1094, v1096);
                                let v1135 =
                                    constructor_vec_load_lane(ctx, v1094, v1099, v1134, v1101);
                                let v1136 = constructor_output_reg(ctx, v1135);
                                // Rule at src/isa/s390x/lower.isle line 1791.
                                return Some(v1136);
                            }
                        }
                    }
                }
                let v1121 = C::i16_from_value(ctx, v1091.1);
                if let Some(v1122) = v1121 {
                    let v1099 = C::put_in_reg(ctx, v1091.0);
                    let v1094 = C::value_type(ctx, v1091.0);
                    let v1096 = C::u8_from_uimm8(ctx, v1090);
                    let v1106 = C::be_lane_idx(ctx, v1094, v1096);
                    let v1123 = constructor_vec_insert_lane_imm(ctx, v1094, v1099, v1122, v1106);
                    let v1124 = constructor_output_reg(ctx, v1123);
                    // Rule at src/isa/s390x/lower.isle line 1786.
                    return Some(v1124);
                }
                let v1110 = C::def_inst(ctx, v1091.1);
                if let Some(v1111) = v1110 {
                    let v1112 = &C::inst_data(ctx, v1111);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref v1113,
                        arg: v1114,
                        imm: v1115,
                    } = v1112
                    {
                        if let &Opcode::Extractlane = v1113 {
                            let v1099 = C::put_in_reg(ctx, v1091.0);
                            let v1094 = C::value_type(ctx, v1091.0);
                            let v1096 = C::u8_from_uimm8(ctx, v1090);
                            let v1106 = C::be_lane_idx(ctx, v1094, v1096);
                            let v1117 = C::put_in_reg(ctx, v1114);
                            let v1116 = C::u8_from_uimm8(ctx, v1115);
                            let v1118 = C::be_lane_idx(ctx, v1094, v1116);
                            let v1119 = constructor_vec_move_lane_and_insert(
                                ctx, v1094, v1099, v1106, v1117, v1118,
                            );
                            let v1120 = constructor_output_reg(ctx, v1119);
                            // Rule at src/isa/s390x/lower.isle line 1779.
                            return Some(v1120);
                        }
                    }
                }
                let v1095 = C::value_type(ctx, v1091.1);
                let v1097 = C::ty_int_ref_scalar_64(ctx, v1095);
                if let Some(v1098) = v1097 {
                    let v1099 = C::put_in_reg(ctx, v1091.0);
                    let v1100 = C::put_in_reg(ctx, v1091.1);
                    let v1094 = C::value_type(ctx, v1091.0);
                    let v1096 = C::u8_from_uimm8(ctx, v1090);
                    let v1101 = C::be_lane_idx(ctx, v1094, v1096);
                    let v56 = C::zero_reg(ctx);
                    let v1102 = constructor_vec_insert_lane(ctx, v1094, v1099, v1100, v1101, v56);
                    let v1103 = constructor_output_reg(ctx, v1102);
                    // Rule at src/isa/s390x/lower.isle line 1766.
                    return Some(v1103);
                }
                let v1104 = C::ty_scalar_float(ctx, v1095);
                if let Some(v1105) = v1104 {
                    let v1099 = C::put_in_reg(ctx, v1091.0);
                    let v1094 = C::value_type(ctx, v1091.0);
                    let v1096 = C::u8_from_uimm8(ctx, v1090);
                    let v1106 = C::be_lane_idx(ctx, v1094, v1096);
                    let v1107 = C::put_in_reg(ctx, v1091.1);
                    let v1108 =
                        constructor_vec_move_lane_and_insert(ctx, v1094, v1099, v1106, v1107, 0x0);
                    let v1109 = constructor_output_reg(ctx, v1108);
                    // Rule at src/isa/s390x/lower.isle line 1773.
                    return Some(v1109);
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1891,
            code: ref v1892,
        } => {
            match v1891 {
                &Opcode::Trap => {
                    let v1893 = &constructor_trap_impl(ctx, v1892);
                    let v1894 = constructor_side_effect(ctx, v1893);
                    // Rule at src/isa/s390x/lower.isle line 3787.
                    return Some(v1894);
                }
                &Opcode::ResumableTrap => {
                    let v1893 = &constructor_trap_impl(ctx, v1892);
                    let v1894 = constructor_side_effect(ctx, v1893);
                    // Rule at src/isa/s390x/lower.isle line 3793.
                    return Some(v1894);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v47,
            arg: v48,
        } => {
            match v47 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1201 = C::sinkable_inst(ctx, v48);
                        if let Some(v1202) = v1201 {
                            let v1203 = &C::inst_data(ctx, v1202);
                            if let &InstructionData::Load {
                                opcode: ref v1204,
                                arg: v1205,
                                flags: v1206,
                                offset: v1207,
                            } = v1203
                            {
                                if let &Opcode::Load = v1204 {
                                    let v1213 = C::littleendian(ctx, v1206);
                                    if let Some(v1214) = v1213 {
                                        let v1210 = &constructor_sink_load(ctx, v1202);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1215 =
                                            constructor_vec_load_replicate_little(ctx, v3, v1210);
                                        let v1216 = constructor_output_reg(ctx, v1215);
                                        // Rule at src/isa/s390x/lower.isle line 1963.
                                        return Some(v1216);
                                    }
                                    let v1208 = C::bigendian(ctx, v1206);
                                    if let Some(v1209) = v1208 {
                                        let v1210 = &constructor_sink_load(ctx, v1202);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1211 = constructor_vec_load_replicate(ctx, v3, v1210);
                                        let v1212 = constructor_output_reg(ctx, v1211);
                                        // Rule at src/isa/s390x/lower.isle line 1959.
                                        return Some(v1212);
                                    }
                                }
                            }
                        }
                        let v1197 = C::i16_from_value(ctx, v48);
                        if let Some(v1198) = v1197 {
                            let v3 = C::value_type(ctx, v2);
                            let v1199 = constructor_vec_imm_replicate(ctx, v3, v1198);
                            let v1200 = constructor_output_reg(ctx, v1199);
                            // Rule at src/isa/s390x/lower.isle line 1955.
                            return Some(v1200);
                        }
                        let v260 = C::def_inst(ctx, v48);
                        if let Some(v261) = v260 {
                            let v262 = &C::inst_data(ctx, v261);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1189,
                                arg: v1190,
                                imm: v1191,
                            } = v262
                            {
                                if let &Opcode::Extractlane = v1189 {
                                    let v1193 = C::put_in_reg(ctx, v1190);
                                    let v3 = C::value_type(ctx, v2);
                                    let v1192 = C::u8_from_uimm8(ctx, v1191);
                                    let v1194 = C::be_lane_idx(ctx, v3, v1192);
                                    let v1195 =
                                        constructor_vec_replicate_lane(ctx, v3, v1193, v1194);
                                    let v1196 = constructor_output_reg(ctx, v1195);
                                    // Rule at src/isa/s390x/lower.isle line 1951.
                                    return Some(v1196);
                                }
                            }
                        }
                        let v49 = C::value_type(ctx, v48);
                        let v1180 = C::ty_int_ref_scalar_64(ctx, v49);
                        if let Some(v1181) = v1180 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v53 = C::zero_reg(ctx);
                            let v3 = C::value_type(ctx, v2);
                            let v1182 = constructor_vec_insert_lane_undef(ctx, v3, v50, 0x0, v53);
                            let v1183 = constructor_vec_replicate_lane(ctx, v3, v1182, 0x0);
                            let v1184 = constructor_output_reg(ctx, v1183);
                            // Rule at src/isa/s390x/lower.isle line 1941.
                            return Some(v1184);
                        }
                        let v1185 = C::ty_scalar_float(ctx, v49);
                        if let Some(v1186) = v1185 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v3 = C::value_type(ctx, v2);
                            let v1187 = constructor_vec_replicate_lane(ctx, v3, v50, 0x0);
                            let v1188 = constructor_output_reg(ctx, v1187);
                            // Rule at src/isa/s390x/lower.isle line 1946.
                            return Some(v1188);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v1819 = &constructor_vany_true_val(ctx, v48);
                            let v1820 = constructor_lower_bool(ctx, v62, v1819);
                            let v1821 = constructor_output_reg(ctx, v1820);
                            // Rule at src/isa/s390x/lower.isle line 3563.
                            return Some(v1821);
                        }
                    }
                }
                &Opcode::VallTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v1816 = &constructor_vall_true_val(ctx, v48);
                            let v1817 = constructor_lower_bool(ctx, v62, v1816);
                            let v1818 = constructor_output_reg(ctx, v1817);
                            // Rule at src/isa/s390x/lower.isle line 3485.
                            return Some(v1818);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1433 = &C::lane_order(ctx);
                    match v1433 {
                        &LaneOrder::LittleEndian => {
                            let v49 = C::value_type(ctx, v48);
                            let v1822 = C::multi_lane(ctx, v49);
                            if let Some(v1823) = v1822 {
                                match v1823.0 {
                                    0x8 => {
                                        if v1823.1 == 0x10 {
                                            let v1836 = constructor_imm8x16(
                                                ctx, 0x0, 0x8, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
                                                0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78,
                                            );
                                            let v1837 = constructor_vec_imm(ctx, I8X16, v1836);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1839 =
                                                constructor_vec_bitpermute(ctx, v1838, v1837);
                                            let v395 = C::zero_reg(ctx);
                                            let v1840 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1839, 0x0, v395,
                                            );
                                            let v1841 = constructor_output_reg(ctx, v1840);
                                            // Rule at src/isa/s390x/lower.isle line 3639.
                                            return Some(v1841);
                                        }
                                    }
                                    0x10 => {
                                        if v1823.1 == 0x8 {
                                            let v1848 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60,
                                                0x70,
                                            );
                                            let v1849 = constructor_vec_imm(ctx, I8X16, v1848);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1850 =
                                                constructor_vec_bitpermute(ctx, v1838, v1849);
                                            let v395 = C::zero_reg(ctx);
                                            let v1851 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1850, 0x0, v395,
                                            );
                                            let v1852 = constructor_output_reg(ctx, v1851);
                                            // Rule at src/isa/s390x/lower.isle line 3650.
                                            return Some(v1852);
                                        }
                                    }
                                    0x20 => {
                                        if v1823.1 == 0x4 {
                                            let v1858 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x0, 0x20, 0x40,
                                                0x60,
                                            );
                                            let v1859 = constructor_vec_imm(ctx, I8X16, v1858);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1860 =
                                                constructor_vec_bitpermute(ctx, v1838, v1859);
                                            let v395 = C::zero_reg(ctx);
                                            let v1861 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1860, 0x0, v395,
                                            );
                                            let v1862 = constructor_output_reg(ctx, v1861);
                                            // Rule at src/isa/s390x/lower.isle line 3661.
                                            return Some(v1862);
                                        }
                                    }
                                    0x40 => {
                                        if v1823.1 == 0x2 {
                                            let v1868 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x0,
                                                0x40,
                                            );
                                            let v1869 = constructor_vec_imm(ctx, I8X16, v1868);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1870 =
                                                constructor_vec_bitpermute(ctx, v1838, v1869);
                                            let v395 = C::zero_reg(ctx);
                                            let v1871 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1870, 0x0, v395,
                                            );
                                            let v1872 = constructor_output_reg(ctx, v1871);
                                            // Rule at src/isa/s390x/lower.isle line 3672.
                                            return Some(v1872);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v49 = C::value_type(ctx, v48);
                            let v1822 = C::multi_lane(ctx, v49);
                            if let Some(v1823) = v1822 {
                                match v1823.0 {
                                    0x8 => {
                                        if v1823.1 == 0x10 {
                                            let v1842 = constructor_imm8x16(
                                                ctx, 0x78, 0x70, 0x68, 0x60, 0x58, 0x50, 0x48,
                                                0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x8, 0x0,
                                            );
                                            let v1843 = constructor_vec_imm(ctx, I8X16, v1842);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1844 =
                                                constructor_vec_bitpermute(ctx, v1838, v1843);
                                            let v395 = C::zero_reg(ctx);
                                            let v1845 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1844, 0x0, v395,
                                            );
                                            let v1846 = constructor_output_reg(ctx, v1845);
                                            // Rule at src/isa/s390x/lower.isle line 3644.
                                            return Some(v1846);
                                        }
                                    }
                                    0x10 => {
                                        if v1823.1 == 0x8 {
                                            let v1853 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10,
                                                0x0,
                                            );
                                            let v1854 = constructor_vec_imm(ctx, I8X16, v1853);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1855 =
                                                constructor_vec_bitpermute(ctx, v1838, v1854);
                                            let v395 = C::zero_reg(ctx);
                                            let v1856 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1855, 0x0, v395,
                                            );
                                            let v1857 = constructor_output_reg(ctx, v1856);
                                            // Rule at src/isa/s390x/lower.isle line 3655.
                                            return Some(v1857);
                                        }
                                    }
                                    0x20 => {
                                        if v1823.1 == 0x4 {
                                            let v1863 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0x20,
                                                0x0,
                                            );
                                            let v1864 = constructor_vec_imm(ctx, I8X16, v1863);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1865 =
                                                constructor_vec_bitpermute(ctx, v1838, v1864);
                                            let v395 = C::zero_reg(ctx);
                                            let v1866 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1865, 0x0, v395,
                                            );
                                            let v1867 = constructor_output_reg(ctx, v1866);
                                            // Rule at src/isa/s390x/lower.isle line 3666.
                                            return Some(v1867);
                                        }
                                    }
                                    0x40 => {
                                        if v1823.1 == 0x2 {
                                            let v1873 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40,
                                                0x0,
                                            );
                                            let v1874 = constructor_vec_imm(ctx, I8X16, v1873);
                                            let v1838 = C::put_in_reg(ctx, v48);
                                            let v1875 =
                                                constructor_vec_bitpermute(ctx, v1838, v1874);
                                            let v395 = C::zero_reg(ctx);
                                            let v1876 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1875, 0x0, v395,
                                            );
                                            let v1877 = constructor_output_reg(ctx, v1876);
                                            // Rule at src/isa/s390x/lower.isle line 3677.
                                            return Some(v1877);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v260 = C::def_inst(ctx, v48);
                            if let Some(v261) = v260 {
                                let v262 = &C::inst_data(ctx, v261);
                                if let &InstructionData::Unary {
                                    opcode: ref v263,
                                    arg: v264,
                                } = v262
                                {
                                    if let &Opcode::Sextend = v263 {
                                        let v265 = C::value_type(ctx, v264);
                                        if v265 == I32 {
                                            let v266 = C::put_in_reg(ctx, v264);
                                            let v282 = constructor_neg_reg_sext32(ctx, v62, v266);
                                            let v283 = constructor_output_reg(ctx, v282);
                                            // Rule at src/isa/s390x/lower.isle line 235.
                                            return Some(v283);
                                        }
                                    }
                                }
                            }
                            let v50 = C::put_in_reg(ctx, v48);
                            let v280 = constructor_neg_reg(ctx, v62, v50);
                            let v281 = constructor_output_reg(ctx, v280);
                            // Rule at src/isa/s390x/lower.isle line 231.
                            return Some(v281);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v284 = constructor_vec_neg(ctx, v150, v50);
                            let v285 = constructor_output_reg(ctx, v284);
                            // Rule at src/isa/s390x/lower.isle line 239.
                            return Some(v285);
                        }
                        if v3 == I128 {
                            let v273 = constructor_vec_imm(ctx, I128, 0x0);
                            let v274 = C::put_in_reg(ctx, v48);
                            let v275 = constructor_vec_sub(ctx, I128, v273, v274);
                            let v286 = constructor_output_reg(ctx, v275);
                            // Rule at src/isa/s390x/lower.isle line 243.
                            return Some(v286);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v260 = C::def_inst(ctx, v48);
                            if let Some(v261) = v260 {
                                let v262 = &C::inst_data(ctx, v261);
                                if let &InstructionData::Unary {
                                    opcode: ref v263,
                                    arg: v264,
                                } = v262
                                {
                                    if let &Opcode::Sextend = v263 {
                                        let v265 = C::value_type(ctx, v264);
                                        if v265 == I32 {
                                            let v266 = C::put_in_reg(ctx, v264);
                                            let v267 = constructor_abs_reg_sext32(ctx, v62, v266);
                                            let v268 = constructor_output_reg(ctx, v267);
                                            // Rule at src/isa/s390x/lower.isle line 211.
                                            return Some(v268);
                                        }
                                    }
                                }
                            }
                            let v256 = constructor_ty_ext32(ctx, v62);
                            let v257 = constructor_put_in_reg_sext32(ctx, v48);
                            let v258 = constructor_abs_reg(ctx, v256, v257);
                            let v259 = constructor_output_reg(ctx, v258);
                            // Rule at src/isa/s390x/lower.isle line 207.
                            return Some(v259);
                        }
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v269 = constructor_vec_abs(ctx, v150, v50);
                            let v270 = constructor_output_reg(ctx, v269);
                            // Rule at src/isa/s390x/lower.isle line 215.
                            return Some(v270);
                        }
                        if v3 == I128 {
                            let v273 = constructor_vec_imm(ctx, I128, 0x0);
                            let v274 = C::put_in_reg(ctx, v48);
                            let v275 = constructor_vec_sub(ctx, I128, v273, v274);
                            let v276 = constructor_vec_replicate_lane(ctx, I64X2, v274, 0x0);
                            let v277 = constructor_vec_cmph(ctx, I64X2, v273, v276);
                            let v278 = constructor_vec_select(ctx, I128, v275, v274, v277);
                            let v279 = constructor_output_reg(ctx, v278);
                            // Rule at src/isa/s390x/lower.isle line 219.
                            return Some(v279);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v260 = C::def_inst(ctx, v48);
                        if let Some(v261) = v260 {
                            let v262 = &C::inst_data(ctx, v261);
                            if let &InstructionData::Binary {
                                opcode: ref v634,
                                args: ref v635,
                            } = v262
                            {
                                if let &Opcode::Bxor = v634 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v36 = C::vr128_ty(ctx, v3);
                                    if let Some(v37) = v36 {
                                        let v636 = C::unpack_value_array_2(ctx, v635);
                                        let v639 = C::put_in_reg(ctx, v636.0);
                                        let v640 = C::put_in_reg(ctx, v636.1);
                                        let v643 = constructor_vec_not_xor(ctx, v37, v639, v640);
                                        let v644 = constructor_output_reg(ctx, v643);
                                        // Rule at src/isa/s390x/lower.isle line 989.
                                        return Some(v644);
                                    }
                                    let v61 = C::fits_in_64(ctx, v3);
                                    if let Some(v62) = v61 {
                                        let v624 = C::mie2_enabled(ctx, v3);
                                        if let Some(v625) = v624 {
                                            let v636 = C::unpack_value_array_2(ctx, v635);
                                            let v639 = C::put_in_reg(ctx, v636.0);
                                            let v640 = C::put_in_reg(ctx, v636.1);
                                            let v641 =
                                                constructor_not_xor_reg(ctx, v62, v639, v640);
                                            let v642 = constructor_output_reg(ctx, v641);
                                            // Rule at src/isa/s390x/lower.isle line 985.
                                            return Some(v642);
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v624 = C::mie2_enabled(ctx, v3);
                            if let Some(v625) = v624 {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v626 = constructor_not_or_reg(ctx, v62, v50, v50);
                                let v627 = constructor_output_reg(ctx, v626);
                                // Rule at src/isa/s390x/lower.isle line 971.
                                return Some(v627);
                            }
                            let v628 = C::mie2_disabled(ctx, v3);
                            if let Some(v629) = v628 {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v630 = constructor_not_reg(ctx, v62, v50);
                                let v631 = constructor_output_reg(ctx, v630);
                                // Rule at src/isa/s390x/lower.isle line 976.
                                return Some(v631);
                            }
                        }
                        let v36 = C::vr128_ty(ctx, v3);
                        if let Some(v37) = v36 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v632 = constructor_vec_not(ctx, v37, v50);
                            let v633 = constructor_output_reg(ctx, v632);
                            // Rule at src/isa/s390x/lower.isle line 980.
                            return Some(v633);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v759 = constructor_bitrev_bits(ctx, 0x1, 0xAAAAAAAAAAAAAAAA, v3, v50);
                        let v760 = constructor_bitrev_bits(ctx, 0x2, 0xCCCCCCCCCCCCCCCC, v3, v759);
                        let v761 = constructor_bitrev_bits(ctx, 0x4, 0xF0F0F0F0F0F0F0F0, v3, v760);
                        let v762 = constructor_bitrev_bytes(ctx, v3, v761);
                        let v763 = constructor_output_reg(ctx, v762);
                        // Rule at src/isa/s390x/lower.isle line 1146.
                        return Some(v763);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v581 = constructor_put_in_reg_zext64(ctx, v48);
                            let v767 = constructor_clz_reg(ctx, 0x40, v581);
                            let v768 = constructor_clz_offset(ctx, v62, v767);
                            let v769 = constructor_output_reg(ctx, v768);
                            // Rule at src/isa/s390x/lower.isle line 1197.
                            return Some(v769);
                        }
                        if v3 == I128 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v770 = constructor_vec_clz(ctx, I64X2, v50);
                            let v771 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v772 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v771, 0x0, v770, 0x0);
                            let v773 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v771, 0x0, v770, 0x1);
                            let v774 = constructor_vec_add(ctx, I64X2, v772, v773);
                            let v776 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v777 = constructor_vec_cmpeq(ctx, I64X2, v772, v776);
                            let v778 = constructor_vec_select(ctx, I128, v774, v772, v777);
                            let v779 = constructor_output_reg(ctx, v778);
                            // Rule at src/isa/s390x/lower.isle line 1205.
                            return Some(v779);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v597 = constructor_put_in_reg_sext64(ctx, v48);
                            let v600 = constructor_ashr_imm(ctx, I64, v597, 0x3F);
                            let v780 = constructor_xor_reg(ctx, I64, v597, v600);
                            let v781 = constructor_clz_reg(ctx, 0x40, v780);
                            let v782 = constructor_cls_offset(ctx, v62, v781);
                            let v783 = constructor_output_reg(ctx, v782);
                            // Rule at src/isa/s390x/lower.isle line 1231.
                            return Some(v783);
                        }
                        if v3 == I128 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v785 = constructor_vec_imm_splat(ctx, I8X16, 0xFF);
                            let v786 = constructor_vec_ashr_by_byte(ctx, v50, v785);
                            let v787 = constructor_vec_ashr_by_bit(ctx, v786, v785);
                            let v788 = constructor_vec_xor(ctx, I128, v50, v787);
                            let v789 = constructor_vec_clz(ctx, I64X2, v788);
                            let v790 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v791 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v790, 0x0, v789, 0x0);
                            let v792 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v790, 0x0, v789, 0x1);
                            let v793 = constructor_vec_add(ctx, I64X2, v791, v792);
                            let v794 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v795 = constructor_vec_cmpeq(ctx, I64X2, v791, v794);
                            let v796 = constructor_vec_select(ctx, I128, v793, v791, v795);
                            let v797 = constructor_vec_add(ctx, I128, v796, v785);
                            let v798 = constructor_output_reg(ctx, v797);
                            // Rule at src/isa/s390x/lower.isle line 1239.
                            return Some(v798);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v575 = C::gpr32_ty(ctx, v3);
                        if let Some(v576) = v575 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v799 = constructor_ctz_guardbit(ctx, v576);
                            let v800 = constructor_or_uimm16shifted(ctx, I64, v50, v799);
                            let v801 = constructor_neg_reg(ctx, I64, v800);
                            let v802 = constructor_and_reg(ctx, I64, v800, v801);
                            let v803 = constructor_clz_reg(ctx, 0x40, v802);
                            let v805 = constructor_imm(ctx, v576, 0x3F);
                            let v806 = constructor_sub_reg(ctx, v576, v805, v803);
                            let v807 = constructor_output_reg(ctx, v806);
                            // Rule at src/isa/s390x/lower.isle line 1268.
                            return Some(v807);
                        }
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v808 = constructor_neg_reg(ctx, I64, v50);
                            let v809 = constructor_and_reg(ctx, I64, v50, v808);
                            let v811 = constructor_clz_reg(ctx, -0x1, v809);
                            let v812 = constructor_imm(ctx, I64, 0x3F);
                            let v813 = constructor_sub_reg(ctx, I64, v812, v811);
                            let v814 = constructor_output_reg(ctx, v813);
                            // Rule at src/isa/s390x/lower.isle line 1283.
                            return Some(v814);
                        }
                        if v3 == I128 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v815 = constructor_vec_ctz(ctx, I64X2, v50);
                            let v771 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v816 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v771, 0x0, v815, 0x0);
                            let v817 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v771, 0x0, v815, 0x1);
                            let v818 = constructor_vec_add(ctx, I64X2, v816, v817);
                            let v776 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v819 = constructor_vec_cmpeq(ctx, I64X2, v817, v776);
                            let v820 = constructor_vec_select(ctx, I128, v818, v817, v819);
                            let v821 = constructor_output_reg(ctx, v820);
                            // Rule at src/isa/s390x/lower.isle line 1290.
                            return Some(v821);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v764 = constructor_bitrev_bytes(ctx, v3, v50);
                        let v765 = constructor_output_reg(ctx, v764);
                        // Rule at src/isa/s390x/lower.isle line 1181.
                        return Some(v765);
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v149 = C::ty_vec128(ctx, v3);
                        if let Some(v150) = v149 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v850 = constructor_vec_popcnt(ctx, v150, v50);
                            let v851 = constructor_output_reg(ctx, v850);
                            // Rule at src/isa/s390x/lower.isle line 1338.
                            return Some(v851);
                        }
                        match v3 {
                            I8 => {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v822 = constructor_popcnt_byte(ctx, v50);
                                let v823 = constructor_output_reg(ctx, v822);
                                // Rule at src/isa/s390x/lower.isle line 1303.
                                return Some(v823);
                            }
                            I16 => {
                                let v628 = C::mie2_disabled(ctx, v3);
                                if let Some(v629) = v628 {
                                    let v50 = C::put_in_reg(ctx, v48);
                                    let v822 = constructor_popcnt_byte(ctx, v50);
                                    let v827 = constructor_lshr_imm(ctx, I32, v822, 0x8);
                                    let v828 = constructor_add_reg(ctx, I32, v822, v827);
                                    let v830 = C::uimm16shifted(ctx, 0xFF, 0x0);
                                    let v831 = constructor_and_uimm16shifted(ctx, I32, v828, v830);
                                    let v832 = constructor_output_reg(ctx, v831);
                                    // Rule at src/isa/s390x/lower.isle line 1319.
                                    return Some(v832);
                                }
                            }
                            I32 => {
                                let v628 = C::mie2_disabled(ctx, v3);
                                if let Some(v629) = v628 {
                                    let v50 = C::put_in_reg(ctx, v48);
                                    let v822 = constructor_popcnt_byte(ctx, v50);
                                    let v834 = constructor_lshl_imm(ctx, I32, v822, 0x10);
                                    let v835 = constructor_add_reg(ctx, I32, v822, v834);
                                    let v836 = constructor_lshl_imm(ctx, I32, v835, 0x8);
                                    let v837 = constructor_add_reg(ctx, I32, v835, v836);
                                    let v839 = constructor_lshr_imm(ctx, I32, v837, 0x18);
                                    let v840 = constructor_output_reg(ctx, v839);
                                    // Rule at src/isa/s390x/lower.isle line 1324.
                                    return Some(v840);
                                }
                            }
                            I64 => {
                                let v628 = C::mie2_disabled(ctx, v3);
                                if let Some(v629) = v628 {
                                    let v50 = C::put_in_reg(ctx, v48);
                                    let v822 = constructor_popcnt_byte(ctx, v50);
                                    let v841 = constructor_lshl_imm(ctx, I64, v822, 0x20);
                                    let v842 = constructor_add_reg(ctx, I64, v822, v841);
                                    let v843 = constructor_lshl_imm(ctx, I64, v842, 0x10);
                                    let v844 = constructor_add_reg(ctx, I64, v842, v843);
                                    let v845 = constructor_lshl_imm(ctx, I64, v844, 0x8);
                                    let v846 = constructor_add_reg(ctx, I64, v844, v845);
                                    let v848 = constructor_lshr_imm(ctx, I64, v846, 0x38);
                                    let v849 = constructor_output_reg(ctx, v848);
                                    // Rule at src/isa/s390x/lower.isle line 1330.
                                    return Some(v849);
                                }
                            }
                            I128 => {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v852 = constructor_vec_popcnt(ctx, I64X2, v50);
                                let v771 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v853 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v771, 0x0, v852, 0x0,
                                );
                                let v854 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v771, 0x0, v852, 0x1,
                                );
                                let v855 = constructor_vec_add(ctx, I64X2, v853, v854);
                                let v856 = constructor_output_reg(ctx, v855);
                                // Rule at src/isa/s390x/lower.isle line 1342.
                                return Some(v856);
                            }
                            _ => {}
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v624 = C::mie2_enabled(ctx, v3);
                            if let Some(v625) = v624 {
                                let v581 = constructor_put_in_reg_zext64(ctx, v48);
                                let v824 = constructor_popcnt_reg(ctx, v581);
                                let v825 = constructor_output_reg(ctx, v824);
                                // Rule at src/isa/s390x/lower.isle line 1308.
                                return Some(v825);
                            }
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v893 = constructor_sqrt_reg(ctx, v3, v50);
                        let v894 = constructor_output_reg(ctx, v893);
                        // Rule at src/isa/s390x/lower.isle line 1429.
                        return Some(v894);
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v895 = constructor_fneg_reg(ctx, v3, v50);
                        let v896 = constructor_output_reg(ctx, v895);
                        // Rule at src/isa/s390x/lower.isle line 1436.
                        return Some(v896);
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v897 = constructor_fabs_reg(ctx, v3, v50);
                        let v898 = constructor_output_reg(ctx, v897);
                        // Rule at src/isa/s390x/lower.isle line 1443.
                        return Some(v898);
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v899 = constructor_ceil_reg(ctx, v3, v50);
                        let v900 = constructor_output_reg(ctx, v899);
                        // Rule at src/isa/s390x/lower.isle line 1450.
                        return Some(v900);
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v901 = constructor_floor_reg(ctx, v3, v50);
                        let v902 = constructor_output_reg(ctx, v901);
                        // Rule at src/isa/s390x/lower.isle line 1457.
                        return Some(v902);
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v903 = constructor_trunc_reg(ctx, v3, v50);
                        let v904 = constructor_output_reg(ctx, v903);
                        // Rule at src/isa/s390x/lower.isle line 1464.
                        return Some(v904);
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v905 = constructor_nearest_reg(ctx, v3, v50);
                        let v906 = constructor_output_reg(ctx, v905);
                        // Rule at src/isa/s390x/lower.isle line 1471.
                        return Some(v906);
                    }
                }
                &Opcode::IsNull => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v49 = C::value_type(ctx, v48);
                            if v49 == R64 {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v1878 = &constructor_icmps_simm16(ctx, I64, v50, 0x0);
                                let v1880 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v1881 = &constructor_bool(ctx, v1878, v1880);
                                let v1882 = constructor_lower_bool(ctx, I8, v1881);
                                let v1883 = constructor_output_reg(ctx, v1882);
                                // Rule at src/isa/s390x/lower.isle line 3687.
                                return Some(v1883);
                            }
                        }
                    }
                }
                &Opcode::IsInvalid => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v49 = C::value_type(ctx, v48);
                            if v49 == R64 {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v1884 = &constructor_icmps_simm16(ctx, I64, v50, -0x1);
                                let v1880 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v1885 = &constructor_bool(ctx, v1884, v1880);
                                let v1886 = constructor_lower_bool(ctx, I8, v1885);
                                let v1887 = constructor_output_reg(ctx, v1886);
                                // Rule at src/isa/s390x/lower.isle line 3693.
                                return Some(v1887);
                            }
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1201 = C::sinkable_inst(ctx, v48);
                        if let Some(v1202) = v1201 {
                            let v1203 = &C::inst_data(ctx, v1202);
                            if let &InstructionData::Load {
                                opcode: ref v1204,
                                arg: v1205,
                                flags: v1206,
                                offset: v1207,
                            } = v1203
                            {
                                if let &Opcode::Load = v1204 {
                                    let v1213 = C::littleendian(ctx, v1206);
                                    if let Some(v1214) = v1213 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1217 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1231 = &constructor_sink_load(ctx, v1202);
                                        let v1218 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1234 = constructor_vec_load_lane_little(
                                            ctx, v3, v1217, v1231, v1218,
                                        );
                                        let v1235 = constructor_output_reg(ctx, v1234);
                                        // Rule at src/isa/s390x/lower.isle line 2024.
                                        return Some(v1235);
                                    }
                                    let v1208 = C::bigendian(ctx, v1206);
                                    if let Some(v1209) = v1208 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1217 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1231 = &constructor_sink_load(ctx, v1202);
                                        let v1218 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1232 =
                                            constructor_vec_load_lane(ctx, v3, v1217, v1231, v1218);
                                        let v1233 = constructor_output_reg(ctx, v1232);
                                        // Rule at src/isa/s390x/lower.isle line 2020.
                                        return Some(v1233);
                                    }
                                }
                            }
                        }
                        let v1197 = C::i16_from_value(ctx, v48);
                        if let Some(v1198) = v1197 {
                            let v3 = C::value_type(ctx, v2);
                            let v1217 = constructor_vec_imm(ctx, v3, 0x0);
                            let v1228 = C::be_lane_idx(ctx, v3, 0x0);
                            let v1229 =
                                constructor_vec_insert_lane_imm(ctx, v3, v1217, v1198, v1228);
                            let v1230 = constructor_output_reg(ctx, v1229);
                            // Rule at src/isa/s390x/lower.isle line 2016.
                            return Some(v1230);
                        }
                        let v260 = C::def_inst(ctx, v48);
                        if let Some(v261) = v260 {
                            let v262 = &C::inst_data(ctx, v261);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1189,
                                arg: v1190,
                                imm: v1191,
                            } = v262
                            {
                                if let &Opcode::Extractlane = v1189 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v1221 = C::be_lane_idx(ctx, v3, 0x0);
                                    let v1224 = C::put_in_reg(ctx, v1190);
                                    let v1192 = C::u8_from_uimm8(ctx, v1191);
                                    let v1225 = C::be_lane_idx(ctx, v3, v1192);
                                    let v1226 = constructor_vec_move_lane_and_zero(
                                        ctx, v3, v1221, v1224, v1225,
                                    );
                                    let v1227 = constructor_output_reg(ctx, v1226);
                                    // Rule at src/isa/s390x/lower.isle line 2011.
                                    return Some(v1227);
                                }
                            }
                        }
                        let v49 = C::value_type(ctx, v48);
                        let v1180 = C::ty_int_ref_scalar_64(ctx, v49);
                        if let Some(v1181) = v1180 {
                            let v3 = C::value_type(ctx, v2);
                            let v1217 = constructor_vec_imm(ctx, v3, 0x0);
                            let v274 = C::put_in_reg(ctx, v48);
                            let v1218 = C::be_lane_idx(ctx, v3, 0x0);
                            let v56 = C::zero_reg(ctx);
                            let v1219 =
                                constructor_vec_insert_lane(ctx, v3, v1217, v274, v1218, v56);
                            let v1220 = constructor_output_reg(ctx, v1219);
                            // Rule at src/isa/s390x/lower.isle line 2000.
                            return Some(v1220);
                        }
                        let v1185 = C::ty_scalar_float(ctx, v49);
                        if let Some(v1186) = v1185 {
                            let v3 = C::value_type(ctx, v2);
                            let v1221 = C::be_lane_idx(ctx, v3, 0x0);
                            let v274 = C::put_in_reg(ctx, v48);
                            let v1222 =
                                constructor_vec_move_lane_and_zero(ctx, v3, v1221, v274, 0x0);
                            let v1223 = constructor_output_reg(ctx, v1222);
                            // Rule at src/isa/s390x/lower.isle line 2006.
                            return Some(v1223);
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v751 = &constructor_value_nonzero(ctx, v48);
                        let v3 = C::value_type(ctx, v2);
                        let v752 = constructor_lower_bool_to_mask(ctx, v3, v751);
                        let v753 = constructor_output_reg(ctx, v752);
                        // Rule at src/isa/s390x/lower.isle line 1140.
                        return Some(v753);
                    }
                }
                &Opcode::Ireduce => {
                    let v49 = C::value_type(ctx, v48);
                    let v568 = C::fits_in_64(ctx, v49);
                    if let Some(v569) = v568 {
                        let v570 = constructor_output_value(ctx, v48);
                        // Rule at src/isa/s390x/lower.isle line 880.
                        return Some(v570);
                    }
                    let v571 = C::vr128_ty(ctx, v49);
                    if let Some(v572) = v571 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v53 = C::zero_reg(ctx);
                        let v573 = constructor_vec_extract_lane(ctx, I64X2, v50, 0x1, v53);
                        let v574 = constructor_output_reg(ctx, v573);
                        // Rule at src/isa/s390x/lower.isle line 884.
                        return Some(v574);
                    }
                }
                &Opcode::SwidenLow => {
                    let v49 = C::value_type(ctx, v48);
                    let v614 = C::ty_vec128(ctx, v49);
                    if let Some(v615) = v614 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v616 = constructor_vec_unpacks_low_lane_order(ctx, v615, v50);
                        let v617 = constructor_output_reg(ctx, v616);
                        // Rule at src/isa/s390x/lower.isle line 946.
                        return Some(v617);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v49 = C::value_type(ctx, v48);
                    let v614 = C::ty_vec128(ctx, v49);
                    if let Some(v615) = v614 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v618 = constructor_vec_unpacks_high_lane_order(ctx, v615, v50);
                        let v619 = constructor_output_reg(ctx, v618);
                        // Rule at src/isa/s390x/lower.isle line 952.
                        return Some(v619);
                    }
                }
                &Opcode::UwidenLow => {
                    let v49 = C::value_type(ctx, v48);
                    let v614 = C::ty_vec128(ctx, v49);
                    if let Some(v615) = v614 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v620 = constructor_vec_unpacku_low_lane_order(ctx, v615, v50);
                        let v621 = constructor_output_reg(ctx, v620);
                        // Rule at src/isa/s390x/lower.isle line 958.
                        return Some(v621);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v49 = C::value_type(ctx, v48);
                    let v614 = C::ty_vec128(ctx, v49);
                    if let Some(v615) = v614 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v622 = constructor_vec_unpacku_high_lane_order(ctx, v615, v50);
                        let v623 = constructor_output_reg(ctx, v622);
                        // Rule at src/isa/s390x/lower.isle line 964.
                        return Some(v623);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v581 = constructor_put_in_reg_zext64(ctx, v48);
                            let v582 = constructor_output_reg(ctx, v581);
                            // Rule at src/isa/s390x/lower.isle line 895.
                            return Some(v582);
                        }
                        let v575 = C::gpr32_ty(ctx, v3);
                        if let Some(v576) = v575 {
                            let v577 = constructor_put_in_reg_zext32(ctx, v48);
                            let v578 = constructor_output_reg(ctx, v577);
                            // Rule at src/isa/s390x/lower.isle line 891.
                            return Some(v578);
                        }
                        if v3 == I128 {
                            let v49 = C::value_type(ctx, v48);
                            match v49 {
                                I8 => {
                                    let v273 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v274 = C::put_in_reg(ctx, v48);
                                    let v584 = C::zero_reg(ctx);
                                    let v585 = constructor_vec_insert_lane(
                                        ctx, I8X16, v273, v274, 0xF, v584,
                                    );
                                    let v586 = constructor_output_reg(ctx, v585);
                                    // Rule at src/isa/s390x/lower.isle line 899.
                                    return Some(v586);
                                }
                                I16 => {
                                    let v273 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v274 = C::put_in_reg(ctx, v48);
                                    let v584 = C::zero_reg(ctx);
                                    let v588 = constructor_vec_insert_lane(
                                        ctx, I16X8, v273, v274, 0x7, v584,
                                    );
                                    let v589 = constructor_output_reg(ctx, v588);
                                    // Rule at src/isa/s390x/lower.isle line 901.
                                    return Some(v589);
                                }
                                I32 => {
                                    let v273 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v274 = C::put_in_reg(ctx, v48);
                                    let v584 = C::zero_reg(ctx);
                                    let v591 = constructor_vec_insert_lane(
                                        ctx, I32X4, v273, v274, 0x3, v584,
                                    );
                                    let v592 = constructor_output_reg(ctx, v591);
                                    // Rule at src/isa/s390x/lower.isle line 903.
                                    return Some(v592);
                                }
                                I64 => {
                                    let v273 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v274 = C::put_in_reg(ctx, v48);
                                    let v584 = C::zero_reg(ctx);
                                    let v593 = constructor_vec_insert_lane(
                                        ctx, I64X2, v273, v274, 0x1, v584,
                                    );
                                    let v594 = constructor_output_reg(ctx, v593);
                                    // Rule at src/isa/s390x/lower.isle line 905.
                                    return Some(v594);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v579 = C::gpr64_ty(ctx, v3);
                        if let Some(v580) = v579 {
                            let v597 = constructor_put_in_reg_sext64(ctx, v48);
                            let v598 = constructor_output_reg(ctx, v597);
                            // Rule at src/isa/s390x/lower.isle line 916.
                            return Some(v598);
                        }
                        let v575 = C::gpr32_ty(ctx, v3);
                        if let Some(v576) = v575 {
                            let v595 = constructor_put_in_reg_sext32(ctx, v48);
                            let v596 = constructor_output_reg(ctx, v595);
                            // Rule at src/isa/s390x/lower.isle line 912.
                            return Some(v596);
                        }
                        if v3 == I128 {
                            let v597 = constructor_put_in_reg_sext64(ctx, v48);
                            let v600 = constructor_ashr_imm(ctx, I64, v597, 0x3F);
                            let v601 = constructor_mov_to_vec128(ctx, I128, v600, v597);
                            let v602 = constructor_output_reg(ctx, v601);
                            // Rule at src/isa/s390x/lower.isle line 920.
                            return Some(v602);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v49 = C::value_type(ctx, v48);
                            let v907 = constructor_fpromote_reg(ctx, v62, v49, v50);
                            let v908 = constructor_output_reg(ctx, v907);
                            // Rule at src/isa/s390x/lower.isle line 1478.
                            return Some(v908);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v49 = C::value_type(ctx, v48);
                            let v913 =
                                constructor_fdemote_reg(ctx, v62, v49, &FpuRoundMode::Current, v50);
                            let v914 = constructor_output_reg(ctx, v913);
                            // Rule at src/isa/s390x/lower.isle line 1492.
                            return Some(v914);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v49 = C::value_type(ctx, v48);
                            if v49 == F64X2 {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v915 = constructor_fdemote_reg(
                                    ctx,
                                    F32X4,
                                    F64X2,
                                    &FpuRoundMode::Current,
                                    v50,
                                );
                                let v916 = constructor_vec_lshr_imm(ctx, I64X2, v915, 0x20);
                                let v917 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v918 = constructor_vec_pack_lane_order(ctx, I64X2, v916, v917);
                                let v919 = constructor_output_reg(ctx, v918);
                                // Rule at src/isa/s390x/lower.isle line 1499.
                                return Some(v919);
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v49 = C::value_type(ctx, v48);
                            if v49 == F32X4 {
                                let v50 = C::put_in_reg(ctx, v48);
                                let v274 = C::put_in_reg(ctx, v48);
                                let v909 =
                                    constructor_vec_merge_low_lane_order(ctx, I32X4, v50, v274);
                                let v910 = constructor_fpromote_reg(ctx, F64X2, F32X4, v909);
                                let v911 = constructor_output_reg(ctx, v910);
                                // Rule at src/isa/s390x/lower.isle line 1485.
                                return Some(v911);
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v49 = C::value_type(ctx, v48);
                            let v980 = &constructor_fcmp_reg(ctx, v49, v50, v50);
                            let v982 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v983 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v984 = constructor_trap_if(ctx, v980, v982, v983);
                            let v985 = constructor_fcvt_to_uint_ub(ctx, v49, v62);
                            let v986 = &constructor_fcmp_reg(ctx, v49, v50, v985);
                            let v988 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v989 = &C::trap_code_integer_overflow(ctx);
                            let v990 = constructor_trap_if(ctx, v986, v988, v989);
                            let v991 = constructor_fcvt_to_uint_lb(ctx, v49);
                            let v992 = &constructor_fcmp_reg(ctx, v49, v50, v991);
                            let v994 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v995 = constructor_trap_if(ctx, v992, v994, v989);
                            let v996 = constructor_fcvt_flt_ty(ctx, v62, v49);
                            let v997 = constructor_fpromote_reg(ctx, v996, v49, v50);
                            let v999 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v996,
                                &FpuRoundMode::ToZero,
                                v997,
                            );
                            let v1000 = constructor_output_reg(ctx, v999);
                            // Rule at src/isa/s390x/lower.isle line 1591.
                            return Some(v1000);
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v49 = C::value_type(ctx, v48);
                            let v980 = &constructor_fcmp_reg(ctx, v49, v50, v50);
                            let v982 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v983 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v984 = constructor_trap_if(ctx, v980, v982, v983);
                            let v1001 = constructor_fcvt_to_sint_ub(ctx, v49, v62);
                            let v1002 = &constructor_fcmp_reg(ctx, v49, v50, v1001);
                            let v988 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v989 = &C::trap_code_integer_overflow(ctx);
                            let v1003 = constructor_trap_if(ctx, v1002, v988, v989);
                            let v1004 = constructor_fcvt_to_sint_lb(ctx, v49, v62);
                            let v1005 = &constructor_fcmp_reg(ctx, v49, v50, v1004);
                            let v994 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1006 = constructor_trap_if(ctx, v1005, v994, v989);
                            let v996 = constructor_fcvt_flt_ty(ctx, v62, v49);
                            let v997 = constructor_fpromote_reg(ctx, v996, v49, v50);
                            let v1007 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v996,
                                &FpuRoundMode::ToZero,
                                v997,
                            );
                            let v1008 = constructor_output_reg(ctx, v1007);
                            // Rule at src/isa/s390x/lower.isle line 1615.
                            return Some(v1008);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == F32X4 {
                                    let v933 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v934) = v933 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v1015 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v50,
                                        );
                                        let v1016 = constructor_output_reg(ctx, v1015);
                                        // Rule at src/isa/s390x/lower.isle line 1651.
                                        return Some(v1016);
                                    }
                                    let v937 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v938) = v937 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v274 = C::put_in_reg(ctx, v48);
                                        let v1017 =
                                            constructor_vec_merge_high(ctx, I32X4, v50, v274);
                                        let v1018 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1017);
                                        let v1019 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1018,
                                        );
                                        let v1020 = C::put_in_reg(ctx, v48);
                                        let v1021 = C::put_in_reg(ctx, v48);
                                        let v1022 =
                                            constructor_vec_merge_low(ctx, I32X4, v1020, v1021);
                                        let v1023 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1022);
                                        let v1024 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1023,
                                        );
                                        let v1025 =
                                            constructor_vec_pack_usat(ctx, I64X2, v1019, v1024);
                                        let v1026 = constructor_output_reg(ctx, v1025);
                                        // Rule at src/isa/s390x/lower.isle line 1656.
                                        return Some(v1026);
                                    }
                                }
                            }
                            I64X2 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == F64X2 {
                                    let v50 = C::put_in_reg(ctx, v48);
                                    let v1027 = constructor_fcvt_to_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v50,
                                    );
                                    let v1028 = constructor_output_reg(ctx, v1027);
                                    // Rule at src/isa/s390x/lower.isle line 1665.
                                    return Some(v1028);
                                }
                            }
                            _ => {}
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v49 = C::value_type(ctx, v48);
                            let v1009 = constructor_fcvt_flt_ty(ctx, v62, v49);
                            let v1010 = constructor_fcvt_int_ty(ctx, v62, v49);
                            let v1011 = constructor_fpromote_reg(ctx, v1009, v49, v50);
                            let v1012 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v1009,
                                &FpuRoundMode::ToZero,
                                v1011,
                            );
                            let v1013 = constructor_uint_sat_reg(ctx, v62, v1010, v1012);
                            let v1014 = constructor_output_reg(ctx, v1013);
                            // Rule at src/isa/s390x/lower.isle line 1639.
                            return Some(v1014);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == F32X4 {
                                    let v933 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v934) = v933 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v1037 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v50,
                                        );
                                        let v1038 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1039 = C::put_in_reg(ctx, v48);
                                        let v942 = C::put_in_reg(ctx, v48);
                                        let v1040 = constructor_vec_fcmpeq(ctx, F32X4, v1039, v942);
                                        let v1041 =
                                            constructor_vec_select(ctx, I32X4, v1037, v1038, v1040);
                                        let v1042 = constructor_output_reg(ctx, v1041);
                                        // Rule at src/isa/s390x/lower.isle line 1691.
                                        return Some(v1042);
                                    }
                                    let v937 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v938) = v937 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v274 = C::put_in_reg(ctx, v48);
                                        let v1017 =
                                            constructor_vec_merge_high(ctx, I32X4, v50, v274);
                                        let v1018 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1017);
                                        let v1043 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1018,
                                        );
                                        let v1020 = C::put_in_reg(ctx, v48);
                                        let v1021 = C::put_in_reg(ctx, v48);
                                        let v1022 =
                                            constructor_vec_merge_low(ctx, I32X4, v1020, v1021);
                                        let v1023 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1022);
                                        let v1044 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1023,
                                        );
                                        let v1045 =
                                            constructor_vec_pack_ssat(ctx, I64X2, v1043, v1044);
                                        let v1046 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1047 = C::put_in_reg(ctx, v48);
                                        let v1048 = C::put_in_reg(ctx, v48);
                                        let v1049 =
                                            constructor_vec_fcmpeq(ctx, F32X4, v1047, v1048);
                                        let v1050 =
                                            constructor_vec_select(ctx, I32X4, v1045, v1046, v1049);
                                        let v1051 = constructor_output_reg(ctx, v1050);
                                        // Rule at src/isa/s390x/lower.isle line 1699.
                                        return Some(v1051);
                                    }
                                }
                            }
                            I64X2 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == F64X2 {
                                    let v50 = C::put_in_reg(ctx, v48);
                                    let v1052 = constructor_fcvt_to_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v50,
                                    );
                                    let v771 = constructor_vec_imm(ctx, I64X2, 0x0);
                                    let v1039 = C::put_in_reg(ctx, v48);
                                    let v942 = C::put_in_reg(ctx, v48);
                                    let v1053 = constructor_vec_fcmpeq(ctx, F64X2, v1039, v942);
                                    let v1054 =
                                        constructor_vec_select(ctx, I64X2, v1052, v771, v1053);
                                    let v1055 = constructor_output_reg(ctx, v1054);
                                    // Rule at src/isa/s390x/lower.isle line 1711.
                                    return Some(v1055);
                                }
                            }
                            _ => {}
                        }
                        let v61 = C::fits_in_64(ctx, v3);
                        if let Some(v62) = v61 {
                            let v50 = C::put_in_reg(ctx, v48);
                            let v49 = C::value_type(ctx, v48);
                            let v1009 = constructor_fcvt_flt_ty(ctx, v62, v49);
                            let v1010 = constructor_fcvt_int_ty(ctx, v62, v49);
                            let v1011 = constructor_fpromote_reg(ctx, v1009, v49, v50);
                            let v1029 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v1009,
                                &FpuRoundMode::ToZero,
                                v1011,
                            );
                            let v1030 = &constructor_fcmp_reg(ctx, v49, v50, v50);
                            let v1031 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1033 = &constructor_cmov_imm(ctx, v1010, v1031, 0x0, v1029);
                            let v1034 = constructor_with_flags_reg(ctx, v1030, v1033);
                            let v1035 = constructor_sint_sat_reg(ctx, v62, v1010, v1034);
                            let v1036 = constructor_output_reg(ctx, v1035);
                            // Rule at src/isa/s390x/lower.isle line 1672.
                            return Some(v1036);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v49 = C::value_type(ctx, v48);
                                let v920 = C::vxrs_ext2_enabled(ctx, v49);
                                if let Some(v921) = v920 {
                                    let v922 = C::fits_in_32(ctx, v49);
                                    if let Some(v923) = v922 {
                                        let v577 = constructor_put_in_reg_zext32(ctx, v48);
                                        let v925 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v577,
                                        );
                                        let v926 = constructor_output_reg(ctx, v925);
                                        // Rule at src/isa/s390x/lower.isle line 1508.
                                        return Some(v926);
                                    }
                                }
                                let v568 = C::fits_in_64(ctx, v49);
                                if let Some(v569) = v568 {
                                    let v581 = constructor_put_in_reg_zext64(ctx, v48);
                                    let v928 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v581,
                                    );
                                    let v929 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v928,
                                    );
                                    let v930 = constructor_output_reg(ctx, v929);
                                    // Rule at src/isa/s390x/lower.isle line 1514.
                                    return Some(v930);
                                }
                            }
                            F64 => {
                                let v49 = C::value_type(ctx, v48);
                                let v568 = C::fits_in_64(ctx, v49);
                                if let Some(v569) = v568 {
                                    let v581 = constructor_put_in_reg_zext64(ctx, v48);
                                    let v931 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v581,
                                    );
                                    let v932 = constructor_output_reg(ctx, v931);
                                    // Rule at src/isa/s390x/lower.isle line 1520.
                                    return Some(v932);
                                }
                            }
                            F32X4 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == I32X4 {
                                    let v933 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v934) = v933 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v935 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v50,
                                        );
                                        let v936 = constructor_output_reg(ctx, v935);
                                        // Rule at src/isa/s390x/lower.isle line 1525.
                                        return Some(v936);
                                    }
                                    let v937 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v938) = v937 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v939 = constructor_vec_unpacku_high(ctx, I32X4, v50);
                                        let v940 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v939,
                                        );
                                        let v941 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v940,
                                        );
                                        let v942 = C::put_in_reg(ctx, v48);
                                        let v943 = constructor_vec_unpacku_low(ctx, I32X4, v942);
                                        let v944 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v943,
                                        );
                                        let v945 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v944,
                                        );
                                        let v955 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v956 = constructor_vec_imm(ctx, I8X16, v955);
                                        let v957 =
                                            constructor_vec_permute(ctx, F32X4, v941, v945, v956);
                                        let v958 = constructor_output_reg(ctx, v957);
                                        // Rule at src/isa/s390x/lower.isle line 1530.
                                        return Some(v958);
                                    }
                                }
                            }
                            F64X2 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == I64X2 {
                                    let v50 = C::put_in_reg(ctx, v48);
                                    let v959 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v50,
                                    );
                                    let v960 = constructor_output_reg(ctx, v959);
                                    // Rule at src/isa/s390x/lower.isle line 1542.
                                    return Some(v960);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v49 = C::value_type(ctx, v48);
                                let v920 = C::vxrs_ext2_enabled(ctx, v49);
                                if let Some(v921) = v920 {
                                    let v922 = C::fits_in_32(ctx, v49);
                                    if let Some(v923) = v922 {
                                        let v595 = constructor_put_in_reg_sext32(ctx, v48);
                                        let v961 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v595,
                                        );
                                        let v962 = constructor_output_reg(ctx, v961);
                                        // Rule at src/isa/s390x/lower.isle line 1549.
                                        return Some(v962);
                                    }
                                }
                                let v568 = C::fits_in_64(ctx, v49);
                                if let Some(v569) = v568 {
                                    let v597 = constructor_put_in_reg_sext64(ctx, v48);
                                    let v963 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v597,
                                    );
                                    let v964 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v963,
                                    );
                                    let v965 = constructor_output_reg(ctx, v964);
                                    // Rule at src/isa/s390x/lower.isle line 1555.
                                    return Some(v965);
                                }
                            }
                            F64 => {
                                let v49 = C::value_type(ctx, v48);
                                let v568 = C::fits_in_64(ctx, v49);
                                if let Some(v569) = v568 {
                                    let v597 = constructor_put_in_reg_sext64(ctx, v48);
                                    let v966 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v597,
                                    );
                                    let v967 = constructor_output_reg(ctx, v966);
                                    // Rule at src/isa/s390x/lower.isle line 1561.
                                    return Some(v967);
                                }
                            }
                            F32X4 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == I32X4 {
                                    let v933 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v934) = v933 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v968 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v50,
                                        );
                                        let v969 = constructor_output_reg(ctx, v968);
                                        // Rule at src/isa/s390x/lower.isle line 1566.
                                        return Some(v969);
                                    }
                                    let v937 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v938) = v937 {
                                        let v50 = C::put_in_reg(ctx, v48);
                                        let v970 = constructor_vec_unpacks_high(ctx, I32X4, v50);
                                        let v971 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v970,
                                        );
                                        let v972 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v971,
                                        );
                                        let v942 = C::put_in_reg(ctx, v48);
                                        let v973 = constructor_vec_unpacks_low(ctx, I32X4, v942);
                                        let v974 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v973,
                                        );
                                        let v975 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v974,
                                        );
                                        let v955 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v956 = constructor_vec_imm(ctx, I8X16, v955);
                                        let v976 =
                                            constructor_vec_permute(ctx, F32X4, v972, v975, v956);
                                        let v977 = constructor_output_reg(ctx, v976);
                                        // Rule at src/isa/s390x/lower.isle line 1571.
                                        return Some(v977);
                                    }
                                }
                            }
                            F64X2 => {
                                let v49 = C::value_type(ctx, v48);
                                if v49 == I64X2 {
                                    let v50 = C::put_in_reg(ctx, v48);
                                    let v978 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v50,
                                    );
                                    let v979 = constructor_output_reg(ctx, v978);
                                    // Rule at src/isa/s390x/lower.isle line 1583.
                                    return Some(v979);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v49 = C::value_type(ctx, v48);
                    if v49 == I128 {
                        let v50 = C::put_in_reg(ctx, v48);
                        let v53 = C::zero_reg(ctx);
                        let v54 = constructor_vec_extract_lane(ctx, I64X2, v50, 0x0, v53);
                        let v56 = C::zero_reg(ctx);
                        let v57 = constructor_vec_extract_lane(ctx, I64X2, v50, 0x1, v56);
                        let v58 = C::value_reg(ctx, v57);
                        let v59 = C::value_reg(ctx, v54);
                        let v60 = C::output_pair(ctx, v58, v59);
                        // Rule at src/isa/s390x/lower.isle line 57.
                        return Some(v60);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v23,
            constant_handle: v24,
        } => {
            if let &Opcode::Vconst = v23 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v25 = C::u128_from_constant(ctx, v24);
                    if let Some(v26) = v25 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::be_vec_const(ctx, v3, v26);
                        let v28 = constructor_vec_imm(ctx, v3, v27);
                        let v29 = constructor_output_reg(ctx, v28);
                        // Rule at src/isa/s390x/lower.isle line 33.
                        return Some(v29);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1469,
            global_value: v1470,
        } => {
            match v1469 {
                &Opcode::SymbolValue => {
                    let v1471 = C::symbol_value_data(ctx, v1470);
                    if let Some(v1472) = v1471 {
                        let v1476 = C::reloc_distance_near(ctx, v1472.1);
                        if let Some(v1477) = v1476 {
                            let v1478 = constructor_memarg_symbol_offset(ctx, v1472.2);
                            if let Some(v1479) = v1478 {
                                let v1461 = C::memflags_trusted(ctx);
                                let v1480 = &C::memarg_symbol(ctx, v1472.0, v1479, v1461);
                                let v1481 = constructor_load_addr(ctx, v1480);
                                let v1482 = constructor_output_reg(ctx, v1481);
                                // Rule at src/isa/s390x/lower.isle line 2256.
                                return Some(v1482);
                            }
                        }
                        let v1483 = SymbolReloc::Absolute {
                            name: v1472.0,
                            offset: v1472.2,
                        };
                        let v1484 = constructor_load_symbol_reloc(ctx, &v1483);
                        let v1485 = constructor_output_reg(ctx, v1484);
                        // Rule at src/isa/s390x/lower.isle line 2262.
                        return Some(v1485);
                    }
                }
                &Opcode::TlsValue => {
                    let v1471 = C::symbol_value_data(ctx, v1470);
                    if let Some(v1472) = v1471 {
                        if v1472.2 == 0x0 {
                            let v1486 = C::tls_model_is_elf_gd(ctx);
                            if let Some(v1487) = v1486 {
                                let v1489 = &C::memarg_got(ctx);
                                let v1490 = constructor_load_addr(ctx, v1489);
                                let v1488 = SymbolReloc::TlsGd { name: v1472.0 };
                                let v1491 = constructor_load_symbol_reloc(ctx, &v1488);
                                let v1492 =
                                    constructor_lib_call_tls_get_offset(ctx, v1490, v1491, &v1488);
                                let v1493 = constructor_thread_pointer(ctx);
                                let v1494 = constructor_add_reg(ctx, I64, v1492, v1493);
                                let v1495 = constructor_output_reg(ctx, v1494);
                                // Rule at src/isa/s390x/lower.isle line 2269.
                                return Some(v1495);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v10,
            imm: v11,
        } => {
            if let &Opcode::F32const = v10 {
                let v12 = C::u32_from_ieee32(ctx, v11);
                let v14 = C::u32_as_u64(ctx, v12);
                let v15 = constructor_imm(ctx, F32, v14);
                let v16 = constructor_output_reg(ctx, v15);
                // Rule at src/isa/s390x/lower.isle line 21.
                return Some(v16);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v17,
            imm: v18,
        } => {
            if let &Opcode::F64const = v17 {
                let v19 = C::u64_from_ieee64(ctx, v18);
                let v21 = constructor_imm(ctx, F64, v19);
                let v22 = constructor_output_reg(ctx, v21);
                // Rule at src/isa/s390x/lower.isle line 27.
                return Some(v22);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/s390x/lower.isle line 15.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v9,
            arg: v10,
            table: v11,
        } => {
            if let &Opcode::BrTable = v9 {
                let v12 = constructor_put_in_reg_zext64(ctx, v10);
                let v14 = C::vec_length_minus1(ctx, arg1);
                let v15 = &constructor_icmpu_uimm32(ctx, I64, v12, v14);
                let v17 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThanOrEqual);
                let v18 = &constructor_bool(ctx, v15, v17);
                let v19 = C::vec_element(ctx, arg1, 0x0);
                let v20 = &constructor_oneway_cond_br_bool(ctx, v18, v19);
                let v21 = constructor_emit_side_effect(ctx, v20);
                let v23 = constructor_lshl_imm(ctx, I64, v12, 0x2);
                let v24 = &constructor_jt_sequence(ctx, v23, arg1);
                let v25 = constructor_emit_side_effect(ctx, v24);
                // Rule at src/isa/s390x/lower.isle line 3746.
                return Some(v25);
            }
        }
        &InstructionData::Brif {
            opcode: ref v26,
            arg: v27,
            blocks: ref v28,
        } => {
            if let &Opcode::Brif = v26 {
                let v32 = &constructor_value_nonzero(ctx, v27);
                let v33 = C::vec_element(ctx, arg1, 0x0);
                let v35 = C::vec_element(ctx, arg1, 0x1);
                let v36 = &constructor_cond_br_bool(ctx, v32, v33, v35);
                let v37 = constructor_emit_side_effect(ctx, v36);
                // Rule at src/isa/s390x/lower.isle line 3779.
                return Some(v37);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_element(ctx, arg1, 0x0);
                let v7 = &constructor_jump_impl(ctx, v6);
                let v8 = constructor_emit_side_effect(ctx, v7);
                // Rule at src/isa/s390x/lower.isle line 3738.
                return Some(v8);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term vec_mul_impl.
pub fn constructor_vec_mul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I128 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v24 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v14);
            let v25 = C::zero_reg(ctx);
            let v26 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v25);
            let v27 = C::zero_reg(ctx);
            let v28 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v27);
            let v29 = constructor_umul_wide(ctx, v24, v28);
            let v30 = C::regpair_lo(ctx, v29);
            let v31 = C::regpair_hi(ctx, v29);
            let v32 = constructor_mul_reg(ctx, I64, v24, v26);
            let v33 = constructor_mul_reg(ctx, I64, v13, v28);
            let v34 = constructor_add_reg(ctx, I64, v32, v31);
            let v35 = constructor_add_reg(ctx, I64, v33, v34);
            let v36 = constructor_mov_to_vec128(ctx, I64X2, v35, v30);
            // Rule at src/isa/s390x/lower.isle line 405.
            return v36;
        }
        I8X16 => {
            let v4 = constructor_vec_mul(ctx, I8X16, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 392.
            return v4;
        }
        I16X8 => {
            let v6 = constructor_vec_mul(ctx, I16X8, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 393.
            return v6;
        }
        I32X4 => {
            let v8 = constructor_vec_mul(ctx, I32X4, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 394.
            return v8;
        }
        I64X2 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v15 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v14);
            let v16 = constructor_mul_reg(ctx, I64, v13, v15);
            let v18 = C::zero_reg(ctx);
            let v19 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v18);
            let v20 = C::zero_reg(ctx);
            let v21 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v20);
            let v22 = constructor_mul_reg(ctx, I64, v19, v21);
            let v23 = constructor_mov_to_vec128(ctx, I64X2, v16, v22);
            // Rule at src/isa/s390x/lower.isle line 397.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_mul_impl", "src/isa/s390x/lower.isle line 387"
    )
}

// Generated as internal constructor for term sqmul_impl.
pub fn constructor_sqmul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32X4 => {
            let v4 = constructor_vec_mul_impl(ctx, I32X4, arg1, arg2);
            let v6 = constructor_vec_imm_bit_mask(ctx, I32X4, 0x11, 0x11);
            let v7 = constructor_vec_add(ctx, I32X4, v4, v6);
            let v9 = constructor_vec_ashr_imm(ctx, I32X4, v7, 0xF);
            // Rule at src/isa/s390x/lower.isle line 509.
            return v9;
        }
        I64X2 => {
            let v11 = constructor_vec_mul_impl(ctx, I64X2, arg1, arg2);
            let v13 = constructor_vec_imm_bit_mask(ctx, I64X2, 0x21, 0x21);
            let v14 = constructor_vec_add(ctx, I64X2, v11, v13);
            let v16 = constructor_vec_ashr_imm(ctx, I64X2, v14, 0x1F);
            // Rule at src/isa/s390x/lower.isle line 513.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sqmul_impl", "src/isa/s390x/lower.isle line 508"
    )
}

// Generated as internal constructor for term div_overflow_check_needed.
pub fn constructor_div_overflow_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_not_neg1(ctx, v2);
        if let Some(v4) = v3 {
            // Rule at src/isa/s390x/lower.isle line 624.
            return false;
        }
    }
    // Rule at src/isa/s390x/lower.isle line 627.
    return true;
}

// Generated as internal constructor for term maybe_trap_if_sdiv_overflow.
pub fn constructor_maybe_trap_if_sdiv_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            let v6 = constructor_int_max(ctx, arg2);
            let v7 = constructor_imm(ctx, arg1, v6);
            let v8 = constructor_xor_reg(ctx, arg1, v7, arg3);
            let v9 = constructor_and_reg(ctx, arg1, v8, arg4);
            let v12 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v13 = &C::trap_code_integer_overflow(ctx);
            let v14 = constructor_icmps_simm16_and_trap(ctx, arg1, v9, -0x1, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 640.
            return v14;
        }
        false => {
            let v5 = C::invalid_reg(ctx);
            // Rule at src/isa/s390x/lower.isle line 639.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_trap_if_sdiv_overflow", "src/isa/s390x/lower.isle line 638"
    )
}

// Generated as internal constructor for term int_max.
pub fn constructor_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 647.
            return 0x7F;
        }
        I16 => {
            // Rule at src/isa/s390x/lower.isle line 648.
            return 0x7FFF;
        }
        I32 => {
            // Rule at src/isa/s390x/lower.isle line 649.
            return 0x7FFFFFFF;
        }
        I64 => {
            // Rule at src/isa/s390x/lower.isle line 650.
            return 0x7FFFFFFFFFFFFFFF;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_max", "src/isa/s390x/lower.isle line 646"
    )
}

// Generated as internal constructor for term maybe_avoid_srem_overflow.
pub fn constructor_maybe_avoid_srem_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                I32 => {
                    // Rule at src/isa/s390x/lower.isle line 668.
                    return arg2;
                }
                I64 => {
                    let v6 = &constructor_icmps_simm16(ctx, I64, arg3, -0x1);
                    let v8 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                    let v10 = &constructor_cmov_imm(ctx, I64, v8, 0x0, arg2);
                    let v11 = constructor_with_flags_reg(ctx, v6, v10);
                    // Rule at src/isa/s390x/lower.isle line 669.
                    return v11;
                }
                _ => {}
            }
        }
        false => {
            // Rule at src/isa/s390x/lower.isle line 667.
            return arg2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_avoid_srem_overflow", "src/isa/s390x/lower.isle line 666"
    )
}

// Generated as internal constructor for term bitrev_bits.
pub fn constructor_bitrev_bits<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u64,
    arg2: Type,
    arg3: Reg,
) -> Reg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = constructor_imm(ctx, v4, arg1);
        let v7 = constructor_ty_ext32(ctx, v4);
        let v8 = constructor_lshl_imm(ctx, v7, arg3, arg0);
        let v9 = constructor_ty_ext32(ctx, v4);
        let v10 = constructor_lshr_imm(ctx, v9, arg3, arg0);
        let v11 = constructor_and_reg(ctx, v4, v8, v6);
        let v12 = constructor_not_reg(ctx, v4, v6);
        let v13 = constructor_and_reg(ctx, v4, v10, v12);
        let v14 = constructor_or_reg(ctx, v4, v11, v13);
        // Rule at src/isa/s390x/lower.isle line 1153.
        return v14;
    }
    let v15 = C::vr128_ty(ctx, arg2);
    if let Some(v16) = v15 {
        let v18 = constructor_vec_imm_splat(ctx, I64X2, arg1);
        let v20 = C::u8_as_u64(ctx, arg0);
        let v21 = constructor_vec_imm_splat(ctx, I8X16, v20);
        let v22 = constructor_vec_lshl_by_bit(ctx, arg3, v21);
        let v23 = constructor_vec_lshr_by_bit(ctx, arg3, v21);
        let v24 = constructor_vec_select(ctx, v16, v22, v23, v18);
        // Rule at src/isa/s390x/lower.isle line 1161.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bits", "src/isa/s390x/lower.isle line 1152"
    )
}

// Generated as internal constructor for term bitrev_bytes.
pub fn constructor_bitrev_bytes<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 1169.
            return arg1;
        }
        I16 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            let v5 = constructor_lshr_imm(ctx, I32, v3, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1170.
            return v5;
        }
        I32 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            // Rule at src/isa/s390x/lower.isle line 1171.
            return v3;
        }
        I64 => {
            let v7 = constructor_bswap_reg(ctx, I64, arg1);
            // Rule at src/isa/s390x/lower.isle line 1172.
            return v7;
        }
        I128 => {
            let v26 = constructor_imm8x16(
                ctx, 0xF, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0,
            );
            let v27 = constructor_vec_imm(ctx, I8X16, v26);
            let v28 = constructor_vec_permute(ctx, I128, arg1, arg1, v27);
            // Rule at src/isa/s390x/lower.isle line 1173.
            return v28;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bytes", "src/isa/s390x/lower.isle line 1168"
    )
}

// Generated as internal constructor for term clz_offset.
pub fn constructor_clz_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x38);
            // Rule at src/isa/s390x/lower.isle line 1190.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x30);
            // Rule at src/isa/s390x/lower.isle line 1191.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x20);
            // Rule at src/isa/s390x/lower.isle line 1192.
            return v10;
        }
        I64 => {
            // Rule at src/isa/s390x/lower.isle line 1193.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "clz_offset", "src/isa/s390x/lower.isle line 1189"
    )
}

// Generated as internal constructor for term cls_offset.
pub fn constructor_cls_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x39);
            // Rule at src/isa/s390x/lower.isle line 1221.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x31);
            // Rule at src/isa/s390x/lower.isle line 1222.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x21);
            // Rule at src/isa/s390x/lower.isle line 1223.
            return v10;
        }
        I64 => {
            let v13 = constructor_add_simm16(ctx, I64, arg1, -0x1);
            // Rule at src/isa/s390x/lower.isle line 1224.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cls_offset", "src/isa/s390x/lower.isle line 1220"
    )
}

// Generated as internal constructor for term ctz_guardbit.
pub fn constructor_ctz_guardbit<C: Context>(ctx: &mut C, arg0: Type) -> UImm16Shifted {
    match arg0 {
        I8 => {
            let v3 = C::uimm16shifted(ctx, 0x100, 0x0);
            // Rule at src/isa/s390x/lower.isle line 1275.
            return v3;
        }
        I16 => {
            let v6 = C::uimm16shifted(ctx, 0x1, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1276.
            return v6;
        }
        I32 => {
            let v8 = C::uimm16shifted(ctx, 0x1, 0x20);
            // Rule at src/isa/s390x/lower.isle line 1277.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ctz_guardbit", "src/isa/s390x/lower.isle line 1274"
    )
}

// Generated as internal constructor for term vec_move_lane_and_insert.
pub fn constructor_vec_move_lane_and_insert<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg2 {
                0x0 => {
                    let v10 = constructor_vec_permute_dw_imm(ctx, arg0, arg3, arg4, arg1, 0x1);
                    // Rule at src/isa/s390x/lower.isle line 1805.
                    return v10;
                }
                0x1 => {
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, arg1, 0x0, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 1807.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg2 == arg4 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg2);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_select(ctx, arg0, arg3, arg1, v14);
        // Rule at src/isa/s390x/lower.isle line 1811.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg3, arg4);
    let v17 = C::lane_byte_mask(ctx, arg0, arg2);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_select(ctx, arg0, v16, arg1, v18);
    // Rule at src/isa/s390x/lower.isle line 1816.
    return v19;
}

// Generated as internal constructor for term vec_load_lane_little.
pub fn constructor_vec_load_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = constructor_vec_load_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1825.
                return v8;
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1829.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = constructor_loadrev16(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v16 = constructor_vec_insert_lane(ctx, arg0, arg1, v14, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1840.
                    return v16;
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1832.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v17 = constructor_loadrev32(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v18 = constructor_vec_insert_lane(ctx, arg0, arg1, v17, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1843.
                    return v18;
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1835.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v19 = constructor_loadrev64(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v20 = constructor_vec_insert_lane(ctx, arg0, arg1, v19, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1846.
                    return v20;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little", "src/isa/s390x/lower.isle line 1822"
    )
}

// Generated as internal constructor for term vec_load_lane_little_undef.
pub fn constructor_vec_load_lane_little_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v7 = constructor_vec_load_lane_undef(ctx, arg0, arg1, arg2);
                // Rule at src/isa/s390x/lower.isle line 1854.
                return v7;
            }
            0x10 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1858.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v13 = constructor_loadrev16(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_insert_lane_undef(ctx, arg0, v13, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1869.
                    return v15;
                }
            }
            0x20 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1861.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v16 = constructor_loadrev32(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v17 = constructor_vec_insert_lane_undef(ctx, arg0, v16, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1872.
                    return v17;
                }
            }
            0x40 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1864.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v18 = constructor_loadrev64(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v19 = constructor_vec_insert_lane_undef(ctx, arg0, v18, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1875.
                    return v19;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little_undef", "src/isa/s390x/lower.isle line 1851"
    )
}

// Generated as internal constructor for term vec_store_lane_little.
pub fn constructor_vec_store_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = &constructor_vec_store_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1912.
                return v8.clone();
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1916.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v16 = &constructor_storerev16(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1927.
                    return v16.clone();
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1919.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v17 = &constructor_storerev32(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1930.
                    return v17.clone();
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1922.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v18 = &constructor_storerev64(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1933.
                    return v18.clone();
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_little", "src/isa/s390x/lower.isle line 1909"
    )
}

// Generated as internal constructor for term vec_load_replicate_little.
pub fn constructor_vec_load_replicate_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v6 = constructor_vec_load_replicate(ctx, arg0, arg1);
                // Rule at src/isa/s390x/lower.isle line 1971.
                return v6;
            }
            0x10 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1975.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1986.
                    return v14;
                }
            }
            0x20 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1978.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1989.
                    return v14;
                }
            }
            0x40 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1981.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1992.
                    return v14;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_little", "src/isa/s390x/lower.isle line 1968"
    )
}

// Generated as internal constructor for term vec_move_lane_and_zero.
pub fn constructor_vec_move_lane_and_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: Reg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg1 {
                0x0 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v11 = constructor_vec_permute_dw_imm(ctx, arg0, arg2, arg3, v9, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 2032.
                    return v11;
                }
                0x1 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, v9, 0x0, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2034.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg1 == arg3 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg1);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_and(ctx, arg0, arg2, v14);
        // Rule at src/isa/s390x/lower.isle line 2038.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg2, arg3);
    let v17 = C::lane_byte_mask(ctx, arg0, arg1);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_and(ctx, arg0, v16, v18);
    // Rule at src/isa/s390x/lower.isle line 2043.
    return v19;
}

// Generated as internal constructor for term lib_call_tls_get_offset.
pub fn constructor_lib_call_tls_get_offset<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &SymbolReloc,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &C::lib_call_info_tls_get_offset(ctx, v4, arg0, arg1, arg2);
    let v6 = C::lib_accumulate_outgoing_args_size(ctx, v5);
    let v7 = &constructor_lib_call(ctx, v5);
    let v8 = constructor_side_effect(ctx, v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/lower.isle line 2279.
    return v9;
}

// Generated as internal constructor for term thread_pointer.
pub fn constructor_thread_pointer<C: Context>(ctx: &mut C) -> Reg {
    let v2 = constructor_load_ar(ctx, 0x0);
    let v4 = constructor_lshl_imm(ctx, I64, v2, 0x20);
    let v6 = constructor_insert_ar(ctx, v4, 0x1);
    // Rule at src/isa/s390x/lower.isle line 2288.
    return v6;
}

// Generated as internal constructor for term vec_load_full_rev.
pub fn constructor_vec_load_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v3 = C::vr128_ty(ctx, arg0);
    if let Some(v4) = v3 {
        let v1 = C::vxrs_ext2_enabled(ctx, arg0);
        if let Some(v2) = v1 {
            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v9 = constructor_vec_loadrev(ctx, v4, v8);
            // Rule at src/isa/s390x/lower.isle line 2371.
            return v9;
        }
        let v10 = C::vxrs_ext2_disabled(ctx, arg0);
        if let Some(v11) = v10 {
            let v13 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x0);
            let v15 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x8);
            let v16 = constructor_loadrev64(ctx, v13);
            let v17 = constructor_loadrev64(ctx, v15);
            let v18 = constructor_mov_to_vec128(ctx, v4, v17, v16);
            // Rule at src/isa/s390x/lower.isle line 2375.
            return v18;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_full_rev", "src/isa/s390x/lower.isle line 2368"
    )
}

// Generated as internal constructor for term vec_load_byte_rev.
pub fn constructor_vec_load_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                if v7.1 == 0x10 {
                    let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                    let v11 = constructor_vec_load(ctx, arg0, v10);
                    // Rule at src/isa/s390x/lower.isle line 2391.
                    return v11;
                }
            }
            0x10 => {
                if v7.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_byte16rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2401.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2412.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v7.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_byte32rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2398.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2409.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v7.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_byte64rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2395.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2406.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = constructor_vec_load_full_rev(ctx, I128, arg1, arg2, arg3);
        // Rule at src/isa/s390x/lower.isle line 2387.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_byte_rev", "src/isa/s390x/lower.isle line 2384"
    )
}

// Generated as internal constructor for term vec_load_elt_rev.
pub fn constructor_vec_load_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2426.
                    return v11;
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_elt16rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2436.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2447.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_elt32rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2433.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2444.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_elt64rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2430.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2441.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
        let v6 = constructor_vec_load(ctx, I128, v5);
        // Rule at src/isa/s390x/lower.isle line 2422.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_elt_rev", "src/isa/s390x/lower.isle line 2418"
    )
}

// Generated as internal constructor for term load_v64.
pub fn constructor_load_v64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = &C::lane_order(ctx);
    match v6 {
        &LaneOrder::LittleEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2598.
                            return v13;
                        }
                    }
                    0x10 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v21 = constructor_vec_rot_imm(ctx, I16X8, v13, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2609.
                                return v21;
                            }
                        }
                    }
                    0x20 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v24 = constructor_vec_rot_imm(ctx, I64X2, v10, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2621.
                                return v24;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2588.
                return v13;
            }
        }
        &LaneOrder::BigEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2593.
                            return v10;
                        }
                    }
                    0x10 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v20 = constructor_vec_rot_imm(ctx, I16X8, v10, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2603.
                                return v20;
                            }
                        }
                    }
                    0x20 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v23 = constructor_vec_rot_imm(ctx, I64X2, v13, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2615.
                                return v23;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v2 = C::bigendian(ctx, arg1);
            if let Some(v3) = v2 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2583.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "load_v64", "src/isa/s390x/lower.isle line 2580"
    )
}

// Generated as internal constructor for term vec_store_full_rev.
pub fn constructor_vec_store_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v1 = C::vxrs_ext2_enabled(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v8 = &constructor_vec_storerev(ctx, arg1, v7);
        // Rule at src/isa/s390x/lower.isle line 2705.
        return v8.clone();
    }
    let v9 = C::vxrs_ext2_disabled(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x0);
        let v14 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x8);
        let v17 = C::zero_reg(ctx);
        let v18 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v17);
        let v19 = C::zero_reg(ctx);
        let v20 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v19);
        let v21 = &constructor_storerev64(ctx, v18, v12);
        let v22 = &constructor_storerev64(ctx, v20, v14);
        let v23 = &constructor_side_effect_concat(ctx, v21, v22);
        // Rule at src/isa/s390x/lower.isle line 2709.
        return v23.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_full_rev", "src/isa/s390x/lower.isle line 2702"
    )
}

// Generated as internal constructor for term vec_store_byte_rev.
pub fn constructor_vec_store_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                    let v12 = &constructor_vec_store(ctx, arg1, v11);
                    // Rule at src/isa/s390x/lower.isle line 2726.
                    return v12.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v17 = &constructor_vec_store_byte16rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2736.
                        return v17.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2747.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_byte32rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2733.
                        return v16.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2744.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_byte64rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2730.
                        return v15.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2741.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v6 = &constructor_vec_store_full_rev(ctx, I128, arg1, arg2, arg3, arg4);
        // Rule at src/isa/s390x/lower.isle line 2722.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_byte_rev", "src/isa/s390x/lower.isle line 2719"
    )
}

// Generated as internal constructor for term vec_store_elt_rev.
pub fn constructor_vec_store_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_vec_store_full_rev(ctx, arg0, arg1, arg2, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 2760.
                    return v11.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_elt16rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2770.
                        return v16.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2781.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_elt32rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2767.
                        return v15.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2778.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v14 = &constructor_vec_store_elt64rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2764.
                        return v14.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2775.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v6 = &constructor_vec_store(ctx, arg1, v5);
        // Rule at src/isa/s390x/lower.isle line 2756.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_elt_rev", "src/isa/s390x/lower.isle line 2753"
    )
}

// Generated as internal constructor for term istore8_impl.
pub fn constructor_istore8_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v7 = C::u8_from_value(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v10 = &constructor_store8_imm(ctx, v8, v9);
        // Rule at src/isa/s390x/lower.isle line 2800.
        return v10.clone();
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = &constructor_lower_address(ctx, arg0, arg2, arg3);
    let v6 = &constructor_store8(ctx, v4, v5);
    // Rule at src/isa/s390x/lower.isle line 2796.
    return v6.clone();
}

// Generated as internal constructor for term istore16_impl.
pub fn constructor_istore16_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v12 = C::i16_from_value(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v15 = &constructor_store16_imm(ctx, v13, v14);
            // Rule at src/isa/s390x/lower.isle line 2822.
            return v15.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2814.
        return v8.clone();
    }
    let v9 = C::littleendian(ctx, arg0);
    if let Some(v10) = v9 {
        let v16 = C::i16_from_swapped_value(ctx, arg1);
        if let Some(v17) = v16 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v18 = &constructor_store16_imm(ctx, v17, v14);
            // Rule at src/isa/s390x/lower.isle line 2826.
            return v18.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v11 = &constructor_storerev16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2818.
        return v11.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore16_impl", "src/isa/s390x/lower.isle line 2811"
    )
}

// Generated as internal constructor for term istore32_impl.
pub fn constructor_istore32_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store32_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2844.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2840.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2848.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore32_impl", "src/isa/s390x/lower.isle line 2837"
    )
}

// Generated as internal constructor for term istore64_impl.
pub fn constructor_istore64_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store64_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2862.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2858.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2866.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore64_impl", "src/isa/s390x/lower.isle line 2855"
    )
}

// Generated as internal constructor for term atomic_rmw_body.
pub fn constructor_atomic_rmw_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &AtomicRmwOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg3 {
        &AtomicRmwOp::Add => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v39 = &constructor_aluop_add(ctx, v38);
            let v40 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v39, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3029.
            return v40;
        }
        &AtomicRmwOp::And => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2991.
                return v32;
            }
        }
        &AtomicRmwOp::Nand => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v14 = C::mie2_enabled(ctx, arg1);
                if let Some(v15) = v14 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v17 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, arg6);
                        // Rule at src/isa/s390x/lower.isle line 2971.
                        return v17;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v19 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, v18);
                        // Rule at src/isa/s390x/lower.isle line 2974.
                        return v19;
                    }
                }
                let v20 = C::mie2_disabled(ctx, arg1);
                if let Some(v21) = v20 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v23 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, arg6);
                        let v24 = constructor_push_not_reg(ctx, arg0, v3, arg4, v23);
                        // Rule at src/isa/s390x/lower.isle line 2977.
                        return v24;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v25 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, v18);
                        let v26 = constructor_push_not_reg(ctx, arg0, v3, arg4, v25);
                        // Rule at src/isa/s390x/lower.isle line 2981.
                        return v26;
                    }
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                let v37 = constructor_atomic_rmw_body_invert(ctx, arg0, v28, arg2, arg4, v32);
                // Rule at src/isa/s390x/lower.isle line 2997.
                return v37;
            }
        }
        &AtomicRmwOp::Or => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v34 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Or,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2993.
                return v34;
            }
        }
        &AtomicRmwOp::Smax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v48 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
            let v49 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v48, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3070.
            return v49;
        }
        &AtomicRmwOp::Smin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v45 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
            let v46 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v45, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3067.
            return v46;
        }
        &AtomicRmwOp::Sub => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v41 = &constructor_aluop_sub(ctx, v38);
            let v42 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v41, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3031.
            return v42;
        }
        &AtomicRmwOp::Umax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v55 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
            let v56 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v55, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3076.
            return v56;
        }
        &AtomicRmwOp::Umin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v52 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
            let v53 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v52, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3073.
            return v53;
        }
        &AtomicRmwOp::Xchg => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v5 = C::bigendian(ctx, arg2);
                if let Some(v6) = v5 {
                    // Rule at src/isa/s390x/lower.isle line 2960.
                    return arg6;
                }
                let v11 = C::littleendian(ctx, arg2);
                if let Some(v12) = v11 {
                    let v13 = constructor_bswap_reg(ctx, v3, arg6);
                    // Rule at src/isa/s390x/lower.isle line 2963.
                    return v13;
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v30 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Insert,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2989.
                return v30;
            }
        }
        &AtomicRmwOp::Xor => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v36 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Xor,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2995.
                return v36;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body", "src/isa/s390x/lower.isle line 2955"
    )
}

// Generated as internal constructor for term atomic_rmw_body_rxsbg.
pub fn constructor_atomic_rmw_body_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &RxSBGOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v10 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x28, 0x18);
            // Rule at src/isa/s390x/lower.isle line 3005.
            return v10;
        }
        I16 => {
            let v11 = C::bigendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v15 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x30, 0x10);
                // Rule at src/isa/s390x/lower.isle line 3009.
                return v15;
            }
            let v16 = C::littleendian(ctx, arg2);
            if let Some(v17) = v16 {
                let v19 = constructor_bswap_reg(ctx, I32, arg6);
                let v22 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, v19, 0x30, 0x40, -0x10);
                // Rule at src/isa/s390x/lower.isle line 3013.
                return v22;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_rxsbg", "src/isa/s390x/lower.isle line 3002"
    )
}

// Generated as internal constructor for term atomic_rmw_body_invert.
pub fn constructor_atomic_rmw_body_invert<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v8 = C::uimm32shifted(ctx, 0xFF000000, 0x0);
            let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v8);
            // Rule at src/isa/s390x/lower.isle line 3019.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v13 = C::uimm32shifted(ctx, 0xFFFF0000, 0x0);
                let v14 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v13);
                // Rule at src/isa/s390x/lower.isle line 3022.
                return v14;
            }
            let v15 = C::littleendian(ctx, arg2);
            if let Some(v16) = v15 {
                let v18 = C::uimm32shifted(ctx, 0xFFFF, 0x0);
                let v19 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v18);
                // Rule at src/isa/s390x/lower.isle line 3025.
                return v19;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_invert", "src/isa/s390x/lower.isle line 3017"
    )
}

// Generated as internal constructor for term atomic_rmw_body_addsub.
pub fn constructor_atomic_rmw_body_addsub<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &ALUOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v23 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v22);
            // Rule at src/isa/s390x/lower.isle line 3052.
            return v23;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v11 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3038.
            return v11;
        }
    }
    let v12 = C::littleendian(ctx, arg2);
    if let Some(v13) = v12 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v14 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, arg5);
            let v15 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v14, arg6);
            let v16 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, v15);
            // Rule at src/isa/s390x/lower.isle line 3042.
            return v16;
        }
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v24 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, arg5);
            let v25 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v24, v22);
            let v26 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, v25);
            // Rule at src/isa/s390x/lower.isle line 3060.
            return v26;
        }
    }
    if arg1 == I8 {
        let v19 = constructor_lshl_imm(ctx, I32, arg6, 0x18);
        let v20 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v19);
        // Rule at src/isa/s390x/lower.isle line 3048.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_addsub", "src/isa/s390x/lower.isle line 3035"
    )
}

// Generated as internal constructor for term atomic_rmw_body_minmax.
pub fn constructor_atomic_rmw_body_minmax<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &CmpOp,
    arg4: &Cond,
    arg5: WritableReg,
    arg6: Reg,
    arg7: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v34 = &constructor_cmp_rr(ctx, arg3, v33, arg6);
            let v19 = &C::invert_cond(ctx, arg4);
            let v35 = constructor_push_break_if(ctx, arg0, v34, v19);
            let v37 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                arg6,
                v33,
                0x20,
                0x30,
                0x0,
            );
            // Rule at src/isa/s390x/lower.isle line 3111.
            return v37;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v12 = &constructor_cmp_rr(ctx, arg3, arg7, arg6);
            let v13 = &C::invert_cond(ctx, arg4);
            let v14 = constructor_push_break_if(ctx, arg0, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 3086.
            return arg7;
        }
    }
    let v15 = C::littleendian(ctx, arg2);
    if let Some(v16) = v15 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v17 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg6);
            let v18 = &constructor_cmp_rr(ctx, arg3, arg7, v17);
            let v19 = &C::invert_cond(ctx, arg4);
            let v20 = constructor_push_break_if(ctx, arg0, v18, v19);
            let v21 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg7);
            // Rule at src/isa/s390x/lower.isle line 3093.
            return v21;
        }
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v38 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, arg6);
            let v39 = &constructor_cmp_rr(ctx, arg3, v33, v38);
            let v40 = &C::invert_cond(ctx, arg4);
            let v41 = constructor_push_break_if(ctx, arg0, v39, v40);
            let v42 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                v38,
                v33,
                0x20,
                0x30,
                0x0,
            );
            let v43 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, v42);
            // Rule at src/isa/s390x/lower.isle line 3118.
            return v43;
        }
    }
    if arg1 == I8 {
        let v24 = constructor_lshl_imm(ctx, I32, arg7, 0x18);
        let v25 = &constructor_cmp_rr(ctx, arg3, v24, arg6);
        let v19 = &C::invert_cond(ctx, arg4);
        let v26 = constructor_push_break_if(ctx, arg0, v25, v19);
        let v31 = constructor_push_rxsbg(
            ctx,
            arg0,
            &RxSBGOp::Insert,
            arg5,
            arg6,
            v24,
            0x20,
            0x28,
            0x0,
        );
        // Rule at src/isa/s390x/lower.isle line 3105.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_minmax", "src/isa/s390x/lower.isle line 3081"
    )
}

// Generated as internal constructor for term atomic_cas_body.
pub fn constructor_atomic_cas_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v11 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x28, 0x18);
            let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
            let v14 = constructor_push_break_if(ctx, arg0, v11, v13);
            let v16 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg3,
                arg4,
                arg6,
                0x20,
                0x28,
                0x18,
            );
            // Rule at src/isa/s390x/lower.isle line 3170.
            return v16;
        }
        I16 => {
            let v17 = C::bigendian(ctx, arg2);
            if let Some(v18) = v17 {
                let v21 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x30, 0x10);
                let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v22 = constructor_push_break_if(ctx, arg0, v21, v13);
                let v23 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    arg6,
                    0x20,
                    0x30,
                    0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3177.
                return v23;
            }
            let v24 = C::littleendian(ctx, arg2);
            if let Some(v25) = v24 {
                let v27 = constructor_bswap_reg(ctx, I32, arg5);
                let v28 = constructor_bswap_reg(ctx, I32, arg6);
                let v31 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, v27, 0x30, 0x40, -0x10);
                let v32 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v33 = constructor_push_break_if(ctx, arg0, v31, v32);
                let v34 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    v28,
                    0x30,
                    0x40,
                    -0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3188.
                return v34;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_body", "src/isa/s390x/lower.isle line 3163"
    )
}

// Generated as internal constructor for term atomic_store_impl.
pub fn constructor_atomic_store_impl<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = &constructor_fence_impl(ctx);
    let v3 = constructor_side_effect(ctx, v2);
    // Rule at src/isa/s390x/lower.isle line 3234.
    return v3;
}

// Generated as internal constructor for term icmp_val.
pub fn constructor_icmp_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> ProducesBool {
    match arg1 {
        &IntCC::Equal => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v23 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                let v24 = &constructor_bool(ctx, v21, v23);
                // Rule at src/isa/s390x/lower.isle line 3380.
                return v24.clone();
            }
        }
        &IntCC::NotEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v26 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                let v27 = &constructor_bool(ctx, v21, v26);
                // Rule at src/isa/s390x/lower.isle line 3383.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3389.
                return v28.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                let v32 = &constructor_invert_bool(ctx, v31);
                // Rule at src/isa/s390x/lower.isle line 3393.
                return v32.clone();
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3391.
                return v31.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                let v33 = &constructor_invert_bool(ctx, v28);
                // Rule at src/isa/s390x/lower.isle line 3395.
                return v33.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3400.
                return v34.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                let v36 = &constructor_invert_bool(ctx, v35);
                // Rule at src/isa/s390x/lower.isle line 3404.
                return v36.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3402.
                return v35.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                let v37 = &constructor_invert_bool(ctx, v34);
                // Rule at src/isa/s390x/lower.isle line 3406.
                return v37.clone();
            }
        }
        _ => {}
    }
    let v5 = C::value_type(ctx, arg2);
    let v6 = C::fits_in_64(ctx, v5);
    if let Some(v7) = v6 {
        let v2 = C::signed(ctx, arg1);
        if let Some(v3) = v2 {
            let v9 = &constructor_icmps_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v11 = &constructor_bool(ctx, v9, v10);
            // Rule at src/isa/s390x/lower.isle line 3301.
            return v11.clone();
        }
        let v12 = C::unsigned(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_icmpu_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v15 = &constructor_bool(ctx, v14, v10);
            // Rule at src/isa/s390x/lower.isle line 3304.
            return v15.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_val", "src/isa/s390x/lower.isle line 3298"
    )
}

// Generated as internal constructor for term icmps_val.
pub fn constructor_icmps_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v28 = C::sinkable_inst(ctx, arg2);
            if let Some(v29) = v28 {
                let v30 = &C::inst_data(ctx, v29);
                if let &InstructionData::Load {
                    opcode: ref v31,
                    arg: v32,
                    flags: v33,
                    offset: v34,
                } = v30
                {
                    match v31 {
                        &Opcode::Load => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v25 = C::value_type(ctx, arg2);
                                if v25 == I16 {
                                    let v6 = constructor_ty_ext32(ctx, v4);
                                    let v7 = constructor_put_in_reg_sext32(ctx, arg1);
                                    let v39 = &constructor_sink_load(ctx, v29);
                                    let v40 = &constructor_icmps_mem_sext16(ctx, v6, v7, v39);
                                    // Rule at src/isa/s390x/lower.isle line 3330.
                                    return v40.clone();
                                }
                                let v26 = C::ty_32_or_64(ctx, v25);
                                if let Some(v27) = v26 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v37 = &constructor_sink_load(ctx, v29);
                                    let v38 = &constructor_icmps_mem(ctx, v4, v16, v37);
                                    // Rule at src/isa/s390x/lower.isle line 3326.
                                    return v38.clone();
                                }
                            }
                        }
                        &Opcode::Sload16 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v41 = &constructor_sink_sload16(ctx, v29);
                                let v42 = &constructor_icmps_mem_sext16(ctx, v4, v16, v41);
                                // Rule at src/isa/s390x/lower.isle line 3334.
                                return v42.clone();
                            }
                        }
                        &Opcode::Sload32 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v43 = &constructor_sink_sload32(ctx, v29);
                                let v44 = &constructor_icmps_mem_sext32(ctx, v4, v16, v43);
                                // Rule at src/isa/s390x/lower.isle line 3336.
                                return v44.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Sextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmps_reg_sext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3316.
                        return v18.clone();
                    }
                }
            }
        }
        let v19 = C::i16_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v21 = &constructor_icmps_simm16(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3320.
            return v21.clone();
        }
        let v22 = C::i32_from_value(ctx, arg2);
        if let Some(v23) = v22 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v24 = &constructor_icmps_simm32(ctx, v6, v7, v23);
            // Rule at src/isa/s390x/lower.isle line 3322.
            return v24.clone();
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_sext32(ctx, arg1);
        let v8 = constructor_put_in_reg_sext32(ctx, arg2);
        let v9 = &constructor_icmps_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3312.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmps_val", "src/isa/s390x/lower.isle line 3309"
    )
}

// Generated as internal constructor for term icmpu_val.
pub fn constructor_icmpu_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v25 = C::sinkable_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::Load {
                    opcode: ref v28,
                    arg: v29,
                    flags: v30,
                    offset: v31,
                } = v27
                {
                    match v28 {
                        &Opcode::Load => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v22 = C::value_type(ctx, arg2);
                                let v23 = C::ty_32_or_64(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v34 = &constructor_sink_load(ctx, v26);
                                    let v35 = &constructor_icmpu_mem(ctx, v4, v16, v34);
                                    // Rule at src/isa/s390x/lower.isle line 3356.
                                    return v35.clone();
                                }
                                if v22 == I16 {
                                    let v36 = constructor_load_sym(ctx, v26);
                                    if let Some(v37) = v36 {
                                        let v6 = constructor_ty_ext32(ctx, v4);
                                        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
                                        let v38 = &constructor_sink_load(ctx, v37);
                                        let v39 = &constructor_icmpu_mem_zext16(ctx, v6, v7, v38);
                                        // Rule at src/isa/s390x/lower.isle line 3362.
                                        return v39.clone();
                                    }
                                }
                            }
                        }
                        &Opcode::Uload16 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v40 = constructor_uload16_sym(ctx, v26);
                                if let Some(v41) = v40 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v42 = &constructor_sink_uload16(ctx, v41);
                                    let v43 = &constructor_icmpu_mem_zext16(ctx, v4, v16, v42);
                                    // Rule at src/isa/s390x/lower.isle line 3370.
                                    return v43.clone();
                                }
                            }
                        }
                        &Opcode::Uload32 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v44 = &constructor_sink_uload32(ctx, v26);
                                let v45 = &constructor_icmpu_mem_zext32(ctx, v4, v16, v44);
                                // Rule at src/isa/s390x/lower.isle line 3374.
                                return v45.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v19 = C::u32_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_zext32(ctx, arg1);
            let v21 = &constructor_icmpu_uimm32(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3352.
            return v21.clone();
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Uextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmpu_reg_zext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3348.
                        return v18.clone();
                    }
                }
            }
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
        let v8 = constructor_put_in_reg_zext32(ctx, arg2);
        let v9 = &constructor_icmpu_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3344.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmpu_val", "src/isa/s390x/lower.isle line 3341"
    )
}

// Generated as internal constructor for term fcmp_val.
pub fn constructor_fcmp_val<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> ProducesBool {
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = C::put_in_reg(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v6 = &constructor_fcmp_reg(ctx, v2, v4, v5);
    let v7 = &C::floatcc_as_cond(ctx, arg0);
    let v8 = &constructor_bool(ctx, v6, v7);
    // Rule at src/isa/s390x/lower.isle line 3444.
    return v8.clone();
}

// Generated as internal constructor for term vall_true_val.
pub fn constructor_vall_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3527.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3533.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3539.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3545.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3551.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3530.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3554.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3548.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3542.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3536.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3495.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3498.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3501.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3510.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3507.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3504.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3513.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3522.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3519.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3516.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3490.
    return v8.clone();
}

// Generated as internal constructor for term vany_true_val.
pub fn constructor_vany_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3605.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3611.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3617.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3623.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3629.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3608.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3632.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3626.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3620.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3614.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3573.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3576.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3579.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3588.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3585.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3582.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3591.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3600.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3597.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3594.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3568.
    return v8.clone();
}

// Generated as internal constructor for term value_nonzero.
pub fn constructor_value_nonzero<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v12,
                args: ref v13,
                cond: ref v14,
            } => {
                if let &Opcode::Fcmp = v12 {
                    let v15 = C::unpack_value_array_2(ctx, v13);
                    let v18 = &constructor_fcmp_val(ctx, v14, v15.0, v15.1);
                    // Rule at src/isa/s390x/lower.isle line 3706.
                    return v18.clone();
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v7 = C::unpack_value_array_2(ctx, v5);
                    let v11 = &constructor_icmp_val(ctx, false, v6, v7.0, v7.1);
                    // Rule at src/isa/s390x/lower.isle line 3705.
                    return v11.clone();
                }
            }
            _ => {}
        }
    }
    let v19 = C::value_type(ctx, arg0);
    let v20 = C::gpr32_ty(ctx, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_put_in_reg_sext32(ctx, arg0);
        let v25 = &constructor_icmps_simm16(ctx, I32, v23, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v28 = &constructor_bool(ctx, v25, v27);
        // Rule at src/isa/s390x/lower.isle line 3707.
        return v28.clone();
    }
    let v29 = C::gpr64_ty(ctx, v19);
    if let Some(v30) = v29 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v33 = &constructor_icmps_simm16(ctx, I64, v32, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v34 = &constructor_bool(ctx, v33, v27);
        // Rule at src/isa/s390x/lower.isle line 3710.
        return v34.clone();
    }
    let v35 = C::vr128_ty(ctx, v19);
    if let Some(v36) = v35 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v39 = constructor_vec_imm(ctx, I64X2, 0x0);
        let v40 = &constructor_vec_cmpeqs(ctx, I64X2, v32, v39);
        let v42 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
        let v43 = &constructor_bool(ctx, v40, v42);
        // Rule at src/isa/s390x/lower.isle line 3713.
        return v43.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "value_nonzero", "src/isa/s390x/lower.isle line 3704"
    )
}

// Generated as internal constructor for term lower_call_args.
pub fn constructor_lower_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = constructor_lower_call_args_buffer(ctx, arg0, arg1, arg2);
    let v5 = constructor_lower_call_args_slots(ctx, arg0, v3, arg1, arg2);
    let v6 = constructor_lower_call_ret_arg(ctx, arg0, v3);
    let v7 = &C::args_builder_finish(ctx, v3);
    // Rule at src/isa/s390x/lower.isle line 3931.
    return v7.clone();
}

// Generated as internal constructor for term lower_call_args_buffer.
pub fn constructor_lower_call_args_buffer<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> InstOutput {
    let v2 = &C::range_view(ctx, arg1);
    match v2 {
        &RangeView::Empty => {
            let v4 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3940.
            return v4;
        }
        &RangeView::NonEmpty {
            index: v5,
            rest: v6,
        } => {
            let v8 = &C::abi_get_arg(ctx, arg0, v5);
            let v9 = C::value_slice_get(ctx, arg2, v5);
            let v10 = constructor_copy_to_buffer(ctx, 0x0, v8, v9);
            let v11 = constructor_lower_call_args_buffer(ctx, arg0, v6, arg2);
            // Rule at src/isa/s390x/lower.isle line 3941.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_buffer", "src/isa/s390x/lower.isle line 3939"
    )
}

// Generated as internal constructor for term lower_call_args_slots.
pub fn constructor_lower_call_args_slots<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: Range,
    arg3: ValueSlice,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3948.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v10 = &C::abi_get_arg(ctx, arg0, v6);
            let v11 = C::value_slice_get(ctx, arg3, v6);
            let v12 = constructor_copy_to_arg(ctx, arg1, v8, 0x0, v10, v11);
            let v13 = constructor_lower_call_args_slots(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 3949.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_slots", "src/isa/s390x/lower.isle line 3947"
    )
}

// Generated as internal constructor for term lower_call_ret_arg.
pub fn constructor_lower_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
) -> InstOutput {
    let v5 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = &C::abi_arg_only_slot(ctx, v6);
        if let Some(v8) = v7 {
            let v9 = C::abi_sized_stack_arg_space(ctx, arg0);
            let v11 = &C::memarg_stack_off(ctx, v9, 0x0);
            let v12 = &C::abi_lane_order(ctx, arg0);
            let v13 = constructor_load_addr(ctx, v11);
            let v14 = constructor_copy_reg_to_arg_slot(ctx, arg1, v12, 0x0, v8, v13);
            // Rule at src/isa/s390x/lower.isle line 3958.
            return v14;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::output_none(ctx);
        // Rule at src/isa/s390x/lower.isle line 3957.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_ret_arg", "src/isa/s390x/lower.isle line 3956"
    )
}

// Generated as internal constructor for term lower_call_rets.
pub fn constructor_lower_call_rets<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallRetList,
    arg2: Range,
    arg3: &InstOutputBuilder,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_builder_finish(ctx, arg3);
            // Rule at src/isa/s390x/lower.isle line 3964.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v9 = C::abi_sized_stack_arg_space(ctx, arg0);
            let v10 = &C::abi_get_ret(ctx, arg0, v6);
            let v11 = constructor_copy_from_arg(ctx, arg1, v8, v9, v10);
            let v12 = C::output_builder_push(ctx, arg3, v11);
            let v13 = constructor_lower_call_rets(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 3965.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_rets", "src/isa/s390x/lower.isle line 3963"
    )
}
